<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的个人博客网址了解一下啦</title>
    <link href="/2022/06/03/categories/c++/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%95%A6/"/>
    <url>/2022/06/03/categories/c++/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E5%9D%80%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<p>https://6jackjiang.github.io<img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c92e19b883ca4cbabbfc2f52eae9bcee.jpg"/></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++程序员进大厂必备知识点之懒人专用模板概念及用法</title>
    <link href="/2022/06/01/categories/c++/C++%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%9B%E5%A4%A7%E5%8E%82%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8B%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%A6%82%E5%BF%B5%E5%8F%8A%E7%94%A8%E6%B3%95/"/>
    <url>/2022/06/01/categories/c++/C++%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%9B%E5%A4%A7%E5%8E%82%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8B%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%A6%82%E5%BF%B5%E5%8F%8A%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_4"></a>前言</h1><p>C++值得用一生去学习，本人是个C++萌新，欢迎大家和我讨论交流。</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/be804bd176c46ad4d11f62fbcc5ff324.png#pic_center"/></p><h1><a id="_10"></a>什么是模板</h1><p><strong>个人理解：</strong></p><blockquote><p>模板就是给你一个大致的解决方案，如果自己想要解决的实际问题和这个模板有关系的话，自己根据模板的解决方案解决自己的问题。</p></blockquote><blockquote><p>函数模板是一个蓝图，它本身并不是函数，是编译器用使用方式产生特定具体类型函数的模具。<br/> 所以其实模板就是将本来应该我们做的重复的事情交给了编译器</p></blockquote><blockquote><p>在编译器编译阶段，对于模板函数的使用，编译器需要根据传入的实参类型来推演生成对应类型<br/> 的函数以供调用。比如：当用double类型使用函数模板时，编译器通过对实参类型的推演，将T<br/> 确定为double类型，然后产生一份专门处理double类型的代码，对于字符类型也是如此。</p></blockquote><p><strong>代码演示：</strong></p><pre><code class="hljs">实现一个交换函数，当我们要交换多种类型的数据的时候用模板会方便一些</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T tmp = a;<br>a = b;<br>b = tmp;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">大家可以自行验证一下，代码放在了下边</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T tmp = a;<br>a = b;<br>b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><span class="hljs-type">double</span> c = <span class="hljs-number">1.1</span>, d = <span class="hljs-number">2.2</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; <span class="hljs-string">&quot;c:&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">&quot;d:&quot;</span> &lt;&lt; d &lt;&lt; endl;<br><span class="hljs-built_in">Swap</span>(a, b);<br><span class="hljs-built_in">Swap</span>(c, d);<br><br>cout &lt;&lt;<span class="hljs-string">&quot;交换后&quot;</span>&lt;&lt;<span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt;<span class="hljs-string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; <span class="hljs-string">&quot;c:&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">&quot;d:&quot;</span> &lt;&lt; d &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>使用函数重载也可以但是要写很多行代码，代码复用率比较低，如果有一个新的类型出现时就要添加一个对应的函数，而且如果有一个函数重载错了那就有可能所有重载全出问题。</p></blockquote><h1><a id="_63"></a>函数模板的实例化</h1><blockquote><p>用不同类型的参数使用函数模板时，称为函数模板的实例化。模板参数实例化分为：隐式实例化和显式实例化。</p></blockquote><p><strong>1. 隐式实例化：让编译器根据实参推演模板参数的实际类型</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; left, <span class="hljs-type">const</span> T&amp; right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> left + right;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>, a2 = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">double</span> d1 = <span class="hljs-number">10.0</span>, d2 = <span class="hljs-number">20.0</span>;<br>    <span class="hljs-built_in">Add</span>(a1, a2);<br>    <span class="hljs-built_in">Add</span>(d1, d2);<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     该语句不能通过编译，因为在编译期间，当编译器看到该实例化时，需要推演其实参类型</span><br><span class="hljs-comment">     通过实参a1将T推演为int，通过实参d1将T推演为double类型，但模板参数列表中只有</span><br><span class="hljs-comment">一个T，</span><br><span class="hljs-comment">     编译器无法确定此处到底该将T确定为int 或者 double类型而报错</span><br><span class="hljs-comment">    注意：在模板中，编译器一般不会进行类型转换操作，因为一旦转化出问题，编译器就需要</span><br><span class="hljs-comment">背黑锅</span><br><span class="hljs-comment">     Add(a1, d1);</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">// 此时有两种处理方式：1. 用户自己来强制转化 2. 使用显式实例化</span><br>    <span class="hljs-built_in">Add</span>(a, (<span class="hljs-type">int</span>)d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2.显式实例化：在函数名后的&lt;&gt;中指定模板参数的实际类型</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">double</span> b = <span class="hljs-number">20.0</span>;<br>    <br>    <span class="hljs-comment">// 显式实例化</span><br>    <span class="hljs-built_in">Add</span>&lt;<span class="hljs-type">int</span>&gt;(a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>如果类型不匹配，编译器会尝试进行隐式类型转换，如果无法转换成功编译器将会报错。</strong></p><h1><a id="_111"></a>模板参数匹配原则</h1><blockquote><ol><li>一个非模板函数可以和一个同名的函数模板同时存在，而且该函数模板 还可以被实例化为这个非模板函数</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-comment">// 专门处理int的加法函数</span><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">return</span> left + right;<br>&#125;<br> <br> <span class="hljs-comment">// 通用加法函数</span><br> <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"> T <span class="hljs-title">Add</span><span class="hljs-params">(T left, T right)</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">return</span> left + right;<br>&#125;<br> <br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);       <span class="hljs-comment">// 与非模板函数匹配，编译器不需要特化</span><br>     <span class="hljs-built_in">Add</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">// 调用编译器特化的Add版本</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://live.csdn.net/v/213176">点击此处看上方代码的调试视频</a></p><blockquote><ol start="2"><li>对于非模板函数和同名函数模板，如果其他条件都相同，在调动时会优先调用非模板函数而不会从该模板产生出一个实例。如果模板可以产生一个具有更好匹配的函数， 那么将选择模板</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 专门处理int的加法函数</span><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">return</span> left + right;<br>&#125;<br> <br> <span class="hljs-comment">// 通用加法函数</span><br> <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T1, <span class="hljs-keyword">class</span> T2&gt;</span><br><span class="hljs-function"> T1 <span class="hljs-title">Add</span><span class="hljs-params">(T1 left, T2 right)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">return</span> left + right;<br>&#125;<br> <br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);     <span class="hljs-comment">// 与非函数模板类型完全匹配，不需要函数模板实例化</span><br>     <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2.0</span>);   <span class="hljs-comment">// 模板函数可以生成更加匹配的版本，编译器根据实参生成更加匹配的Add函数</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>模板函数不允许自动类型转换，但普通函数可以进行自动类型转换</li></ol></blockquote><h1><a id="_161"></a>类模板</h1><p>1 类模板的定义格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>, ..., <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tn</span>&gt;<br><span class="hljs-keyword">class</span> 类模板名<br>&#123;<br><span class="hljs-comment">// 类内成员定义</span><br>&#125;;  <br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 动态顺序表</span><br><span class="hljs-comment">// 注意：Vector不是具体的类，是编译器根据被实例化的类型生成具体类的模具</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span><br>&#123; <br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">Vector</span>(<span class="hljs-type">size_t</span> capacity = <span class="hljs-number">10</span>)<br> : _pData(<span class="hljs-keyword">new</span> T[capacity])<br>     , _size(<span class="hljs-number">0</span>)<br>     , _capacity(capacity)<br> &#123;&#125;<br><span class="hljs-comment">// 使用析构函数演示：在类中声明，在类外定义。</span><br>~<span class="hljs-built_in">Vector</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PushBack</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; data)</span>；</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PopBack</span><span class="hljs-params">()</span>；</span><br><span class="hljs-function"><span class="hljs-comment">// ...</span></span><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">Size</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> _size;&#125;<br>T&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> pos)<br> &#123;<br>     <span class="hljs-built_in">assert</span>(pos &lt; _size);<br>     <span class="hljs-keyword">return</span> _pData[pos];<br> &#125;<br><span class="hljs-keyword">private</span>:<br>T* _pData;<br><span class="hljs-type">size_t</span> _size;<br><span class="hljs-type">size_t</span> _capacity;<br>&#125;;<br><span class="hljs-comment">// 注意：类模板中函数放在类外进行定义时，需要加模板参数列表</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>Vector&lt;T&gt;::~<span class="hljs-built_in">Vector</span>()<br>&#123;<br><span class="hljs-keyword">if</span>(_pData)<br>     <span class="hljs-keyword">delete</span>[] _pData;<br>_size = _capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2类模板的实例化</strong></p><blockquote><p>类模板实例化与函数模板实例化不同，类模板实例化需要在类模板名字后跟&lt;&gt;，然后将实例化的类型放在&lt;&gt;中即可，类模板名字不是真正的类，而实例化的结果才是真正的类。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Vector类名，Vector&lt;int&gt;才是类型</span><br>Vector&lt;<span class="hljs-type">int</span>&gt; s1;<br>Vector&lt;<span class="hljs-type">double</span>&gt; s2<br><br></code></pre></td></tr></table></figure><h1><a id="_221"></a>模板的优缺点</h1><p>优点：</p><ol><li>模板复用了代码，节省资源，更快的迭代开发，C++的标准模板库(STL)因 此而产生</li><li>增强了代码的灵活性.</li></ol><p>缺点：</p><ol><li>模板会导致代码膨胀问题，也会导致编译时间变长</li><li>出现模板编译错误时，错误信息非常凌乱，不易定位错误</li></ol><h1><a id="_231"></a>一些好看的图片</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/0822aa8c4ab048a885e34af24776b7e3.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/71023dbb63274e429f6f52687d0cf7df.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/7f93f13ae72a4058a83373d857fecf3d.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/299517fd94074cc9afd982f529da3df4.png"/></img></img></img></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++内存管理</title>
    <link href="/2022/05/28/categories/c++/C_C++%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2022/05/28/categories/c++/C_C++%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="1_CC_5"></a>1. C/C++内存分布</h1><blockquote><p>我们先来看下面的一段代码和相关问题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> globalVar = <span class="hljs-number">1</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> staticGlobalVar = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-type">static</span> <span class="hljs-type">int</span> staticVar = <span class="hljs-number">1</span>;<br> <span class="hljs-type">int</span> localVar = <span class="hljs-number">1</span>;<br> <br> <span class="hljs-type">int</span> num1[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br> <span class="hljs-type">char</span> char2[] = <span class="hljs-string">&quot;abcd&quot;</span>;<br> <span class="hljs-type">char</span>* pChar3 = <span class="hljs-string">&quot;abcd&quot;</span>;<br> <span class="hljs-type">int</span>* ptr1 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (<span class="hljs-type">int</span>)*<span class="hljs-number">4</span>);<br> <span class="hljs-type">int</span>* ptr2 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">4</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br> <span class="hljs-type">int</span>* ptr3 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(ptr2, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">4</span>);<br> <span class="hljs-built_in">free</span> (ptr1);<br> <span class="hljs-built_in">free</span> (ptr3);<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><ol><li>选择题：<br/> 选项: A.栈 B.堆 C.数据段 D.代码段<br/> globalVar在哪里？C staticGlobalVar在哪里？C<br/> staticVar在哪里？C localVar在哪里？A<br/> num1 在哪里？A<br/> char2在哪里？ A *char2在哪里？A<br/> pChar3在哪里？A *pChar3在哪里？D<br/> ptr1在哪里？A *ptr1在哪里？B</li><li>填空题：<br/> sizeof(num1) = 40;<br/> sizeof(char2) = 5; strlen(char2) = 4;<br/> sizeof(pChar3) = 4/8; strlen(pChar3) = 4;<br/> sizeof(ptr1) = 4/8;</li></ol></blockquote><ol><li>栈又叫堆栈，非静态局部变量/函数参数/返回值等等，栈是向下增长的。</li><li>内存映射段是高效的I/O映射方式，用于装载一个共享的动态内存库。用户可使用系统接口创建共享共<br/> 享内存，做进程间通信。（Linux课程如果没学到这块，现在只需要了解一下）</li><li>堆用于程序运行时动态内存分配，堆是可以上增长的。</li><li>数据段–存储全局数据和静态数据。</li><li>代码段–可执行的代码/只读常量。</li></ol><hr/><h1><a id="2_C_51"></a>2. C语言中动态内存管理方式</h1><p>2.1 malloc/calloc/realloc和free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Test</span> <span class="hljs-params">()</span><br>&#123;<br> <span class="hljs-type">int</span>* p1 = (<span class="hljs-type">int</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br> <span class="hljs-built_in">free</span>(p1);<br> <br> <span class="hljs-comment">// 1.malloc/calloc/realloc的区别是什么？</span><br> <span class="hljs-type">int</span>* p2 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">4</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>));<br> <span class="hljs-type">int</span>* p3 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(p2, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">10</span>);<br> <br> <span class="hljs-comment">// 这里需要free(p2)吗？</span><br> <span class="hljs-built_in">free</span>(p3 );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看一下这个需要free(p2)吗？答案是不需要的，因为根据上面那个realloc底层实现上来看，他会在封装realloc内部进行操作，free()掉原空间，所以此时入去再去free()的话就相当于对一块原空间free了两次(以上陈述建立在新空间中开辟)。<br/> <strong>使用malloc、calloc、realloc函数申请的空间都为堆空间，程序结束之后，系统不会将其自动释放，需要程序员自主管理。</strong></p><blockquote><p>malloc函数的功能是开辟指定字节大小的内存空间，如果开辟成功就返回该空间的首地址，如果开辟失败就返回一个NULL。传参时只需传入需要开辟的字节个数。</p></blockquote><blockquote><p>calloc函数的功能也是开辟指定大小的内存空间，如果开辟成功就返回该空间的首地址，如果开辟失败就返回一个NULL。calloc函数传参时需要传入开辟的内存用于存放的元素个数和每个元素的大小。calloc函数开辟好内存后会将空间内容中的每一个字节都初始化为0。</p></blockquote><blockquote><p>realloc<br/> 1.根据size申请一段新的空间<br/> 2.对原空间的内容拷贝原空间size个字节大小。(假如说缩容的话，则可能会造成数据丢失).<br/> 3.释放掉原空间(这点很关键)，这块的realloc会有两种处理策略，一个是在原空间上进行操作(扩容或者减容)不去寻找新空间 ，第二种情况是在新空间中开辟一段空间。(因为这是操作系统做决定的，所以我们无法模拟出来)。<br/> 4.在开辟成功的基础上返回新开辟的空间首地址。</p></blockquote><hr/><h1><a id="3C_85"></a>3.C++中动态内存管理</h1><p>C语言内存管理方式在C++中可以继续使用，但有些地方就无能为力而且使用起来比较麻烦，因此C++又提出了自己的内存管理方式：通过new和delete操作符进行动态内存管理。</p><h2><a id="31_newdelete_87"></a>3.1 new/delete操作内置类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-comment">// 动态申请一个int类型的空间</span><br> <span class="hljs-type">int</span>* ptr4 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>;<br> <br> <span class="hljs-comment">// 动态申请一个int类型的空间并初始化为10</span><br> <span class="hljs-type">int</span>* ptr5 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br> <br> <span class="hljs-comment">// 动态申请10个int类型的空间</span><br> <span class="hljs-type">int</span>* ptr6 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br> <br> <span class="hljs-keyword">delete</span> ptr4;<br> <span class="hljs-keyword">delete</span> ptr5;<br> <span class="hljs-keyword">delete</span>[] ptr6;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：申请和释放单个元素的空间，使用new和delete操作符，申请和释放连续的空间，使用new[]和delete[]</p></blockquote><h2><a id="32_newdelete_109"></a>3.2 new和delete操作自定义类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Test</span>()<br> : _data(<span class="hljs-number">0</span>)<br> &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Test():&quot;</span>&lt;&lt;<span class="hljs-keyword">this</span>&lt;&lt;endl;<br> &#125;<br> ~<span class="hljs-built_in">Test</span>()<br> &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;~Test():&quot;</span>&lt;&lt;<span class="hljs-keyword">this</span>&lt;&lt;endl;<br> &#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _data;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-comment">// 申请单个Test类型的空间</span><br> Test* p1 = (Test*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Test));<br> <span class="hljs-built_in">free</span>(p1);<br> <br> <span class="hljs-comment">// 申请10个Test类型的空间</span><br> Test* p2 = (Test*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizoef</span>(Test) * <span class="hljs-number">10</span>);<br> <span class="hljs-built_in">free</span>(p2);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-comment">// 申请单个Test类型的对象</span><br> Test* p1 = <span class="hljs-keyword">new</span> Test;<br> <span class="hljs-keyword">delete</span> p1;<br> <br> <span class="hljs-comment">// 申请10个Test类型的对象</span><br> Test* p2 = <span class="hljs-keyword">new</span> Test[<span class="hljs-number">10</span>];<br> <span class="hljs-keyword">delete</span>[] p2;<br>&#125;<br><br>&gt; 注意：在申请自定义类型的空间时，<span class="hljs-keyword">new</span>会调用构造函数，<span class="hljs-keyword">delete</span>会调用析构函数，而malloc与free不会<br><br><br></code></pre></td></tr></table></figure><hr/><h1><a id="4_operator_newoperator_delete_155"></a>4. operator new与operator delete函数</h1><p>4.1 operator new与operator delete函数（重点）<br/> new和delete是用户进行动态内存申请和释放的操作符，operator new 和operator delete是系统提供的<br/> 全局函数，new在底层调用operator new全局函数来申请空间，delete在底层通过operator delete全局<br/> 函数来释放空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">operator new：该函数实际通过malloc来申请空间，当malloc申请空间成功时直接返回；申请空间失败，</span><br><span class="hljs-comment">尝试执行空 间不足应对措施，如果改应对措施用户设置了，则继续申请，否则抛异常。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> *__CRTDECL <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> _<span class="hljs-title">THROW1</span><span class="hljs-params">(_STD bad_alloc)</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-comment">// try to allocate size bytes</span><br> <span class="hljs-type">void</span> *p;<br> <span class="hljs-keyword">while</span> ((p = <span class="hljs-built_in">malloc</span>(size)) == <span class="hljs-number">0</span>)<br> <span class="hljs-keyword">if</span> (_callnewh(size) == <span class="hljs-number">0</span>)<br> &#123;<br> <span class="hljs-comment">// report no memory</span><br> <span class="hljs-comment">// 如果申请内存失败了，这里会抛出bad_alloc 类型异常</span><br> <span class="hljs-type">static</span> <span class="hljs-type">const</span> std::bad_alloc nomem;<br> _RAISE(nomem);<br> &#125;<br> <span class="hljs-keyword">return</span> (p);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">operator delete: 该函数最终是通过free来释放空间的</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span> *pUserData)</span></span><br><span class="hljs-function"></span>&#123;<br> _CrtMemBlockHeader * pHead;<br> <span class="hljs-built_in">RTCCALLBACK</span>(_RTC_Free_hook, (pUserData, <span class="hljs-number">0</span>));<br> <span class="hljs-keyword">if</span> (pUserData == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br> _mlock(_HEAP_LOCK); <span class="hljs-comment">/* block other threads */</span><br> __TRY<br> <span class="hljs-comment">/* get a pointer to memory block header */</span><br> pHead = <span class="hljs-built_in">pHdr</span>(pUserData);<br> <span class="hljs-comment">/* verify block type */</span><br> _ASSERTE(_BLOCK_TYPE_IS_VALID(pHead-&gt;nBlockUse));<br> _free_dbg( pUserData, pHead-&gt;nBlockUse );<br> __FINALLY<br> _munlock(_HEAP_LOCK); <span class="hljs-comment">/* release other threads */</span><br> __END_TRY_FINALLY<br> <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">free的实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> free(p) _free_dbg(p, _NORMAL_BLOCK)</span><br><br><br></code></pre></td></tr></table></figure><p>通过上述两个全局函数的实现知道，operator new 实际也是通过malloc来申请空间，如果malloc申请空间<br/> 成功就直接返回，否则执行用户提供的空间不足应对措施，如果用户提供该措施就继续申请，否则就抛异<br/> 常。operator delete 最终是通过free来释放空间的。</p><hr/><h1><a id="5_newdelete_214"></a>5. new和delete的实现原理</h1><h2><a id="51__215"></a>5.1 内置类型</h2><blockquote><p>如果申请的是内置类型的空间，new和malloc，delete和free基本类似，不同的地方是：new/delete申请和释放的是单个元素的空间，new[]和delete[]申请的是连续空间，而且new在申请空间失败时会抛异常，malloc会返回NULL。</p></blockquote><h2><a id="52__218"></a>5.2 自定义类型</h2><p>new的原理</p><ol><li>调用operator new函数申请空间</li><li>在申请的空间上执行构造函数，完成对象的构造</li></ol><p>delete的原理</p><ol><li>在空间上执行析构函数，完成对象中资源的清理工作</li><li>调用operator delete函数释放对象的空间</li></ol><p>new T[N]的原理</p><ol><li>调用operator new[]函数，在operator new[]中实际调用operator new函数完成N个对象空间的申请</li><li>在申请的空间上执行N次构造函数</li></ol><p>delete[]的原理</p><ol><li>在释放的对象空间上执行N次析构函数，完成N个对象中资源的清理</li><li>调用operator delete[]释放空间，实际在operator delete[]中调用operator delete来释放空间</li></ol><hr/><h1><a id="6_newplacementnew_237"></a>6. 定位new表达式(placement-new)</h1><p>定位new表达式是在已分配的原始内存空间中调用构造函数初始化一个对象。<br/> 使用格式：<br/> new (place_address) type或者new (place_address) type(initializer-list)<br/> place_address必须是一个指针，initializer-list是类型的初始化列表<br/> 使用场景：<br/> 定位new表达式在实际中一般是配合内存池使用。因为内存池分配出的内存没有初始化，所以如果是自定义<br/> 类型的对象，需要使用new的定义表达式进行显示调构造函数进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Test</span>()<br> : _data(<span class="hljs-number">0</span>)<br> &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;Test():&quot;</span>&lt;&lt;<span class="hljs-keyword">this</span>&lt;&lt;endl;<br> &#125;<br> ~<span class="hljs-built_in">Test</span>()<br> &#123;<br> cout&lt;&lt;<span class="hljs-string">&quot;~Test():&quot;</span>&lt;&lt;<span class="hljs-keyword">this</span>&lt;&lt;endl;<br> &#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _data;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-comment">// pt现在指向的只不过是与Test对象相同大小的一段空间，还不能算是一个对  //象，因为构造函数没有执行</span><br> Test* pt = (Test*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Test));<br> <br> <span class="hljs-keyword">new</span>(pt) Test; <span class="hljs-comment">// 注意：如果Test类的构造函数有参数时，此处需要传参</span><br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="7__276"></a>7. 常见面试题</h1><h2><a id="71_mallocfreenewdelete_278"></a>7.1 malloc/free和new/delete的区别</h2><blockquote><p>malloc/free和new/delete的共同点是：都是从堆上申请空间，并且需要用户手动释放。不同的地方是：</p><ol><li>malloc和free是函数，new和delete是操作符</li><li>malloc申请的空间不会初始化，new可以初始化</li><li>malloc申请空间时，需要手动计算空间大小并传递，new只需在其后跟上空间的类型即可</li><li>malloc的返回值为void*, 在使用时必须强转，new不需要，因为new后跟的是空间的类型</li><li>malloc申请空间失败时，返回的是NULL，因此使用时必须判空，new不需要，但是new需要捕获异常</li><li>申请自定义类型对象时，malloc/free只会开辟空间，不会调用构造函数与析构函数，而new在申请空间<br/> 后会调用构造函数完成对象的初始化，delete在释放空间前会调用析构函数完成空间中资源的清理</li></ol></blockquote><h2><a id="72__288"></a>7.2 内存泄漏</h2><h3><a id="721__289"></a>7.2.1 什么是内存泄漏，内存泄漏的危害</h3><blockquote><p>什么是内存泄漏：内存泄漏指因为疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并不是指内存在物理上的消失，而是应用程序分配某段内存后，因为设计错误，失去了对该段内存的控制，因而造成了内存的浪费。</p></blockquote><blockquote><p>内存泄漏的危害：长期运行的程序出现内存泄漏，影响很大，如操作系统、后台服务等等，出现内存泄漏会导致响应越来越慢，最终卡死。</p></blockquote><h3><a id="722__296"></a>7.2.2 内存泄漏分类（了解）</h3><blockquote><p>C/C++程序中一般我们关心两种方面的内存泄漏： 堆内存泄漏(Heap leak) 堆内存指的是程序执行中依据须要分配通过malloc /<br/> calloc / realloc / new等从堆中分配的一块内存， 用完后必须通过调用相应的 free或者delete<br/> 删掉。假设程序的设计错误导致这部分内存没有被释放，那 么以后这部分空间将无法再被使用，就会产生Heap Leak。 系统资源泄漏<br/> 指程序使用系统分配的资源，比方套接字、文件描述符、管道等没有使用对应的函数释放掉，导致系统<br/> 资源的浪费，严重可导致系统效能减少，系统执行不稳定。</p></blockquote><h3><a id="723__305"></a>7.2.3 如何检测内存泄漏（了解）</h3><blockquote><p>在linux下内存泄漏检测：<a href="https://blog.csdn.net/gatieme/article/details/51959654">linux下几款内存泄漏检测工具</a><br/> 在windows下使用第三方工具：<a href="https://blog.csdn.net/GZrhaunt/article/details/56839765">VLD工具说明</a><br/> 其他工具：<a href="https://www.cnblogs.com/liangxiaofeng/p/4318499.html">内存泄漏工具比较</a></p></blockquote><h3><a id="724_311"></a>7.2.4如何避免内存泄漏</h3><blockquote><ol><li>工程前期良好的设计规范，养成良好的编码规范，申请的内存空间记着匹配的去释放。ps：这个理想状<br/> 态。但是如果碰上异常时，就算注意释放了，还是可能会出问题。需要下一条智能指针来管理才有保<br/> 证。</li><li>采用RAII思想或者智能指针来管理资源。</li><li>有些公司内部规范使用内部实现的私有内存管理库。这套库自带内存泄漏检测的功能选项。</li><li>出问题了使用内存泄漏工具检测。ps：不过很多工具都不够靠谱，或者收费昂贵。 总结一下: 内存泄漏非常常见，解决方案分为两种： 1、事前预防型。如智能指针等。 2、事后查错型。如泄漏检测工具。</li></ol></blockquote><h2><a id="73_4G_321"></a>7.3 如何一次在堆上申请4G的内存？</h2><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/94337144f0cf4fe8a94e41ac52dfc0cc.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/2250a6eecbf246fba51ea3f4c9586476.png"/></img></p><p>将X86 改成 X64</p><hr/><h1><a id="_330"></a>一些好康的图片，希望你能喜欢</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/e0e33e38942341ef3306d04b16dc01b4.png#pic_center"/></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c269c81edd09479b889045ceca8ab708.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/ba553b2f2ffa459da1e5ae67a9fc5fa8.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/838fb15363ba43f49ab3e1763ae8e319.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/e24f5e9c7f5743c290442e21e3b04414.png"/></img></img></img></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类和对象下篇之再谈构造函数，友元，内部类</title>
    <link href="/2022/05/26/categories/c++/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%B8%8B%E7%AF%87%E4%B9%8B%E5%86%8D%E8%B0%88%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8F%8B%E5%85%83%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2022/05/26/categories/c++/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%B8%8B%E7%AF%87%E4%B9%8B%E5%86%8D%E8%B0%88%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8F%8B%E5%85%83%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><h1><a id="_2"></a>类和对象下篇</h1><h2><a id="_4"></a>再谈构造函数</h2><h3><a id="_6"></a>构造函数体赋值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)<br>    &#123;<br>        _year = year;<br>        _month = month;<br>        _day = day;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> _year;<br>    <span class="hljs-type">int</span> _month;<br>    <span class="hljs-type">int</span> _day;<br>&#125;;<br><br></code></pre></td></tr></table></figure><blockquote><p>虽然上述构造函数调用之后，对象中已经有了一个初始值，**但是不能将其称作为类对象成员的初始化，构造 函数体中的语句只能将其称作为赋初值，而不能称作初始化。**因为初始化只能初始化一次，而构造函数体内 可以多次赋值。</p></blockquote><h3><a id="_27"></a>初始化列表</h3><blockquote><p>初始化列表：以一个冒号开始，接着是一个以逗号分隔的数据成员列表，每个"成员变量"后面跟一个放在括 号中的初始值或表达式。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> month=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> day=<span class="hljs-number">1</span>)<br>        :_year(year)<br>        ,_month(month)<br>        ,_day(day)<br>    &#123;<br>        <br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> _year;<br>    <span class="hljs-type">int</span> _month;<br>    <span class="hljs-type">int</span> _day;<br>    <br>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>【注意】</strong></p><p>1.每个成员变量在初始化列表<strong>只能出现一次</strong>（初始化只能初始化一次）</p><p>2.类包含一下成员必须在初始化列表初始化：</p><p>​ 1.引用成员变量</p><p>​ 2.自定义类型成员（该类没有默认构造函数）</p><p>​ 3. const 成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> a)<br> :_a(a)<br> &#123;&#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _a;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">B</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> ref)<br>:_aobj(a)<br> ,_ref(ref)<br>,_n(<span class="hljs-number">10</span>)<br> &#123;&#125;<br><span class="hljs-keyword">private</span>:<br> A _aobj; <span class="hljs-comment">// 没有默认构造函数</span><br> <span class="hljs-type">int</span>&amp; _ref; <span class="hljs-comment">// 引用</span><br> <span class="hljs-type">const</span> <span class="hljs-type">int</span> _n; <span class="hljs-comment">// const </span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>ps：不用传参的构造函数就是默认构造函数</p></blockquote><p>3.尽量使用初始化列表进行初始化，因为不管你是否使用初始化列表，对于自定义类型成员变量，一定会先使 用初始化列表初始化。</p><p>4.成员变量在类中声明次序就是其在初始化列表中的初始化顺序，与其在初始化列表中的先后次序无关</p><h3><a id="explicit_96"></a>explicit关键字</h3><blockquote><p>构造函数不仅可以构造与初始化对象，对于单个参数的构造函数，还具有类型转换的作用。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year)<br> :_year(year)<br> &#123;&#125;<br> <br> <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span><br><span class="hljs-function"> :_year(year)</span><br><span class="hljs-function"> &#123;</span>&#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _year;<br> <span class="hljs-type">int</span> _month:<br> <span class="hljs-type">int</span> _day;<br>&#125;；<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestDate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-function">Date <span class="hljs-title">d1</span><span class="hljs-params">(<span class="hljs-number">2018</span>)</span></span>;<br> <br> <span class="hljs-comment">// 用一个整形变量给日期类型对象赋值</span><br> <span class="hljs-comment">// 实际编译器背后会用2019构造一个无名对象，最后用无名对象给d1对象进行赋值</span><br> d1 = <span class="hljs-number">2019</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>上述代码可读性不是很好，用explicit修饰构造函数，将会禁止单参构造函数的隐式转换。</p></blockquote><h3><a id="static_131"></a>static成员</h3><blockquote><p>声明为static的类成员称为类的静态成员，用static修饰的成员变量，称之为静态成员变量；用static修饰的 成员函数，称之为静态成员函数。静态的成员变量一定要在类外进行初始化</p><p>面试题：实现一个类，计算中程序中创建出了多少个类对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">A</span>() &#123;++_scount;&#125;<br> <span class="hljs-built_in">A</span>(<span class="hljs-type">const</span> A&amp;amp; t) &#123;++_scount;&#125;<br> <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">GetACount</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> _scount;&#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">static</span> <span class="hljs-type">int</span> _scount;<br> &#125;;<br><span class="hljs-type">int</span> A::s_count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestA</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&amp;lt;&amp;lt;A::<span class="hljs-built_in">GetACount</span>()&amp;lt;&amp;lt;endl;<br>    A a1, a2;<br> <span class="hljs-function">A <span class="hljs-title">a3</span><span class="hljs-params">(a1)</span></span>;<br> cout&amp;lt;&amp;lt;A::<span class="hljs-built_in">GetACount</span>()&amp;lt;&amp;lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li> <p>静态成员为所有类对象所共享，不属于某个具体的实例</p> </li><li> <p>静态成员变量必须在类外定义，定义时不添加static关键字</p> </li><li> <p>类静态成员即可用类名::静态成员或者对象.静态成员来访问</p> </li><li> <p>静态成员函数没有隐藏的this指针，不能访问任何非静态成员</p> </li><li> <p>静态成员和类的普通成员一样，也有public、protected、private3种访问级别，也可以具有返回值</p> </li></ol></blockquote><h2><a id="C11__164"></a>C++11 的成员初始化新玩法。</h2><p>C++11支持非静态成员变量在声明时进行初始化赋值，但是要注意这里不是初始化，这里是给声明的成员变 量缺省值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">B</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>)<br> :_b(b)<br> &#123;&#125;<br> <span class="hljs-type">int</span> _b;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> </span>&#123;<br> cout &lt;&lt; a &lt;&lt; endl;<br> cout &lt;&lt; b._b&lt;&lt; endl;<br> cout &lt;&lt; p &lt;&lt; endl;<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-comment">// 非静态成员变量，可以在成员声明时给缺省值。</span><br> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br> B b = <span class="hljs-number">20</span>;<br> <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4</span>);<br> <span class="hljs-type">static</span> <span class="hljs-type">int</span> n;<br>&#125;;<br><span class="hljs-type">int</span> A::n = <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> A a;<br> a.<span class="hljs-built_in">Print</span>();<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_204"></a>友元</h2><blockquote><p>友元分为：友元函数和友元类 友元提供了一种突破封装的方式，有时提供了便利。但是友元会增加耦合度，破坏了封装，所以友元不宜多 用。</p></blockquote><h3><a id="_208"></a>友元函数</h3><blockquote><p>问题：现在我们尝试去重载operator&lt;&lt;，然后发现我们没办法将operator&lt;&lt;重载成成员函数。因为cout的 输出流对象和隐含的this指针在抢占第一个参数的位置。this指针默认是第一个参数也就是左操作数了。但是 实际使用中cout需要是第一个形参对象，才能正常使用。所以我们要将operator&lt;&lt;重载成全局函数。但是这 样的话，又会导致类外没办法访问成员，那么这里就需要友元来解决。operator&gt;&gt;同理。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)<br> : _year(year)<br> , _month(month)<br> , _day(day)<br> &#123;&#125;<br> <br> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; _cout)<br> &#123;<br> _cout&lt;&lt;d._year&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>&lt;&lt;d._month&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>&lt;&lt;d._day;<br> <span class="hljs-keyword">return</span> _cout;<br> &#125;<br> <br>prvate:<br> <span class="hljs-type">int</span> _year;<br> <span class="hljs-type">int</span> _month;<br> <span class="hljs-type">int</span> _day<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-number">2017</span>, <span class="hljs-number">12</span>, <span class="hljs-number">24</span>)</span></span>;<br> d&lt;&lt;cout;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>友元函数可以直接访问类的私有成员，它是定义在类外部的普通函数，不属于任何类，但需要在类的内部声 明，声明时需要加friend关键字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; _cout, <span class="hljs-type">const</span> Date&amp; d);<br><span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; _cin, Date&amp; d);<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)<br> : _year(year)<br> , _month(month)<br> , _day(day)<br> &#123;&#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _year;<br> <span class="hljs-type">int</span> _month;<br> <span class="hljs-type">int</span> _day；<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; _cout, <span class="hljs-type">const</span> Date&amp; d)<br>&#123;<br> _cout&lt;&lt;d._year&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>&lt;&lt;d._month&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>&lt;&lt;d._day;<br> <br> <span class="hljs-keyword">return</span> _cout;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; _cin, Date&amp; d)<br>&#123;<br> _cin&gt;&gt;d._year;<br> _cin&gt;&gt;d._month;<br> _cin&gt;&gt;d._day;<br> <br> <span class="hljs-keyword">return</span> _cin;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> Date d;<br> cin&gt;&gt;d;<br> cout&lt;&lt;d&lt;&lt;endl;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>说明: 友元函数可访问类的私有和保护成员，但不是类的成员函数</p><p>​ 友元函数不能用const修饰</p><p>​ 友元函数可以在类定义的任何地方声明，不受类访问限定符限制</p><p>​ 一个函数可以是多个类的友元函数</p><p>​ 友元函数的调用与普通函数的调用和原理相同</p><h3><a id="_294"></a>友元类</h3><p>友元类的所有成员函数都可以是另一个类的友元函数，都可以访问另一个类中的非公有成员。</p><p>友元关系是单向的，不具有交换性。</p><p>比如上述Time类和Date类，在Time类中声明Date类为其友元类，那么可以在Date类中直接访问Time 类的私有成员变量，但想在Time类中访问Date类中私有的成员变量则不行。</p><p>友元关系不能传递 如果B是A的友元，C是B的友元，则不能说明C时A的友元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span>; <span class="hljs-comment">// 前置声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span><br>&#123;<br> <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span>; <span class="hljs-comment">// 声明日期类为时间类的友元类，则在日期类中就直接访问Time类中的私有成</span><br>员变量<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second)<br> : _hour(hour)<br> , _minute(minute)<br> , _second(second)<br> &#123;&#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _hour;<br> <span class="hljs-type">int</span> _minute;<br> <span class="hljs-type">int</span> _second;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year = <span class="hljs-number">1900</span>, <span class="hljs-type">int</span> month = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>)<br> : _year(year)<br> , _month(month)<br> , _day(day)<br> &#123;&#125;<br> <br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetTimeOfDate</span><span class="hljs-params">(<span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second)</span></span><br><span class="hljs-function"> </span>&#123;<br> <span class="hljs-comment">// 直接访问时间类私有的成员变量</span><br> <span class="hljs-type">_t</span>._hour = hour;<br> <span class="hljs-type">_t</span>._minute = minute;<br> <span class="hljs-type">_t</span>.second = second;<br> &#125;<br> <br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _year;<br> <span class="hljs-type">int</span> _month;<br> <span class="hljs-type">int</span> _day;<br> Time <span class="hljs-type">_t</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2><a id="_351"></a>内部类</h2><h3><a id="_353"></a>概念及特性</h3><p>概念：如果一个类定义在另一个类的内部，这个内部类就叫做内部类。注意此时这个内部类是一个独立的 类，它不属于外部类，更不能通过外部类的对象去调用内部类。外部类对内部类没有任何优越的访问权限。 注意：内部类就是外部类的友元类。注意友元类的定义，内部类可以通过外部类的对象参数来访问外部类中 的所有成员。但是外部类不是内部类的友元。</p><p>特性</p><ol><li>内部类可以定义在外部类的public、protected、private都是可以的。</li><li>注意内部类可以直接访问外部类中的static、枚举成员，不需要外部类的对象/类名。</li><li>sizeof(外部类)=外部类，和内部类没有任何关系。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">static</span> <span class="hljs-type">int</span> k;<br> <span class="hljs-type">int</span> h;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br> &#123;<br> <span class="hljs-keyword">public</span>:<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">const</span> A&amp; a)</span></span><br><span class="hljs-function"> </span>&#123;<br> cout &lt;&lt; k &lt;&lt; endl;<span class="hljs-comment">//OK</span><br> cout &lt;&lt; a.h &lt;&lt; endl;<span class="hljs-comment">//OK</span><br> &#125;<br> &#125;;<br>&#125;;<br><span class="hljs-type">int</span> A::k = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> A::B b;<br> b.<span class="hljs-built_in">foo</span>(<span class="hljs-built_in">A</span>());<br> <br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/81fdea5148ca41823d3366b82d4348fb.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/d3a68bda4dc0fe738484c68a4bec1946.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/ce78920ebcca6366ece00398fed71f99.png#pic_center"/></img></img></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类和对象中，通过日期类来深入理解构造函数，析构函数，重载，拷贝构造，赋值重载，取地址重载，操作符重载</title>
    <link href="/2022/05/24/categories/c++/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%B8%AD%EF%BC%8C%E9%80%9A%E8%BF%87%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%9D%A5%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%EF%BC%8C%E9%87%8D%E8%BD%BD%EF%BC%8C%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%EF%BC%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%EF%BC%8C%E5%8F%96%E5%9C%B0%E5%9D%80%E9%87%8D%E8%BD%BD%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/2022/05/24/categories/c++/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%B8%AD%EF%BC%8C%E9%80%9A%E8%BF%87%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%9D%A5%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%EF%BC%8C%E9%87%8D%E8%BD%BD%EF%BC%8C%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%EF%BC%8C%E8%B5%8B%E5%80%BC%E9%87%8D%E8%BD%BD%EF%BC%8C%E5%8F%96%E5%9C%B0%E5%9D%80%E9%87%8D%E8%BD%BD%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<hr/><hr/><p></p><p></p><h1><a id="_5"></a>类的六个默认成员函数</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/1735dc60d5048100141af6a9a859e5b3.png#pic_center"/></p><p>如果一个类中什么成员都没有，简称为空类。空类中什么都没有吗？并不是的，任何一个类在我们不写的情 况下，都会自动生成下面6个默认成员函数。</p><p><code>class Date&#123;&#125;;</code></p><p><img alt="image-20220523230651717" src="https://img-blog.csdnimg.cn/img_convert/add3d9b430980f86b7b0ab9e6f43a253.png"/></p><h2><a id="_21"></a>构造函数</h2><p>构造函数的特性:</p><p>​ 构造函数是特殊的成员函数，需要注意的是，构造函数的虽然名称叫构造，但是需要注意的是构造函数的主 要任务并不是开空间创建对象，而是初始化对象。</p><p>其特征如下：</p><ol><li>函数名与类名相同。</li><li>无返回值。</li><li>对象实例化时编译器自动调用对应的构造函数。</li><li>构造函数可以重载。</li><li>如果类中没有显式定义构造函数，则C++编译器会自动生成一个无参的默认构造函数，一旦用户显式定 义编译器将不再生成。</li><li>无参的构造函数和全缺省的构造函数都称为默认构造函数，并且默认构造函数只能有一个。注意：无参 构造函数、全缺省构造函数、我们没写编译器默认生成的构造函数，都可以认为是默认成员函数</li><li>关于编译器生成的默认成员函数，很多童鞋会有疑惑：在我们不实现构造函数的情况下，编译器会生成 默认的构造函数。但是看起来默认构造函数又没什么用？d对象调用了编译器生成的默认构造函数，但 是d对象year/month/_day，依旧是随机值。也就说在这里编译器生成的默认构造函数并没有什么卵 用？？ 解答：C++把类型分成内置类型(基本类型)和自定义类型。内置类型就是语法已经定义好的类型：如 int/char…，自定义类型就是我们使用class/struct/union自己定义的类型，看看下面的程序，就会发现 编译器生成默认的构造函数会对自定类型成员_t调用的它的默认成员函数</li><li>成员变量的命名风格</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 我们看看这个函数，是不是很僵硬？</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year)<br> &#123;<br> <span class="hljs-comment">// 这里的year到底是成员变量，还是函数形参？</span><br> year = year;<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> year;<br>&#125;;<br><span class="hljs-comment">// 所以我们一般都建议这样</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year)<br> &#123;<br> _year = year;<br>&#125;<br> <span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _year;<br>&#125;;<br><span class="hljs-comment">// 或者这样。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year)<br> &#123;<br> m_year = year;<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> m_year;<br>&#125;;<br><span class="hljs-comment">// 其他方式也可以的，主要看公司要求。一般都是加个前缀或者后缀标识区分就行。</span><br><br><br></code></pre></td></tr></table></figure><blockquote><p>其实总结一下就是容易区分变量名，不容易搞混。</p></blockquote><p>日期类中的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Date.h</span><br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> month = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 全缺省的构造函数定义 Date.cpp</span><br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year , <span class="hljs-type">int</span> month ,<span class="hljs-type">int</span> day )<br>&#123;<br><span class="hljs-keyword">if</span> (year &gt;= <span class="hljs-number">1</span> &amp;&amp;<br>month &lt;= <span class="hljs-number">12</span> &amp;&amp; month &gt;= <span class="hljs-number">1</span> &amp;&amp;<br>day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-built_in">GetMonthDay</span>(year, month))<br>&#123;<br>_year = year;<br>_month = month;<br>_day = day;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;日期非法&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意 当函数的声明和定义分离时，缺省值在声明给，定义不用给！！！</strong></p><h2><a id="_117"></a>析构函数</h2><p>概念</p><p>前面通过构造函数的学习，我们知道一个对象时怎么来的，那一个对象又是怎么没呢的？ 析构函数：与构造函数功能相反，析构函数不是完成对象的销毁，局部对象销毁工作是由编译器完成的。而 对象在销毁时会自动调用析构函数，完成类的一些资源清理工作。</p><p>特性</p><p>析构函数是特殊的成员函数。 其特征如下:</p><p>​ 1.析构函数名是在类名前加上字符 ~。</p><p>​ 2.无参数无返回值。</p><p>​ 3.一个类有且只有一个析构函数。若未显式定义，系统会自动生成默认的析构函数。</p><p>​ 4.对象生命周期结束时，C++编译系统系统自动调用析构函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DataType;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqList</span><br>&#123; <br><span class="hljs-keyword">public</span> :<br> <span class="hljs-built_in">SeqList</span> (<span class="hljs-type">int</span> capacity = <span class="hljs-number">10</span>)<br> &#123;<br> _pData = (DataType*)<span class="hljs-built_in">malloc</span>(capacity * <span class="hljs-built_in">sizeof</span>(DataType));<br> <span class="hljs-built_in">assert</span>(_pData);<br> <br> _size = <span class="hljs-number">0</span>;<br> _capacity = capacity;<br> &#125;<br> <br> ~<span class="hljs-built_in">SeqList</span>()<br> &#123;<br> <span class="hljs-keyword">if</span> (_pData)<br> &#123;<br> <span class="hljs-built_in">free</span>(_pData ); <span class="hljs-comment">// 释放堆上的空间</span><br> _pData = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 将指针置为空</span><br> _capacity = <span class="hljs-number">0</span>;<br> _size = <span class="hljs-number">0</span>;<br>&#125;<br> &#125;<br> <br><span class="hljs-keyword">private</span> :<br> <span class="hljs-type">int</span>* _pData ;<br>    <span class="hljs-type">size_t</span> _size;<br> <span class="hljs-type">size_t</span> _capacity;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>​ 5.关于编译器自动生成的析构函数，是否会完成一些事情呢？下面的程序我们会看到，编译器生成的默认 析构函数， 对会自定类型成员调用它的析构函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;jack&quot;</span>)<br> &#123;<br> _str = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(str) + <span class="hljs-number">1</span>);<br> <span class="hljs-built_in">strcpy</span>(_str, str);<br> &#125;<br> ~<span class="hljs-built_in">String</span>()<br> &#123;<br> cout &lt;&lt; <span class="hljs-string">&quot;~String()&quot;</span> &lt;&lt; endl;<br> <span class="hljs-built_in">free</span>(_str);<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">char</span>* _str;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>String _name;<br> <span class="hljs-type">int</span> _age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> Person p;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_199"></a>拷贝构造函数</h2><p>拷贝构造函数也是特殊的成员函数，其特征如下：</p><ol><li>拷贝构造函数是构造函数的一个重载形式。</li><li>拷贝构造函数的参数只有一个且必须使用引用传参，使用传值方式会引发无穷递归调用。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 拷贝构造函数Date.h</span><br>  <span class="hljs-comment">// d2(d1)</span><br><span class="hljs-built_in">Date</span>(<span class="hljs-type">const</span> Date&amp; d);<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-comment">//Date.cpp</span><br>&#123;<br>_year = d._year;<br>_month = d._month;<br>_day = d._day;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">3.若未显示定义，系统生成默认的拷贝构造函数。 默认的拷贝构造函数对象按内存存储按字节序完成拷 贝，这种拷贝我们叫做浅拷贝，或者值拷贝。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year = <span class="hljs-number">1900</span>, <span class="hljs-type">int</span> month = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>)<br> &#123;<br> _year = year;<br> _month = month;<br> _day = day;<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">int</span> _year;<br> <span class="hljs-type">int</span> _month;<br> <span class="hljs-type">int</span> _day;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> Date d1;<br>    <span class="hljs-comment">// 这里d2调用的默认拷贝构造完成拷贝，d2和d1的值也是一样的。</span><br><span class="hljs-function">Date <span class="hljs-title">d2</span><span class="hljs-params">(d1)</span></span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>​ 4.那么编译器生成的默认拷贝构造函数已经可以完成字节序的值拷贝了，我们还需要自己实现吗？当然像 日期类这样 的类是没必要的。那么下面的类呢？验证一下试试？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里会发现下面的程序会崩溃掉,这里就需要深拷贝去解决。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-built_in">String</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;jack&quot;</span>)<br> &#123;<br> _str = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(str) + <span class="hljs-number">1</span>);<br> <span class="hljs-built_in">strcpy</span>(_str, str);<br> &#125;<br> ~<span class="hljs-built_in">String</span>()<br> &#123;<br> cout &lt;&lt; <span class="hljs-string">&quot;~String()&quot;</span> &lt;&lt; endl;<br> <span class="hljs-built_in">free</span>(_str);<br> &#125;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">char</span>* _str;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-function">String <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br> <span class="hljs-function">String <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_279"></a>操作符重载</h2><blockquote><p>C++为了增强代码的可读性引入了运算符重载，运算符重载是具有特殊函数名的函数，也具有其返回值类 型，函数名字以及参数列表，其返回值类型与参数列表与普通的函数类似。</p></blockquote><blockquote><p>函数名字为：关键字operator后面接需要重载的运算符符号。</p><p>函数原型：返回值类型 operator操作符(参数列表)</p><p>注意： 不能通过连接其他符号来创建新的操作符：比如operator@</p><pre><code class="hljs">  重载操作符必须有一个类类型或者枚举类型的操作数</code></pre><p>​ 用于内置类型的操作符，其含义不能改变，例如：内置的整型+，不 能改变其含义</p><p>​ 作为类成员的重载函数时，其形参看起来比操作数数目少1成员函数的 操作符有一个默认的形参this，限定 为第一个形参 .</p><p>​ .*、:: 、sizeof 、?: 、. 注意以上5个运算符不能重载。这个经常在笔试选择题中出现。</p></blockquote><h3><a id="_299"></a>+=重载</h3><blockquote><p>改变自己的值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">int</span> day);<span class="hljs-comment">//声明</span><br><br>Date&amp; Date::  <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">int</span> day)<span class="hljs-comment">//定义</span><br>&#123;<br><span class="hljs-keyword">if</span> (day &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//小于零相当于减正数 &gt;0好算</span><br>&#123;<br><span class="hljs-built_in">return</span> (*<span class="hljs-keyword">this</span>) -= (-day);<br>&#125;<br><br>_day += day;<span class="hljs-comment">//先加一下</span><br><br><span class="hljs-keyword">while</span> (_day&gt;<span class="hljs-built_in">GetMonthDay</span>(_year,_month))<br>&#123;<br>_day -= <span class="hljs-built_in">GetMonthDay</span>(_year, _month);;<span class="hljs-comment">//看这个月的天数能不能抵消</span><br>++_month;<br><span class="hljs-keyword">if</span> (_month ==<span class="hljs-number">13</span>)<br>&#123;<br>_year++;<br>_month = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_331"></a>+操作符重载</h3><blockquote><p>不改变自己的值</p><p>写+= 然后+复用+= 因为+=是引用返回，效率能高一点</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date <span class="hljs-keyword">operator</span>+(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span>;<span class="hljs-comment">//声明</span><br><br>Date Date:: <span class="hljs-keyword">operator</span>+(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span><span class="hljs-comment">//定义</span><br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<span class="hljs-comment">//因为不改变自身的值所以复制一份，然后返回复制的拿份的值(因为函数结束变量会销毁)</span><br>d += day;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_348"></a>-=重载</h3><blockquote><p>改变自己的值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date&amp; <span class="hljs-keyword">operator</span>-=(<span class="hljs-type">int</span> day);<span class="hljs-comment">//声明</span><br><br>Date&amp; Date:: <span class="hljs-keyword">operator</span>-=(<span class="hljs-type">int</span> day)<span class="hljs-comment">//定义</span><br>&#123;<br><span class="hljs-keyword">if</span> (day &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">return</span> (*<span class="hljs-keyword">this</span>) +=(-day);<br>&#125;<br>_day -= day;<span class="hljs-comment">//先减一下</span><br><span class="hljs-keyword">while</span> (_day&lt;<span class="hljs-built_in">GetMonthDay</span>(_year,_month))<br>&#123;<br>--_month;<br><span class="hljs-keyword">if</span> (_month == <span class="hljs-number">0</span>)<br>&#123;<br>_year--;<br>_month = <span class="hljs-number">12</span>;<br>&#125;<br>_day += <span class="hljs-built_in">GetMonthDay</span>(_year, _month);<br>&#125;<br><span class="hljs-keyword">return</span>*<span class="hljs-keyword">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_378"></a>-操作符重载</h3><blockquote><p>不改变自己的值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date <span class="hljs-keyword">operator</span>-(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span>;<span class="hljs-comment">//声明</span><br><br>Date Date::  <span class="hljs-keyword">operator</span>-(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>d -= day;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_395"></a>前置++重载</h3><blockquote><p>先加再用</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date&amp; Date:: <span class="hljs-keyword">operator</span>++()<br>&#123;<br>*<span class="hljs-keyword">this</span> += <span class="hljs-number">1</span>;<span class="hljs-comment">//调用一个+=函数</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_409"></a>后置++重载</h3><blockquote><p>先用再加</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 后置++ 先用再+  传一个int变量用来区分前置后置 有 int 就是后置</span><br>Date  Date:: <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<span class="hljs-comment">//先把自己的值拷贝给tmp，然后返回tmp，用tmp，。</span><br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">tmp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>*<span class="hljs-keyword">this</span> += <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="___427"></a>前置 - -重载</h3><blockquote><p>先减再用</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date&amp; Date:: <span class="hljs-keyword">operator</span>--()<br>&#123;<br>*<span class="hljs-keyword">this</span> -= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="___441"></a>后置- - 重载</h3><blockquote><p>先用再减</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date Date:: <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>)<br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">tmp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>*<span class="hljs-keyword">this</span> -= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>比较运算符重载只需要写一个等于和一个小于（大于和等于也可以），其余的复用就行了，看我代码就可以理解</p></blockquote><h3><a id="_460"></a>&gt;重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt;= d);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_471"></a>&lt;重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> Date:: <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">if</span> ((_year &lt; d._year) ||<br>(_year == d._year &amp;&amp; _month &lt; d._month) ||<br>(_year == d._year &amp;&amp; _month == d._month &amp;&amp; _day &lt; d._day))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_489"></a>&gt;=重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; d);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_500"></a>&lt;=重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-built_in">return</span> ((*<span class="hljs-keyword">this</span> &lt; d) || (*<span class="hljs-keyword">this</span> == d));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_511"></a>==重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> Date:: <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Date&amp; d) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-built_in">return</span> ((_year == d._year) &amp;&amp;<br>(_month == d._month) &amp;&amp;<br>(_day == d._day));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="_524"></a>！=重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == d);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="___535"></a>赋值运算符 = 重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date&amp; Date::<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Date&amp; d)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;d)<span class="hljs-comment">//防止自己给自己赋值</span><br>&#123;<br>_year = d._year;<br>_month = d._month;<br>_day = d._day;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="const_556"></a>const成员函数</h2><blockquote><p>在不改变类成员变量的情况下我们一般给类的成员函数加const</p><p>可由于this指针是隐藏的，所以我们在函数名后面加const</p><p>就像这样：void Print()const；</p><p>日期类我给能加const的函数都加了</p></blockquote><h2><a id="const_566"></a>取地址及const取地址操作符重载</h2><p>这两个默认成员函数一般不用重新定义 ，编译器默认会生成。</p><p>这两个运算符一般不需要重载，使用编译器生成的默认取地址的重载即可，只有特殊情况，才需要重载，比 如不想让别人获取到指定的内容！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Date* Date:: <span class="hljs-keyword">operator</span> &amp;()<span class="hljs-comment">//一般像这种短的函数写在类里当内联函数处理</span><br>&#123;<br>    <span class="hljs-comment">//return this;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-type">const</span> Date* Date:: <span class="hljs-keyword">operator</span> &amp;()<span class="hljs-type">const</span><span class="hljs-comment">//如果是const变量就调用这个函数</span><br>&#123;<br>    <span class="hljs-comment">//return this;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_588"></a>日期类的实现</h1><h2><a id="Dateh_594"></a>Date.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取某年某月的天数√</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetMonthDay</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month)</span></span>;<br><span class="hljs-comment">// 全缺省的构造函数√</span><br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> month = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<span class="hljs-comment">//打印√</span><br><span class="hljs-comment">// 拷贝构造函数√</span><br>  <span class="hljs-comment">// d2(d1)</span><br><span class="hljs-built_in">Date</span>(<span class="hljs-type">const</span> Date&amp; d);<br><span class="hljs-comment">// 赋值运算符重载</span><br>  <span class="hljs-comment">// d2 = d3 -&gt; d2.operator=(&amp;d2, d3)√</span><br>Date&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Date&amp; d);<br><span class="hljs-comment">// 日期+=天数</span><br>Date&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">int</span> day);<br><span class="hljs-comment">// 日期+天数</span><br>Date <span class="hljs-keyword">operator</span>+(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span>;<br><br><span class="hljs-comment">// 日期-天数</span><br>Date <span class="hljs-keyword">operator</span>-(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span>;<br><span class="hljs-comment">// 日期-=天数</span><br>Date&amp; <span class="hljs-keyword">operator</span>-=(<span class="hljs-type">int</span> day);<br><span class="hljs-comment">// 前置++</span><br>Date&amp; <span class="hljs-keyword">operator</span>++();<br><span class="hljs-comment">// 后置++</span><br>Date <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>);<br><span class="hljs-comment">// 后置--</span><br>Date <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>);<br><span class="hljs-comment">// 前置--</span><br>Date&amp; <span class="hljs-keyword">operator</span>--();<br> <span class="hljs-comment">//&gt;运算符重载</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt;= d);<br>&#125;<br><br><span class="hljs-comment">// ==运算符重载√</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Date&amp; d) <span class="hljs-type">const</span>;<br><br><span class="hljs-comment">// &gt;=运算符重载√</span><br><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &gt;= (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; d);<br>&#125;<br><br><span class="hljs-comment">// &lt;运算符重载√</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span>;<br><br><span class="hljs-comment">// &lt;=运算符重载√</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-built_in">return</span> ((*<span class="hljs-keyword">this</span> &lt; d) || (*<span class="hljs-keyword">this</span> == d));<br>&#125;<br><br><span class="hljs-comment">// !=运算符重载√</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> != (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> == d);<br>&#125;<br><span class="hljs-comment">// 日期-日期 返回天数</span><br><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> _year;<br><span class="hljs-type">int</span> _month;<br><span class="hljs-type">int</span> _day;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h2><a id="Datecpp_671"></a>Date.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;date.h&quot;</span></span><br><br><span class="hljs-comment">// 获取某年某月的天数</span><br><span class="hljs-type">int</span> Date:: <span class="hljs-built_in">GetMonthDay</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month)<br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> Mday[<span class="hljs-number">13</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span> &#125;;<span class="hljs-comment">//定义成静态的避免多次开辟空间</span><br><span class="hljs-keyword">if</span> (((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)) &amp;&amp; (month == <span class="hljs-number">2</span>))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">29</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> Mday[month];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 全缺省的构造函数</span><br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year , <span class="hljs-type">int</span> month ,<span class="hljs-type">int</span> day )<br>&#123;<br><span class="hljs-keyword">if</span> (year &gt;= <span class="hljs-number">1</span> &amp;&amp;<br>month &lt;= <span class="hljs-number">12</span> &amp;&amp; month &gt;= <span class="hljs-number">1</span> &amp;&amp;<br>day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-built_in">GetMonthDay</span>(year, month))<br>&#123;<br>_year = year;<br>_month = month;<br>_day = day;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;日期非法&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Date::Print</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; _year &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; _month &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; _day &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 拷贝构造函数</span><br><span class="hljs-comment">// d2(d1)</span><br> Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">const</span> Date&amp; d)<br>&#123;<br>_year = d._year;<br>_month = d._month;<br>_day = d._day;<br>&#125;<br><br><span class="hljs-comment">// 赋值运算符重载</span><br><span class="hljs-comment">// d2 = d3 -&gt; d2.operator=(&amp;d2, d3)</span><br>Date&amp; Date::<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Date&amp; d)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;d)<br>&#123;<br>_year = d._year;<br>_month = d._month;<br>_day = d._day;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 日期+=天数 写+= 然后+调用+= 因为+=是引用返回</span><br>Date&amp; Date::  <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">int</span> day)<br>&#123;<br><span class="hljs-keyword">if</span> (day &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//小于零相当于减正数 &gt;0好算</span><br>&#123;<br><span class="hljs-built_in">return</span> (*<span class="hljs-keyword">this</span>) -= (-day);<br>&#125;<br><br>_day += day;<span class="hljs-comment">//先加一下</span><br><br><span class="hljs-keyword">while</span> (_day&gt;<span class="hljs-built_in">GetMonthDay</span>(_year,_month))<br>&#123;<br>_day -= <span class="hljs-built_in">GetMonthDay</span>(_year, _month);;<span class="hljs-comment">//看这个月的天数能不能抵消</span><br>++_month;<br><span class="hljs-keyword">if</span> (_month ==<span class="hljs-number">13</span>)<br>&#123;<br>_year++;<br>_month = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 日期+天数</span><br>Date Date:: <span class="hljs-keyword">operator</span>+(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>d += day;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-comment">// 日期-天数 这其实是就是把不合理的数据变成合理的数据</span><br>Date Date::  <span class="hljs-keyword">operator</span>-(<span class="hljs-type">int</span> day)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>d -= day;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-comment">// 日期-=天数</span><br>Date&amp; Date:: <span class="hljs-keyword">operator</span>-=(<span class="hljs-type">int</span> day)<br>&#123;<br><span class="hljs-keyword">if</span> (day &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">return</span> (*<span class="hljs-keyword">this</span>) +=(-day);<br>&#125;<br>_day -= day;<span class="hljs-comment">//先减一下</span><br><span class="hljs-keyword">while</span> (_day&lt;<span class="hljs-built_in">GetMonthDay</span>(_year,_month))<br>&#123;<br>--_month;<br><span class="hljs-keyword">if</span> (_month == <span class="hljs-number">0</span>)<br>&#123;<br>_year--;<br>_month = <span class="hljs-number">12</span>;<br>&#125;<br>_day += <span class="hljs-built_in">GetMonthDay</span>(_year, _month);<br>&#125;<br><span class="hljs-keyword">return</span>*<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 前置++</span><br>Date&amp; Date:: <span class="hljs-keyword">operator</span>++()<br>&#123;<br>*<span class="hljs-keyword">this</span> += <span class="hljs-number">1</span>;<span class="hljs-comment">//调用一个函数</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 后置++ 先用再+</span><br>Date  Date:: <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">tmp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>*<span class="hljs-keyword">this</span> += <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-comment">// 后置--</span><br>Date Date:: <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>)<br>&#123;<br><span class="hljs-function">Date <span class="hljs-title">tmp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br>*<span class="hljs-keyword">this</span> -= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-comment">// 前置--</span><br>Date&amp; Date:: <span class="hljs-keyword">operator</span>--()<br>&#123;<br>*<span class="hljs-keyword">this</span> -= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// ==运算符重载</span><br><span class="hljs-type">bool</span> Date:: <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Date&amp; d) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-built_in">return</span> ((_year == d._year) &amp;&amp;<br>(_month == d._month) &amp;&amp;<br>(_day == d._day));<br>&#125;<br><br><span class="hljs-comment">// &lt;运算符重载</span><br><span class="hljs-type">bool</span> Date:: <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">if</span> ((_year &lt; d._year) ||<br>(_year == d._year &amp;&amp; _month &lt; d._month) ||<br>(_year == d._year &amp;&amp; _month == d._month &amp;&amp; _day &lt; d._day))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 日期-日期 返回天数</span><br><span class="hljs-type">int</span> Date:: <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Date&amp; d)<span class="hljs-type">const</span><br>&#123;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//默认*this大</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>Date max = *<span class="hljs-keyword">this</span>;<br>Date min = d;<br><span class="hljs-keyword">if</span> ((*<span class="hljs-keyword">this</span>)&lt; d)<br>&#123;<br>flag = <span class="hljs-number">-1</span>;<span class="hljs-comment">//*this小的话 剪完之后就是负数所以flag=-1</span><br>min = *<span class="hljs-keyword">this</span>;<br>max = d;<br>&#125;<br><span class="hljs-keyword">while</span> (min!=max)<span class="hljs-comment">//min+几次 count就+几次</span><br>&#123;<br>min++;<br>count++;<br>&#125;<br><span class="hljs-keyword">return</span> count * flag;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/96a6d71cc9338fdf8f1228a9c0f2ee25.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/620c235af9596ac1f112f5a618151ec9.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/d48b7e0f81a7cf8192f262762eca7677.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/19e97366f97697eaa33e0bab31d87e19.png#pic_center"/></img></img></img></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 下标异常</title>
    <link href="/2022/05/23/categories/python/Python%20%E4%B8%8B%E6%A0%87%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/05/23/categories/python/Python%20%E4%B8%8B%E6%A0%87%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>输入一个非空字符串和一个索引值，输出字符串中，该索引值对应的字符。若发现异常，则输出“输入下标有误”</p><p>输入格式:<br/> 输入一个非空的字符串，再输入一个索引值（Python中可以是正向索引，也可以是反向索引）。</p><p>输出格式:<br/> 输出字符串中，该索引值对应的字符。若发现异常（如输入的索引值太大或太小，超出字符串的索引值范围；如输入的索引值为非整数等），则输出“输入下标有误”</p><p>输入样例:<br/> 在这里给出一组输入。例如：</p><p>Hello World<br/> -4<br/> 输出样例:<br/> 在这里给出相应的输出。例如：</p><p>o<br/> 输入样例:<br/> 在这里给出一组输入。例如：</p><p>abcd<br/> 4<br/> 输出样例:<br/> 在这里给出相应的输出。例如：</p><p>输入下标有误<br/> 输入样例:<br/> 在这里给出一组输入。例如：</p><p>Good<br/> ?<br/> 输出样例:<br/> 在这里给出相应的输出。例如：</p><p>输入下标有误<br/> 代码长度限制<br/> 16 KB<br/> 时间限制<br/> 400 ms<br/> 内存限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lonst=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">try</span>:<br>    num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-built_in">print</span>(lonst[num])<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入下标有误&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/bf6d7a2cf6cc539a11a05a4c4297a2fd.gif#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 求某月的天数</title>
    <link href="/2022/05/23/categories/python/python%20%E6%B1%82%E6%9F%90%E6%9C%88%E7%9A%84%E5%A4%A9%E6%95%B0/"/>
    <url>/2022/05/23/categories/python/python%20%E6%B1%82%E6%9F%90%E6%9C%88%E7%9A%84%E5%A4%A9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>7-1 求某月的天数<br/> 分数 10<br/> 作者 usx程序设计类课程组<br/> 单位 绍兴文理学院<br/> 输入年份year、月份month，判断该月的天数。闰年：能被4整除但不能被100整除或者能被400整除的年份是闰年。</p><p>输入格式:<br/> 测试数据有多组，处理到文件尾。对于每组测试，输入两个整数，表示年份year和月份month。</p><p>输出格式:<br/> 对于每组测试，输出对应年月的天数。</p><p>输入样例:<br/> 2020 2<br/> 2020 4<br/> 输出样例:<br/> 29<br/> 30.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        y,m=<span class="hljs-built_in">input</span>().split()<br>        y=<span class="hljs-built_in">int</span>(y)<br>        m=<span class="hljs-built_in">int</span>(m)<br>        <span class="hljs-built_in">list</span>=[<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>]<br>        <span class="hljs-keyword">if</span> y%<span class="hljs-number">400</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y%<span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>]=<span class="hljs-number">29</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[m-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/4bdf601d8fa7087401f4668b6bd06c2d.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++之this指针</title>
    <link href="/2022/05/16/categories/c++/C++%E4%B9%8Bthis%E6%8C%87%E9%92%88/"/>
    <url>/2022/05/16/categories/c++/C++%E4%B9%8Bthis%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><h1><a id="this__3"></a>this 指针</h1><h2><a id="this_5"></a>this指针的引出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> year = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> month = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>)<br>&#123;<br>_year = year;<br>_month = month;<br>_day = day;<br>&#125;<br><br><span class="hljs-built_in">Time</span>(<span class="hljs-type">const</span> Time&amp; d)<br>&#123;<br>_year = d._year;<br>_month = d._month;<br>_day = d._day;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> _year;<br><span class="hljs-type">int</span> _month;<br><span class="hljs-type">int</span> _day;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::init</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span></span><br><span class="hljs-function"></span>&#123;<br>_year = year;<br>_month = month;<br>_day = day;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; _year &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; _month &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; _day &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>Time d1;<br>Time d2;<br>    <br>d1.<span class="hljs-built_in">init</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>);<br>d2.<span class="hljs-built_in">init</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>);<br><br>    d1.<span class="hljs-built_in">print</span>();<br>d2.<span class="hljs-built_in">print</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><blockquote><p>对于上述类，有这样的一个问题：</p><p>Yime类中有init与print两个成员函数，函数体中没有关于不同对象的区分，那当s1调用SetDate函数 时，该函数是如何知道应该设置d1对象，而不是设置d2对象呢？</p></blockquote></blockquote><p>C++中通过引入this指针解决该问题，即：C++编译器给每个“非静态的成员函数“增加了一个隐藏的指针参 数，让该指针指向当前对象(函数运行时调用该函数的对象)，在函数体中所有成员变量的操作，都是通过该 指针去访问。只不过所有的操作对用户是透明的，即用户不需要来传递，编译器自动完成。</p><h2><a id="this_67"></a>this指针的特性</h2><ol><li> <p>this指针的类型：类类型* const</p> </li><li> <p>只能在“成员函数”的内部使用</p> </li><li> <p>this指针本质上其实是一个成员函数的形参，是对象调用成员函数时，将对象地址作为实参传递给this 形参。所以对象中不存储this指针。</p> </li><li> <p>this指针是成员函数第一个隐含的指针形参，一般情况由编译器通过ecx寄存器自动传递，不需要用户 传递</p> </li></ol><p><img alt="image-20220516152526931" src="https://img-blog.csdnimg.cn/img_convert/b2245bb3f7943ff9b35894e021c620ac.png"/></p><p>如上图，如果我们自己把this指针写出来编译器会报错的，但this指针就是这个原理</p><h6><a id="1_this_83"></a>1. this指针存在哪里？</h6><p>编译器在生成程序时加入了获取对象首地址的相关代码。并把获取的首地址存放在了寄存器ECX中(VC++编译器是放在ECX中，其它编译器有可能不同)。<br/> 而成员函数的其它参数正常都是存放在栈中。</p><h6><a id="2_this_88"></a>2. this指针可以为空吗？</h6><p>this可以为空，看以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintA</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; _a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Show()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> _a;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>A* p = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">//p-&gt;PrintA();</span><br><br>p-&gt;<span class="hljs-built_in">Show</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="image-20220516153532149" src="https://img-blog.csdnimg.cn/img_convert/34e17a34db8cf722d3ec57c4fc50b370.png"/></p><p>这个代码如果执行 <code>p-&gt;printA()</code>会崩掉</p><p><img alt="image-20220516153601191" src="https://img-blog.csdnimg.cn/img_convert/2ddcfa65696de4f0b788178cbd458ff3.png"/></p><h1><a id="_127"></a>结尾有好康的图片哦</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/689f28c599917ec039b4424e6d602950.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/4d3dee2b998316b632e522eae8cacea7.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/d060ab4d4e801c863c3fc00852fdf513.png#pic_center"/></img></img></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>c++</tag>
      
      <tag>笔记</tag>
      
      <tag>visual studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++类和对象——上篇</title>
    <link href="/2022/05/12/categories/%E7%AC%94%E8%AE%B0/C++%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/"/>
    <url>/2022/05/12/categories/%E7%AC%94%E8%AE%B0/C++%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E2%80%94%E2%80%94%E4%B8%8A%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h2><a id="_6"></a>😁前言</h2><blockquote><p>这篇博客主要带大家初步 认识类和对象</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/d9a28d5aa07d4e20a6c12d7091e305dd.png"/></p><h2><a id="_12"></a>💖什么是类</h2><h3><a id="__13"></a>🎄 类的引入</h3><blockquote><p>C语言中，结构体中只能定义变量，在C++中，结构体不仅可以定义变量，还可以定义函数</p></blockquote><h3><a id="_17"></a>🍕类的定义</h3><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/aab7c08d630d4ccd99111838e6e43f84.png"/></p><blockquote><ol><li>声明和定义全部放在类体中，需要注意：成员函数如果在类中定义，编译器可能会将其当成内联函数处<br/> 理。 2.一般情况下采用上图的方式</li></ol></blockquote><h3><a id="__24"></a>✈️ 类的作用域</h3><p>类定义了一个新的作用域，类的所有成员都在类的作用域中。在类体外定义成员，需要使用 :: 作用域解析符<br/> 指明成员属于哪个类域。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintPersonInfo</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br> <span class="hljs-type">char</span> _name[<span class="hljs-number">20</span>];<br> <span class="hljs-type">char</span> _gender[<span class="hljs-number">3</span>];<br> <span class="hljs-type">int</span> _age;<br>&#125;;<br><span class="hljs-comment">// 这里需要指定PrintPersonInfo是属于Person这个类域</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Person::PrintPersonInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> cout&lt;&lt;_name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>_gender&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;_age&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4><a id="__49"></a>🍔 类的访问限定符</h4><p>C++实现封装的方式：用类将对象的属性与方法结合在一块，让对象更加完善，通过访问权限选择性的将其<br/> 接口提供给外部的用户使用。<br/> 【访问限定符说明】</p><ol><li>public修饰的成员在类外可以直接被访问</li><li>protected和private修饰的成员在类外不能直接被访问(此处protected和private是类似的)</li><li>访问权限作用域从该访问限定符出现的位置开始直到下一个访问限定符出现时为止</li><li>class的默认访问权限为private，struct为public(因为struct要兼容C</li></ol><p>注意：访问限定符只在编译时有用，当数据映射到内存后，没有任何访问限定符上的区别</p><p>问题：C++中struct和class的区别是什么？</p><p>解答：C++需要兼容C语言，所以C++中struct可以当成结构体去使用。另外C++中struct还可以用来定义类。<br/> 和class是定义类是一样的，区别是struct的成员默认访问方式是public，class是的成员默认访问方式是private。</p><h2><a id="_70"></a>💖什么是对象</h2><blockquote><p>可能大家对对象的认识就是下图：</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/5a1cf579c35b77a44661cfe6f6dfac91.png#pic_center"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/e1b6f7828ed9474b844b840278552e13.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/9f6a2579c36c473db8f74c0fc1766e14.png"/></img></img></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/97d46e387cdb4c19aeb76e6b657487f5.png"><br/> 虽然大家都想要这些对象，但是C++中的对象可不是上面的对象，C++是基于面向对象的，关注的是对象，将一件事情拆分成不同的对象，靠对象之间的交互完成。</img></p><h4><a id="__80"></a>🎇 类的实例化</h4><p>用类类型创建对象的过程，称为类的实例化</p><ol><li>类只是一个模型一样的东西，限定了类有哪些成员，定义出一个类并没有分配实际的内存空间来存储它</li><li>一个类可以实例化出多个对象，实例化出的对象 占用实际的物理空间，存储类成员变量</li><li>做个比方。类实例化出对象就像现实中使用建筑设计图建造出房子，类就像是设计图，只设计出需要什么东西，但是并没有实体的建筑存在，同样类也只是一个设计，实例化出的对象才能实际存储数据，占用物理空间<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/52f294bd323040ada8092f0c2663239b.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/485e78e6535441e5b74f2ad7dccc48a3.png"/></img></li></ol><h2><a id="__87"></a>🚕 类的对象的大小</h2><p>一个类的大小，实际就是该类中”成员变量”之和，当然也要进行内存对齐，注意空类的大小，空类比较特殊，编译器给了空类一个字节来唯一标识这个类。</p><h2><a id="__92"></a>🚙 结语</h2><p>这篇文章就先到这里吧，希望这篇博客对大家有帮助</p><p>那就浅浅地点个赞吧！！！</p><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/9f4727b4faad47db8364564f8c39a558.gif"/></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅浅地讲一下引用吧</title>
    <link href="/2022/05/10/categories/%E7%AC%94%E8%AE%B0/%E6%B5%85%E6%B5%85%E5%9C%B0%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%BC%95%E7%94%A8%E5%90%A7/"/>
    <url>/2022/05/10/categories/%E7%AC%94%E8%AE%B0/%E6%B5%85%E6%B5%85%E5%9C%B0%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%BC%95%E7%94%A8%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h2><a id="___3"></a>🎄 前言</h2><pre><code class="hljs">开启C++之路，希望看了这篇文章之后可以帮助你理解引用</code></pre><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/541456fd42da411f89f1f6afd5f2d8d9.gif"/></p><hr/><h2><a id="__11"></a>💖 何为引用</h2><pre><code class="hljs">引用简单理解一下就是起别名</code></pre><blockquote><p>比如 宇智波鼬，有人叫鼬，有人叫鼬神，有人叫一打七，佐助就叫他欧尼酱</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/cfda672b46576415567a4f84d178d1ab.png#pic_center"/></p><blockquote><p>再比如宇智波佐助，有人叫他佐助，有人叫他二柱子，有人叫他啥是gay，鼬就叫他愚蠢的欧豆豆</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/f90dd6238c9341a3a567d57726e276dc.png"/></p><hr/><h2><a id="_24"></a>🍺深入理解引用</h2><p><img alt="讲解引用" src="https://img-blog.csdnimg.cn/0d105cd9d24b4874aba84cb8d4d1c755.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/6bd40d81b01a4e069b59e26d952f4197.png"/></img></p><blockquote><p>上图我们可以看到，b是a的引用，a和b的值不仅一样，就连地址也是一样的。</p></blockquote><p><em><strong>引用在定义的时候就必须初始化，而且不能更改了。</strong></em><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/cb174c8e775046e080558e553fe565a2.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/79409ceb4f4147fa94e3fb5de6a26541.png"/></img></p><blockquote><p>看上图，我们改变了b的值，a和b的值一起被改变了，让我们再浅浅调试一波吧</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/75db04506dc846fdbc47f343c8f1123a.png"/></p><h4><a id="_41"></a>✈️取别名规则：权限只能缩小不能放大</h4><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/bf8853f776834b95a040464ce3f04815.png"/><br/> 在这里对100进行引用，100是个常量，常量不可修改，100就是100，所以需要在 int&amp; 之前 加一个const，100是只读，int&amp; a这种用法是可读可写，加个const 就是只读了</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/3e18d8589c9945af8b6af00971d5556a.png"/><br/> 解释一下上图吧：<br/> 将double型的变量赋值给int型会产生一个临时变量，临时变量具有常量的性质，所以，const int &amp;c=d是对的。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/74bcf6b6d1284a1993c90b5be480b5fc.png"/></p><hr/><h2><a id="__55"></a>😁 引用的简单应用</h2><blockquote><p>在C语言中我们如果写一个函数交换两个数字，那么需要传这两个数的地 址，这样不好理解并且有点难操作。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/39e3c32c554246e1890b8fe6626a20b3.png"/><br/> 在这里用引用写的话就很简单易懂。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/987437996ca64b0aa6dc98a312e42462.png"/><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/83fb5068bd3043bfb0482e6821378b49.png"/><br/> 如果函数返出了作用域返回对象还没被销毁的话就传引用，否则就传返回值。</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/e2c77fb95a5a466e98cbc0635542c4d6.png"/></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/14ada36839254fd8a5fae3ac18557943.png"/><br/> 由上图 引用要加const 可知函数返回值也是产生了个临时变量</p><p>下面这俩图就让大家更深地理解一下引用<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/f8c981f9e1c64c9d948dfa3503ff928c.png"/></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/a7040e619e4e486992d1f89584ef9cb3.png"/></p><hr/><h2><a id="__78"></a>🚙 引用和指针的区别</h2><p><em><strong>引用和指针的区别简单来说就像换壳的车</strong></em><br/> 表面看起来不一样，底层逻辑其实是一样的。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/2e194ab65a6a456eacb14a3f1f897970.png"/></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/49a0e24eedbf4b42a418d27eb62e0b49.png"/><br/> 1.指针是有一个8字节或者4字节的空间存放着变量的地址，而引用是给变量起别名，不需要额外的空间，sizeof（指针）的话根据计算机位数决定，sizeof（引用根据引用的变量的大小改变）。</p><p>2.引用定义时必须初始化，指针没有要求</p><p>3.没有NULL引用，但有NULL指针</p><p>4.引用比指针更安全</p><p>5.引用在引用了一个变量之后不能引用其他的变量，指针没有要求</p><p>6.有多级指针没有多级引用</p><p>7.访问实体方式不同，指针需要解引用，引用编译器自己处理</p><p>8 指针+1是跳过一个类型<br/> 大小个字节，而引用加一就是实体+1.</p><h2><a id="_103"></a>🎉结语</h2><p>球球大家点个免费的赞呗</p><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/78c937a9be884b17bde7d7c69303aa04.gif"/></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序，插入排序，快速排序，堆排序，希尔排序，归并排序，计数排序，选择排序</title>
    <link href="/2022/05/05/categories/C%E8%AF%AD%E8%A8%80/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%8C%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/05/05/categories/C%E8%AF%AD%E8%A8%80/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%EF%BC%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%8C%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_3"></a>🎉前言</h1><blockquote><p>本人是西安邮电大学一名普通的大二学生，希望这篇关于插入排序的博客对你有用</p></blockquote><p>点个赞嘛</p><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/4850470e413c4c46a77985374335cfb3.gif"/></p><blockquote><p>以下动图均来自<a href="https://www.r2coding.com/#/">https://www.r2coding.com/#/</a></p></blockquote><hr/><h1><a id="SwapData_13"></a>🚕交换数据函数（SwapData）</h1><p>这个函数会经常用到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SwapData</span><span class="hljs-params">(<span class="hljs-type">int</span>* pa, <span class="hljs-type">int</span>* pb)</span><br>&#123;<br><span class="hljs-type">int</span> tmp = *pa;<br>*pa = *pb;<br>*pb = tmp;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_keyGetMidi_25"></a>🦽 寻找中间值做key的函数（GetMidi）</h1><p>这个再快排那里会用到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">GetMidi</span><span class="hljs-params">(<span class="hljs-type">int</span>* a,<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><span class="hljs-comment">//寻找中间值做key</span><br>&#123;<br><span class="hljs-type">int</span> midi = left + ((right - left) &gt;&gt; <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (a[left] &lt; a[midi])<br>&#123;<br><span class="hljs-keyword">if</span> (a[midi] &lt; a[right])<br>&#123;<br><span class="hljs-keyword">return</span> midi;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[left]&gt;a[right])<br>&#123;<br><span class="hljs-keyword">return</span> left;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-keyword">return</span> right;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (a[midi] &gt; a[right])<br>&#123;<br><span class="hljs-keyword">return</span> midi;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[left] &lt; a[right])<br>&#123;<br><span class="hljs-keyword">return</span> left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> right;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="__64"></a>🚒 堆排序</h1><p><a href="https://blog.csdn.net/m0_57723028/article/details/124234756">点击这里看-&gt;堆的定义以及堆排序</a></p><hr/><h1><a id="_68"></a>🎈冒泡排序</h1><p>冒泡排序动图解释：</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/2c61d6912ab55e7a6971c19d5fe0ed31.gif#pic_center"><br/> 冒泡就是每次把最大或者最小的挪到最边<br/> 这个代码不难理解，相信大家初学C语言就了解到了冒泡排序</img></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 冒泡排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> exchange = <span class="hljs-number">0</span>;<span class="hljs-comment">//加一个判断条件，比如：如果第x趟是有序的直接结束掉循环，return掉</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>])<br>&#123;<br>SwapData(&amp;a[j], &amp;a[j + <span class="hljs-number">1</span>]);<br>exchange = <span class="hljs-number">1</span>;<span class="hljs-comment">//有交换的话置为1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!exchange)<span class="hljs-comment">//没有交换就返回</span><br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_101"></a>🏍️插入排序</h1><p>什么是插入排序</p><blockquote><p>个人理解插入排序类似于打牌</p></blockquote><p><strong>幸运女神在微笑，胜利女神在微笑</strong></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/cc0aa2a9a9e5405ab7b3f6542117d126.png"/></p><hr/><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/9bc456806796e6ca0f90e78f78adcac6.gif#pic_center"/></p><p>🎉插入排序代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><span class="hljs-comment">//想象自己在打扑克</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<span class="hljs-comment">//先是第一个和第二个开始比较</span><br>&#123;<br><span class="hljs-type">int</span> end = i;<span class="hljs-comment">//end是下标</span><br><span class="hljs-type">int</span> tmp = a[end + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">while</span> (end &gt;= <span class="hljs-number">0</span> &amp;&amp; tmp &lt; a[end])<br>&#123;<br>a[end + <span class="hljs-number">1</span>] = a[end];<br>end--;<br>&#125;<br>a[end + <span class="hljs-number">1</span>] = tmp;<span class="hljs-comment">//用3 1 2 作为测试用例就可以理解为什么是a[end+1]=tmp</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_136"></a>🚙希尔排序</h1><blockquote><p>希尔排序和插入排序差不了多少，只是每次比较的间距从1变成了一个变量，这个变量 gap根据数据的数量而定，不过最后gap还是要等于1</p></blockquote><p>动图演示：</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/49ef39dc5f36dc6fab0e197d0f82fcc2.gif#pic_center"/></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 希尔排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> gap = n;<span class="hljs-comment">//n=2的时候代入一下</span><br><span class="hljs-keyword">while</span> (gap &gt; <span class="hljs-number">1</span>)<span class="hljs-comment">//gap=1的时候已经执行一次代码了，然后再判断的。</span><br>&#123;<br>gap = gap / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - gap; i++)<br>&#123;<br><span class="hljs-type">int</span> end = i;<br><span class="hljs-type">int</span> tmp = a[end + gap];<br><span class="hljs-keyword">while</span> (end &gt;= <span class="hljs-number">0</span> &amp;&amp; a[end] &gt; tmp)<br>&#123;<br>a[end + gap] = a[end];<br>end-=gap;<span class="hljs-comment">//记得这里是end-=gap  不是 end--！！！这是希尔排序！！！</span><br>&#125;<br>a[end + gap] = tmp;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_167"></a>✈️快速排序</h1><h2><a id="1hoare_168"></a>🏎️1.快速排序hoare版本（带哨兵位）</h2><blockquote><p>这个有个小细节就是哪边做key对边先走，比如左边做key 那就右边先走，然后右边找到比key小的数字就挺住，然后左边再走，左边找到比key大的就停住，然后交换两边的数字，然后右边再走，当两边碰到的时候，交换key（这里是左边）和 相遇位置的数字，当然这个是循环版本。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 快速排序hoare版本</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">PartSort1</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><span class="hljs-comment">//哨兵</span><br>&#123;<br><span class="hljs-type">int</span> midi = GetMidi(a, left, right);<br>SwapData(&amp;a[left], &amp;a[midi]);<br><br><span class="hljs-type">int</span> keyi = left;<br><span class="hljs-keyword">while</span> (left&lt;right)<br>&#123;<br><span class="hljs-keyword">while</span> (left&lt;right&amp;&amp;a[right]&gt;=a[keyi])<br>&#123;<br>right--;<br>&#125;<br><span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; a[left]&lt;=a[keyi])<br>&#123;<br>left++;<br>&#125;<br>SwapData(&amp;a[left], &amp;a[right]);<br>&#125;<br><br>SwapData(&amp;a[left], &amp;a[keyi]);<br><br><span class="hljs-keyword">return</span> left;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br><span class="hljs-keyword">if</span> (left &gt;= right)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">1</span> &lt; <span class="hljs-number">5</span>)<br>&#123;<br>InsertSort(a+left, right - left + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> midi = PartSort1(a, left, right);<br>QuickSort(a, left, midi - <span class="hljs-number">1</span>);<br>QuickSort(a, midi + <span class="hljs-number">1</span>, right);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr/><h2><a id="2_218"></a>🍕2快速排序挖坑法</h2><blockquote><p>在这里选择最左边做坑(key)然后从右边开始找比key小的然后a[left] = a[right]，然后从左边开始找找比key大的a[right] = a[left]，最后相遇的时候a[left] = key;//坑的值归位</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">PartSort2</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br><span class="hljs-type">int</span> midi = GetMidi(a, left, right);<br>SwapData(&amp;a[left], &amp;a[midi]);<br><br><span class="hljs-type">int</span> key = a[left];<span class="hljs-comment">//坑</span><br><span class="hljs-keyword">while</span> (left&lt;right)<br>&#123;<br><span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= key)<span class="hljs-comment">//左边做坑</span><br>&#123;<br>right--;<br>&#125;<br>a[left] = a[right];<br><span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= key)<span class="hljs-comment">//右边做坑</span><br>&#123;<br>left++;<br>&#125;<br>a[right] = a[left] ;<br>&#125;<br>a[left] = key;<span class="hljs-comment">//坑的值归位</span><br><br><span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br><span class="hljs-keyword">if</span> (left &gt;= right)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">1</span> &lt; <span class="hljs-number">5</span>)<br>&#123;<br>InsertSort(a+left, right - left + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> midi = PartSort2(a, left, right);<br>QuickSort(a, left, midi - <span class="hljs-number">1</span>);<br>QuickSort(a, midi + <span class="hljs-number">1</span>, right);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="3_265"></a>🚒3.快速排序前后指针法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">PartSort3</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br><span class="hljs-type">int</span> midi = GetMidi(a, left, right);<br>SwapData(&amp;a[left], &amp;a[midi]);<br><br><span class="hljs-type">int</span> keyi = left;<br><span class="hljs-type">int</span> cur = left;<br><span class="hljs-type">int</span> pro = left + <span class="hljs-number">1</span>;<span class="hljs-comment">//pro 先走</span><br><span class="hljs-keyword">while</span> (pro&lt;=right)<br>&#123;<br><span class="hljs-keyword">if</span> (a[pro] &lt; a[keyi] &amp;&amp; a[++cur] != a[pro])<br>&#123;<br>SwapData(&amp;a[pro], &amp;a[cur]);<br>&#125;<br>pro++;<br>&#125;<br>SwapData(&amp;a[keyi],&amp; a[cur]);<br><br><span class="hljs-keyword">return</span> cur;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br><span class="hljs-keyword">if</span> (left &gt;= right)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">1</span> &lt; <span class="hljs-number">5</span>)<br>&#123;<br>InsertSort(a+left, right - left + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> midi = PartSort3(a, left, right);<br>QuickSort(a, left, midi - <span class="hljs-number">1</span>);<br>QuickSort(a, midi + <span class="hljs-number">1</span>, right);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="4_308"></a>🍺4.快速排序非递归法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSortNonR</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br>ST st;<br>StackInit(&amp;st);<br><span class="hljs-keyword">if</span> (left &lt; right)<span class="hljs-comment">//先进后出</span><br>&#123;<br>StackPush(&amp;st, left);<br>StackPush(&amp;st, right);<br>&#125;<br><span class="hljs-keyword">while</span> (!StackEmpty(&amp;st))<br>&#123;<br>right = StackTop(&amp;st);<br>StackPop(&amp;st);<br>left = StackTop(&amp;st);<br>StackPop(&amp;st);<br><span class="hljs-type">int</span> midi=PartSort3(a, left, right);<br><br><span class="hljs-keyword">if</span> (left &lt; midi )<br>&#123;<br>StackPush(&amp;st, left);<br>StackPush(&amp;st,midi - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (midi + <span class="hljs-number">1</span> &lt; right)<br>&#123;<br>StackPush(&amp;st, midi+<span class="hljs-number">1</span>);<br>StackPush(&amp;st, right);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_343"></a>🚙归并排序</h1><blockquote><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p></blockquote><blockquote><p>算法思想：1.把长度为n的输入序列分成两个长度为n/2的子序列；2. 对这两个子序列分别采用归并排序；3. 将两个排序好的子序列合并成一个最终的排序序列。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/86d7175758aab2e28d60caa3395f1bed.gif#pic_center"/></p><blockquote><p>这个是递归版本：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _MergeSort(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end,<span class="hljs-type">int</span>* tmp)<span class="hljs-comment">//先分成最小规模子问题然后再解决</span><br>&#123;<br><span class="hljs-keyword">if</span> (begin &gt;= end)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> midi = begin + ((end-begin)&gt;&gt;<span class="hljs-number">1</span>);<br>_MergeSort(a, begin, midi, tmp);<br>_MergeSort(a, midi+<span class="hljs-number">1</span>, end, tmp);<br><br><span class="hljs-type">int</span> begin1 = begin;<br><span class="hljs-type">int</span> end1 = midi;<br><span class="hljs-type">int</span> begin2 = midi + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> end2 = end;<br><span class="hljs-type">int</span> index = begin;<span class="hljs-comment">//合并两个有序数组</span><br><br><span class="hljs-keyword">while</span>(begin1&lt;=end1&amp;&amp;begin2&lt;=end2)<br>&#123;<br><span class="hljs-keyword">if</span> (a[begin1] &lt;= a[begin2])<br>&#123;<br>tmp[index++] = a[begin1++];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>tmp[index++] = a[begin2++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (begin1&lt;=end1)<br>&#123;<br>tmp[index++] = a[begin1++];<br>&#125;<br><br><span class="hljs-keyword">while</span> (begin2&lt;=end2)<br>&#123;<br>tmp[index++] = a[begin2++];<br>&#125;<br><br><span class="hljs-built_in">memcpy</span>(a + begin, tmp + begin, (end - begin + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>&#125;<br><span class="hljs-comment">//归并排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;  <br><span class="hljs-type">int</span>* tmp = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>assert(tmp);<br>_MergeSort(a, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>,tmp);<span class="hljs-comment">//传闭区间好控制一点点</span><br><span class="hljs-built_in">free</span>(tmp);<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>还有这个非递归版的归并排序：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">MergeSortNonR</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span>* tmp = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * n);<br>assert(tmp);<br><span class="hljs-type">int</span> gap = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (gap&lt;n)<br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>*gap)<br>&#123;<br><span class="hljs-type">int</span> begin1 = i;<br><span class="hljs-type">int</span> end1 = i + gap - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> begin2 = i + gap;<br><span class="hljs-type">int</span> end2 = i + <span class="hljs-number">2</span> * gap - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (end1 &gt;= n)<br>&#123;<br>end1 = n - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (begin2 &gt;= n)<br>&#123;<br>begin2 = n;<br>end2 = n - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (begin2&lt;n &amp;&amp; end2 &gt;= n)<br>&#123;<br>end2 = n - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> index = i;<br><span class="hljs-keyword">while</span> (begin1&lt;=end1 &amp;&amp; begin2&lt;=end2)<br>&#123;<br><span class="hljs-keyword">if</span> (a[begin1] &lt;= a[begin2])<br>&#123;<br>tmp[index++] = a[begin1++];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>tmp[index++] = a[begin2++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (begin1&lt;=end1)<br>&#123;<br>tmp[index++]=a[begin1++];<br>&#125;<br><span class="hljs-keyword">while</span> (begin2&lt;=end2)<br>&#123;<br>tmp[index++] = a[begin2++];<br>&#125;<br>&#125;<br>assert(tmp);<br><span class="hljs-built_in">memcpy</span>(a, tmp, n * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>gap *= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">free</span>(tmp);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_461"></a>🎄计数排序</h1><blockquote><p>计数排序统计小于等于该元素值的元素的个数i，于是该元素就放在目标数组的索引i位（i≥0）。</p></blockquote><blockquote><p>计数排序基于一个假设，待排序数列的所有数均为整数，且出现在（0，k）的区间之内。<br/> 如果 k（待排数组的最大值） 过大则会引起较大的空间复杂度，一般是用来排序 0 到 100 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。<br/> 计数排序不是比较排序，排序的速度快于任何比较排序算法。<br/> 算法思想：</p></blockquote><blockquote><p>找出待排序的数组中最大和最小的元素；<br/> 统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；<br/> 对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；<br/> 向填充目标数组：将每个元素 i 放在新数组的第 C[i] 项，每放一个元素就将 C[i] 减去 1；</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/16d54d6a366cc9cff5c32bfd6d2fdc2f.gif#pic_center"/></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CountSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> max = a[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> min = a[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &lt; min)<br>&#123;<br>min = a[i];<br>&#125;<br><span class="hljs-keyword">if</span> (a[i] &gt; max)<br>&#123;<br>max = a[i];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> range = (max - min + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span>* tmp = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*range);<br>assert(tmp);<br><span class="hljs-built_in">memset</span>(tmp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * range);<span class="hljs-comment">//把tmp数组初始化为0 </span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//最后把tmp中的值赋给a,控制a的下标</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>tmp[a[i] - min]++;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; range; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; tmp[i]; j++)<br>&#123;<br><span class="hljs-comment">//a[count++] = (tmp[j] + min);这是错误写法</span><br><span class="hljs-comment">//a[count++] = (tmp[i] + min); 这是错误写法</span><br>a[count++] = i + min;<span class="hljs-comment">//下标+min才是原来的数字</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="__519"></a>💖 选择排序</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/e3d446a0209c8e701bf732236965863d.gif#pic_center"/></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<span class="hljs-comment">//控制最左边和最右边的边界</span><br><span class="hljs-type">int</span> right = n - <span class="hljs-number">1</span>;<span class="hljs-comment">//控制最左边和最右边的边界</span><br><br><span class="hljs-keyword">while</span> (left &lt; right)<br>&#123;<br><span class="hljs-type">int</span> mini = left;<br><span class="hljs-type">int</span> maxi = left;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= right; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &lt; a[mini])<br>&#123;<br>mini = i;<br>&#125;<br><span class="hljs-keyword">if</span> (a[i] &gt; a[maxi])<br>&#123;<br>maxi = i;<br>&#125;<br>&#125;<br>SwapData(&amp;a[left], &amp;a[mini]);<br><span class="hljs-keyword">if</span> (maxi == left)<span class="hljs-comment">//如果第一个数是最大的话就没交换到mini的位置上去了</span><br>&#123;<br>maxi = mini;<br>&#125;<br>SwapData(&amp;a[right], &amp;a[maxi]);<br>left++;<br>right--;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_556"></a>结语</h1><blockquote><p>点赞评论呗<br/> <img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/51d22d9ed30e4fe5b7e96855eb73e6c2.gif"/></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>笔记</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆的定义以及堆排序</title>
    <link href="/2022/04/17/categories/C%E8%AF%AD%E8%A8%80/%E5%A0%86%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/04/17/categories/C%E8%AF%AD%E8%A8%80/%E5%A0%86%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_7"></a>🚗前言</h1><blockquote><p>本人是西安邮电大学的一个普通的 大学生，如果这篇文章对你有帮助的话请给我点个赞吧，球球了。<br/> <img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/5f4dd9a08c5e49c0a6ab0120089e3185.gif"/></p></blockquote><hr/><h1><a id="_13"></a>🎉堆的概念</h1><pre><code class="hljs">直接上图</code></pre><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/b869ef26aa094a1187dc7eaaa898dc0a.png"/></p><p>其实可以把堆看成一个完全二叉树，并且用数组实现。<br/> 左右孩子和双亲的关系就是这样的：<br/> leftchild=parent*2+1；<br/> rightchild=parent *2+2；<br/> parent = （child-1）/2；</p><hr/><h1><a id="_26"></a>✈️堆的代码实现</h1><h3><a id="heaph_27"></a>heap.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> HPDataType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Heap</span></span><br><span class="hljs-class">&#123;</span><br>HPDataType* a;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> capacity;<br>&#125;HP;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Swap</span><span class="hljs-params">(HPDataType* pa, HPDataType* pb)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapInit</span><span class="hljs-params">(HP* php)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">HpDestroy</span><span class="hljs-params">(HP* php)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPrint</span><span class="hljs-params">(HP* php)</span>;<br><br><span class="hljs-comment">// 插入x以后，保持他依旧是(大/小)堆</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPush</span><span class="hljs-params">(HP* php, HPDataType x)</span>;<br><br><span class="hljs-comment">// 删除堆顶的数据。(最小/最大)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPop</span><span class="hljs-params">(HP* php)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">HeapEmpty</span><span class="hljs-params">(HP* php)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">HpSize</span><span class="hljs-params">(HP* php)</span>;<br>HPDataType <span class="hljs-title function_">HeapTop</span><span class="hljs-params">(HP* php)</span>;<br><br></code></pre></td></tr></table></figure><h3><a id="heapc_61"></a>heap.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;heap.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">AdjustUp</span><span class="hljs-params">(HPDataType* a, <span class="hljs-type">size_t</span> child)</span><span class="hljs-comment">//看是大堆还是小堆，大堆父母比孩子大，小堆父母比孩子小</span><br>&#123;<br><span class="hljs-type">size_t</span> parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (a[child]&gt;a[parent])<br>&#123;<br>Swap(&amp;a[parent], &amp;a[child]);<span class="hljs-comment">//要传地址</span><br>child = parent;<br>parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//看是大堆还是小堆，大堆父母比孩子大，小堆父母比孩子小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">AdjustDown</span><span class="hljs-params">(HPDataType* a, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> root)</span><br>&#123;<br><span class="hljs-type">size_t</span> parent = root;<br><span class="hljs-type">size_t</span> child = parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (child&lt;size)<br>&#123;<br><span class="hljs-keyword">if</span> (child + <span class="hljs-number">1</span> &lt; size &amp;&amp; a[child + <span class="hljs-number">1</span>] &gt; a[child])<br>&#123;<br>child++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (a[child] &gt; a[parent])<br>&#123;<br>Swap(&amp;a[parent], &amp;a[child]);<span class="hljs-comment">//要传地址</span><br><br>parent = child; <br>child = parent*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Swap</span><span class="hljs-params">(HPDataType* pa, HPDataType* pb)</span><br>&#123;<br>HPDataType tmp = *pa;<br>*pa = *pb;<br>*pb = tmp;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapInit</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br>php-&gt;a = <span class="hljs-literal">NULL</span>;<br>php-&gt;size = <span class="hljs-number">0</span>;<br>php-&gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPrint</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br><span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt;php-&gt;size; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,php-&gt;a[i] );<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">// 插入x以后，保持他依旧是(大/小)堆</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPush</span><span class="hljs-params">(HP* php, HPDataType x)</span><br>&#123;<br>assert(php);<br><span class="hljs-keyword">if</span> (php-&gt;capacity == php-&gt;size)<br>&#123;<br><span class="hljs-type">size_t</span> newcapacity = php-&gt;capacity==<span class="hljs-number">0</span>?<span class="hljs-number">4</span>:(php-&gt;capacity*<span class="hljs-number">2</span>);<br>HPDataType* tmp = (HPDataType*)<span class="hljs-built_in">realloc</span>(php-&gt;a,<span class="hljs-keyword">sizeof</span>(HPDataType)*newcapacity);<span class="hljs-comment">//注意是realloc不是malloc</span><br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc failed\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>php-&gt;a = tmp;<br>php-&gt;capacity = newcapacity;<br>&#125;<br>php-&gt;a[php-&gt;size] = x;<br>php-&gt;size++;<br><br>AdjustUp(php-&gt;a, php-&gt;size - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HpDestroy</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br><span class="hljs-built_in">free</span>(php-&gt;a);<br>php-&gt;a = <span class="hljs-literal">NULL</span>;<br>php-&gt;size = <span class="hljs-number">0</span>;<br>php-&gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除堆顶的数据。(最小/最大)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapPop</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br>assert(php-&gt;size &gt; <span class="hljs-number">0</span>);<br>Swap(&amp;php-&gt;a[<span class="hljs-number">0</span>], &amp;php-&gt;a[php-&gt;size - <span class="hljs-number">1</span>]);<br>php-&gt;size--;<br>AdjustDown(php-&gt;a,php-&gt;size,<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">HeapEmpty</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br><span class="hljs-keyword">return</span> php-&gt;size == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">HpSize</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br><span class="hljs-keyword">return</span> php-&gt;size;<br>&#125;<br><br>HPDataType <span class="hljs-title function_">HeapTop</span><span class="hljs-params">(HP* php)</span><br>&#123;<br>assert(php);<br>assert(php-&gt;size &gt; <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> php-&gt;a[<span class="hljs-number">0</span>];<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="testc_203"></a>test.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span><br>&#123;<br>HP hp;<br>HeapInit(&amp;hp);<br>HeapPush(&amp;hp, <span class="hljs-number">1</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">5</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">0</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">8</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">3</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">9</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">6</span>);<br>HeapPush(&amp;hp, <span class="hljs-number">7</span>);<br>HeapPrint(&amp;hp);<br>HeapPop(&amp;hp);<br>HeapPrint(&amp;hp);<br>HpDestroy(&amp;hp);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>test1();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_229"></a>🏍️堆排序</h1><h3><a id="_231"></a>代码实现</h3><p>这里用的是向上调整建大堆，然后进行堆排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Swap</span><span class="hljs-params">(HPDataType* pa, HPDataType* pb)</span><br>&#123;<br>HPDataType tmp = *pa;<br>*pa = *pb;<br>*pb = tmp;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">AdjustUp</span><span class="hljs-params">(HPDataType* a, <span class="hljs-type">size_t</span> child)</span><span class="hljs-comment">//看是大堆还是小堆，大堆父母比孩子大，小堆父母比孩子小</span><br>&#123;<br><span class="hljs-type">size_t</span> parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (a[child]&gt;a[parent])<br>&#123;<br>Swap(&amp;a[parent], &amp;a[child]);<span class="hljs-comment">//要传地址</span><br>child = parent;<br>parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//看是大堆还是小堆，大堆父母比孩子大，小堆父母比孩子小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">AdjustDown</span><span class="hljs-params">(HPDataType* a, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> root)</span><br>&#123;<br><span class="hljs-type">size_t</span> parent = root;<br><span class="hljs-type">size_t</span> child = parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (child&lt;size)<br>&#123;<br><span class="hljs-keyword">if</span> (child + <span class="hljs-number">1</span> &lt; size &amp;&amp; a[child + <span class="hljs-number">1</span>] &gt; a[child])<br>&#123;<br>child++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (a[child] &gt; a[parent])<br>&#123;<br>Swap(&amp;a[parent], &amp;a[child]);<span class="hljs-comment">//要传地址</span><br><br>parent = child; <br>child = parent*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>&#123;<br>AdjustUp(a, i);<br>&#125;<br><span class="hljs-type">int</span> end = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (end&gt;<span class="hljs-number">0</span>)<br>&#123;<br>Swap(&amp;a[<span class="hljs-number">0</span>],&amp;a[end]);<br>AdjustDown(a, end, <span class="hljs-number">0</span>);<br>end--;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span> &#125;;<br>HeapSort(a, <span class="hljs-keyword">sizeof</span>(a)/<span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]));<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/9ced55acefb143b6b42e2ee62603cd33.png"/></p><hr/><h1><a id="_317"></a>🎉结语</h1><p>既然都看到这里了就点个赞再走呗</p><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/66e2f361a4f345e4bbcc6389c8479c67.gif"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/60a7f8b26ba0443caf9d65efdf35986e.png"/></img></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树详解</title>
    <link href="/2022/04/15/categories/%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/04/15/categories/%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h2><a id="_5"></a>✈️前言</h2><pre><code class="hljs">本人是西安邮电大学的一名普通的大学生，以下是我对于二叉树的理解。    希望对大家有帮助</code></pre><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/08374afea1d84afbbc535060e056b150.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/9ee0145cfe3d4901bbfd13b8d827a8ab.png"/></img></p><hr/><h2><a id="_15"></a>🚂什么是二叉树</h2><h2><a id="httpsimgblogcsdnimgcn5e0e1f5d48ef44a08d70e1f9ed87e922png_17"></a><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/5e0e1f5d48ef44a08d70e1f9ed87e922.png"/></h2><blockquote><p>二叉树（Binary<br/> tree）是树形结构的一个重要类型。许多实际问题抽象出来的数据结构往往是二叉树形式，即使是一般的树也能简单地转换为二叉树，而且二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。二叉树特点是每个节点最多只能有两棵子树，且有左右之分。<br/> 二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个节点</p></blockquote><hr/><h2><a id="_26"></a>🎈二叉树的一些基本知识</h2><pre><code class="hljs">二叉树的子树是不相交的，如果带回路（环）就是图节点的度：一个节点含有的子数的个数称为该节点的度双亲节点或父亲节点：若一个节点含有子节点，则这个节点称为其子节点的父节点孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点兄弟节点：具有相同父节点的节点互称为兄弟节点书的高度或深度： 树中节点的最大层次节点的祖先：从根到该节点所经分支上的所有结点森林：由m（m&gt;0）棵互不相交的树的集合称为森林</code></pre><hr/><h2><a id="_39"></a>🚇结语</h2><pre><code class="hljs">既然都看到这了点个赞呗。</code></pre><p><img alt="请添加图片描述" src="https://img-blog.csdnimg.cn/fba668e4f62b4fc1a42d1a93cdf9e95e.gif"/></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看了这篇关于栈的文章就可以去给异性讲了</title>
    <link href="/2022/03/25/categories/C%E8%AF%AD%E8%A8%80/%E7%9C%8B%E4%BA%86%E8%BF%99%E7%AF%87%E5%85%B3%E4%BA%8E%E6%A0%88%E7%9A%84%E6%96%87%E7%AB%A0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8E%BB%E7%BB%99%E5%BC%82%E6%80%A7%E8%AE%B2%E4%BA%86/"/>
    <url>/2022/03/25/categories/C%E8%AF%AD%E8%A8%80/%E7%9C%8B%E4%BA%86%E8%BF%99%E7%AF%87%E5%85%B3%E4%BA%8E%E6%A0%88%E7%9A%84%E6%96%87%E7%AB%A0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8E%BB%E7%BB%99%E5%BC%82%E6%80%A7%E8%AE%B2%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_5"></a>🎈前言</h1><pre><code class="hljs">这篇文章男女通用，看懂了就去给异性讲吧。</code></pre><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/0de10d1680c64518b62ba91d88c62db7.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/1a8e380ad0114808b11012958b6dbebb.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/e922e9d127f246f3bffc03d6ac1aa365.png"/></img></img></p><h1><a id="_14"></a>🎈什么是栈</h1><p>可以把栈当成是弹夹，只能从栈顶放入数据和取出数据，而且每次取出的时候都是从栈顶取，先进后出后进先出</p><h1><a id="_18"></a>🎈动图演示栈</h1><h2><a id="_20"></a>🎈链表实现栈：</h2><p><img alt="img" src="https://img-blog.csdnimg.cn/img_convert/f862cdced7a9418359fa8a5f1af4290e.gif"/></p><h2><a id="_24"></a>🎈线性表实现栈：</h2><img alt="img" src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F20750832-366085c55e69d206.gif&amp;refer=http%3A%2F%2Fupload-images.jianshu.io&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1650785101&amp;t=7350373736d054e3f81d1c5345493b44"><img alt="img" src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F1544400%2F202109%2F1544400-20210922221410637-1311459640.gif&amp;refer=http%3A%2F%2Fimg2020.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1650785101&amp;t=ca3ef56e55f9d5ec5bf856979a3b787f"><h1><a id="_36"></a>🎈栈的具体实现</h1><h2><a id="stakh__38"></a>🎈stak.h 定义函数，结构体，所需要的头文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&amp;lt;stdio.h&amp;gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&amp;lt;stdlib.h&amp;gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&amp;lt;assert.h&amp;gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>&amp;lt;stdbool.h&amp;gt;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> STDataType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class">&#123;</span><br>STDataType* a;<br><span class="hljs-type">int</span> top;<br><span class="hljs-type">int</span> capacity;<br>&#125; ST;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackInit</span><span class="hljs-params">(ST*ps)</span>;<span class="hljs-comment">//初始化栈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackPush</span><span class="hljs-params">(ST* ps, STDataType x)</span>;<span class="hljs-comment">//入栈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackPop</span><span class="hljs-params">(ST*ps)</span>;<span class="hljs-comment">//出栈</span><br><span class="hljs-type">int</span>  <span class="hljs-title function_">StackSize</span><span class="hljs-params">(ST*ps)</span>;<span class="hljs-comment">//栈中数据的数量</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(ST* ps)</span>;<span class="hljs-comment">//判断栈是否为空</span><br>STDataType <span class="hljs-title function_">StackTop</span><span class="hljs-params">(ST* ps)</span>;<span class="hljs-comment">//栈顶元素</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Destroy</span><span class="hljs-params">(ST* ps)</span>;<span class="hljs-comment">//销毁栈</span><br><br></code></pre></td></tr></table></figure><h2><a id="stackc_64"></a>🎈stack.c实现函数</h2><h3><a id="_StackInitSTps_66"></a>🎈 StackInit(ST*ps);//初始化栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">StackInit</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>ps-&amp;gt;a = <span class="hljs-literal">NULL</span>;<br>ps-&amp;gt;top = <span class="hljs-number">0</span>;<br>ps-&amp;gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="StackPushST_ps_STDataType_x_80"></a>🎈StackPush(ST* ps, STDataType x);//入栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">StackPush</span><span class="hljs-params">(ST* ps, STDataType x)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">if</span> (ps-&amp;gt;top == ps-&amp;gt;capacity)<br>&#123;<br><span class="hljs-type">int</span> newCapacity = ps-&amp;gt;capacity == <span class="hljs-number">0</span> ? <span class="hljs-number">4</span> : (ps-&amp;gt;capacity * <span class="hljs-number">2</span>);<br>ps-&amp;gt;a = (STDataType*)<span class="hljs-built_in">realloc</span>(ps-&amp;gt;a, <span class="hljs-keyword">sizeof</span>(STDataType) * newCapacity);<br><span class="hljs-keyword">if</span> (ps-&amp;gt;a == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;realloc fail\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>ps-&amp;gt;capacity = newCapacity;<br>&#125;<br><br>ps-&amp;gt;a[ps-&amp;gt;top] = x;<br>ps-&amp;gt;top++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="StackPopSTps_105"></a>🎈StackPop(ST*ps);//出栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">StackPop</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>assert(ps-&amp;gt;top &amp;gt; <span class="hljs-number">0</span>);<br>--ps-&amp;gt;top;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="StackSizeSTps_118"></a>🎈StackSize(ST*ps);//栈中数据的数量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  <span class="hljs-title function_">StackSize</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">return</span> ps-&amp;gt;top;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="StackEmptyST_ps_130"></a>🎈StackEmpty(ST* ps);//判断栈是否为空</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><br><span class="hljs-keyword">return</span> (ps-&amp;gt;top == <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><a id="StackTopST_ps_143"></a>🎈StackTop(ST* ps);//栈顶元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">STDataType <span class="hljs-title function_">StackTop</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>assert(ps-&amp;gt;top &amp;gt; <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ps-&amp;gt;a[ps-&amp;gt;top - <span class="hljs-number">1</span>];<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3><a id="DestroyST_ps_157"></a>🎈Destroy(ST* ps);//销毁栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Destroy</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-built_in">free</span>(ps-&amp;gt;a);<br>ps-&amp;gt;top = ps-&amp;gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="stackc_168"></a>🎈stack.c完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stack.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackInit</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>ps-&amp;gt;a = <span class="hljs-literal">NULL</span>;<br>ps-&amp;gt;top = <span class="hljs-number">0</span>;<br>ps-&amp;gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackPush</span><span class="hljs-params">(ST* ps, STDataType x)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">if</span> (ps-&amp;gt;top == ps-&amp;gt;capacity)<br>&#123;<br><span class="hljs-type">int</span> newCapacity = ps-&amp;gt;capacity == <span class="hljs-number">0</span> ? <span class="hljs-number">4</span> : (ps-&amp;gt;capacity * <span class="hljs-number">2</span>);<br>ps-&amp;gt;a = (STDataType*)<span class="hljs-built_in">realloc</span>(ps-&amp;gt;a, <span class="hljs-keyword">sizeof</span>(STDataType) * newCapacity);<br><span class="hljs-keyword">if</span> (ps-&amp;gt;a == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;realloc fail\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>ps-&amp;gt;capacity = newCapacity;<br>&#125;<br><br>ps-&amp;gt;a[ps-&amp;gt;top] = x;<br>ps-&amp;gt;top++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackPop</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>assert(ps-&amp;gt;top &amp;gt; <span class="hljs-number">0</span>);<br>--ps-&amp;gt;top;<br>&#125;<br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">StackSize</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">return</span> ps-&amp;gt;top;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><br><span class="hljs-keyword">return</span> (ps-&amp;gt;top == <span class="hljs-number">0</span>);<br>&#125;<br><br>STDataType <span class="hljs-title function_">StackTop</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br>assert(ps-&amp;gt;top &amp;gt; <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ps-&amp;gt;a[ps-&amp;gt;top - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Destroy</span><span class="hljs-params">(ST* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-built_in">free</span>(ps-&amp;gt;a);<br>ps-&amp;gt;top = ps-&amp;gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_234"></a>🎈结语</h1><p>都看到这里了点个赞呗<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/7dd2373c5a03435e9af0cff30a6f9e80.png"/></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/5744e24a96844c9f81a501aeaf5966ba.png#pic_center"/></p></img></img>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题笔记之第一题——两数之和</title>
    <link href="/2022/03/25/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AC%AC%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/03/25/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%AC%AC%E4%B8%80%E9%A2%98%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/f2884e0a882f47ac96d2e515db625d52.png#pic_center"/></p><h1><a id="_7"></a>前言</h1><p>本人是西安邮电大学的一名普通的大二学生，这是我在力扣上刷题的笔记</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/b08367791b3a4c53a386c81cec660956.png"/></p><hr/><h1><a id="_15"></a>题目描述</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br/> 输出：[0,1]<br/> 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br/> 示例 2：</p><p>输入：nums = [3,2,4], target = 6<br/> 输出：[1,2]<br/> 示例 3：</p><p>输入：nums = [3,3], target = 6<br/> 输出：[0,1]</p><p>来源：力扣（LeetCode）<br/> 链接：https://leetcode-cn.com/problems/two-sum<br/> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><hr/><h1><a id="_44"></a>题目分析</h1><p><mark>这个时候我们创建两个变量，i和j，j去遍历,然后如果<code>nums[i]+nums[j]!=target</code>,j++,j一次遍历完后没有找到符合条件的数字之后便i++。</mark></p><hr/><h1><a id="_49"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;numsSize;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target)<br>            &#123;<br>               <span class="hljs-type">int</span>* ret=<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">2</span>);<br>               ret[<span class="hljs-number">0</span>]=i;<br>               ret[<span class="hljs-number">1</span>]=j;<br>               *returnSize=<span class="hljs-number">2</span>;<br>               <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;<br>    &#125;<br>    *returnSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_75"></a>结语</h1><p>希望这篇文章对大家有帮助，既然都看到这了就点个赞呗。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/edf6333e8860474088e598c8f9674fc3.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/a08b35897cc74e5d9dfd6297fe2d737e.png#pic_center"/></img></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣leetcode刷题笔记之消失的数字</title>
    <link href="/2022/03/24/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2022/03/24/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/9e8d0a85070e4de8a11acc7dbaa6e3c6.png#pic_center"/></p><h1><a id="_7"></a>🚙前言</h1><p><code>本人是西安邮电大学计科专业一名普通的大学生，这是我在力扣上的刷题笔记，希望对大家有帮助。</code><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/674b686c5f3a441190282dfaccc717bb.png"/></p><hr/><h1><a id="_13"></a>🚗题目描述</h1><blockquote><p>数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？</p><p>注意：本题相对书上原题稍作改动</p><p>示例 1：</p><p>输入：[3,0,1]<br/> 输出：2</p><p>示例 2：</p><p>输入：[9,6,4,2,3,5,7,0,1]<br/> 输出：8</p><p>来源：力扣（LeetCode）<br/> 链接：https://leetcode-cn.com/problems/missing-number-lcci<br/> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><hr/><h1><a id="_34"></a>🚕题目分析</h1><p>在这里我们用到了位运算符，<strong>异或(^)</strong></p><p>异或是相同为0，不同为1，所以，0和x异或答案是x</p><p>拿上面的示例1举例：</p><blockquote><p>0^ 3 ^ 0 ^ 1 ^ 0 ^ 1 ^ 2 ^ 3 = 3 ^ 1 ^ 1 ^ 2 ^ 3=1 ^ 1 ^ 2 ^ 3 ^ 3 = 0 ^ 2^0=2</p></blockquote><hr/><h1><a id="_46"></a>🏍代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">missingNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;numsSize;i++)<br>    &#123;<br>        x^=nums[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;numsSize+<span class="hljs-number">1</span>;j++)<br>    &#123;<br>        x^=j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_67"></a>🏎结语</h1><p>既然都看到这里了，点个赞再走呗</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c47f775e29144afa834f4e31f18a77a2.png"/></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超详解——数据结构之双向带头循环链表。</title>
    <link href="/2022/03/22/categories/C%E8%AF%AD%E8%A8%80/%E8%B6%85%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E5%B8%A6%E5%A4%B4%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E3%80%82/"/>
    <url>/2022/03/22/categories/C%E8%AF%AD%E8%A8%80/%E8%B6%85%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E5%B8%A6%E5%A4%B4%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="__5"></a>🎃 前言</h1><p>本人是西安邮电大学计科专业的一个普通学生，以下是本人对于带头双向循环链表的理解。</p><blockquote><p>先上图<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/138e860ae2dd4058a5c45f49edfe5190.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"> <code>带头双向循环链表的 头节点（head）不存数据</code>,因为如果数据是char类型的话，存放的数据多了 ，怎么表示？表示不了啊</img></p></blockquote><hr/><h1><a id="_11"></a>🍺带你理解链表</h1><p>如果大家对于链表还不是很熟悉的话，请点击传送门，那里有对于单链表的简单解释👉 <a href="https://blog.csdn.net/m0_57723028/article/details/123445484?spm=1001.2014.3001.5501">传送门</a></p><hr/><h1><a id="_16"></a>🎄结构体创建结点</h1><p>prev：指向上一个结点<br/> next：指向下一个结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">prev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">next</span>;</span><br>DataType data;<br>&#125;ListNode;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_28"></a>✨各个函数的实现：</h1><h2><a id="_29"></a>🚋申请空间：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">( DataType x)</span><br>&#123;<br>ListNode* newnode = (ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ListNode));<br>assert(newnode);<br>newnode-&gt;data = x;<br>newnode-&gt;next = newnode;<br>newnode-&gt;prev = newnode;<br><span class="hljs-keyword">return</span> newnode;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_43"></a>🚓寻找结点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode* <span class="hljs-title function_">Find</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>assert(phead-&gt;next != phead);<br>ListNode* pos = <span class="hljs-literal">NULL</span>;<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span>(cur!=phead)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;data==x)<br>&#123;<br>pos = cur;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">if</span>(pos)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到！\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没找到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_72"></a>🚒在指定结点之前插入</h2><p><code>这个很重要，头插尾插都能用到</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(ListNode* pos, DataType x)</span><br>&#123;<br>assert(pos);<br>ListNode* newnode = BuyNewNode(x);<br>ListNode* head = pos-&gt;prev;<br>head-&gt;next = newnode;<br>newnode-&gt;prev = head;<br>newnode-&gt;next = pos;<br>pos-&gt;prev = newnode;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_87"></a>🚈删除指定结点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Erease</span><span class="hljs-params">(ListNode* pos)</span><br>&#123;<br>ListNode* Prev = pos-&gt;prev;<br>ListNode* Next = pos-&gt;next;<br>Prev-&gt;next = Next;<br>Next-&gt;prev = Prev;<br><span class="hljs-built_in">free</span>(pos);<br>pos = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_101"></a>🚍头插</h2><p><code>头插就是在第一个结点前插入，第一个结点就是 phead-&gt;next</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PushFront</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;next;<br>Insert(pos, x);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_111"></a>🚇尾插</h2><p><code>尾插就是在最后结点插入，也就是在phead之前插入</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PushBack</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead;<br>Insert(pos, x);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_122"></a>🚃头删</h2><p><code>头删就是删除phead-&gt;next</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PopFront</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;next;<br>Erease(pos);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="_133"></a>🦽尾删</h2><p><code>尾删就是删除phead-&gt;prev</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PopBack</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;prev;<br>Erease(pos);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_142"></a>🚂计算链表结点个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br>sum++;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_159"></a>🚒打印链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, cur-&gt;data);<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="__176"></a>🍕 销毁链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Destory</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br>ListNode* Next = cur-&gt;next;<br><span class="hljs-built_in">free</span>(cur);<br>cur = Next;<br>&#125;<br><span class="hljs-built_in">free</span>(phead);<br>phead = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_195"></a>⚽完整代码：</h1><h2><a id="_listh_196"></a>🎎 list.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DataType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">prev</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">next</span>;</span><br>DataType data;<br>&#125;ListNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">ListNode</span>;</span><br><span class="hljs-comment">//void Init(ListNode** pphead); 初始化头节点</span><br>ListNode* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">(DataType x)</span>;<span class="hljs-comment">//申请空间</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PushFront</span><span class="hljs-params">(ListNode* phead,DataType x)</span>;<span class="hljs-comment">//头插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PushBack</span><span class="hljs-params">(ListNode* phead, DataType x)</span>;<span class="hljs-comment">//尾插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PopFront</span><span class="hljs-params">(ListNode* phead)</span>;<span class="hljs-comment">//头删</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PopBack</span><span class="hljs-params">(ListNode* phead)</span>;<span class="hljs-comment">//尾删</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(ListNode* pos,DataType x)</span>;<span class="hljs-comment">//在指定位置插入</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Erease</span><span class="hljs-params">(ListNode* pos)</span>;<span class="hljs-comment">//在指定位置删除</span><br>ListNode* <span class="hljs-title function_">Find</span><span class="hljs-params">(ListNode* phead, DataType x)</span>;<span class="hljs-comment">//寻找</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(ListNode* phead)</span>;<span class="hljs-comment">//打印</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(ListNode* phead)</span>;<span class="hljs-comment">//计算链表的大小</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Destory</span><span class="hljs-params">(ListNode* phead)</span>;<span class="hljs-comment">//摧毁链表</span><br><br></code></pre></td></tr></table></figure><hr/><h2><a id="listc_226"></a>🎨list.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;list.h&quot;</span></span><br>ListNode* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">( DataType x)</span><br>&#123;<br>ListNode* newnode = (ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ListNode));<br>assert(newnode);<br>newnode-&gt;data = x;<br>newnode-&gt;next = newnode;<br>newnode-&gt;prev = newnode;<br><span class="hljs-keyword">return</span> newnode;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PushFront</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;next;<br>Insert(pos, x);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PushBack</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead;<br>Insert(pos, x);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PopFront</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;next;<br>Erease(pos);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PopBack</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>ListNode* pos = phead-&gt;prev;<br>Erease(pos);<br>&#125;<br><span class="hljs-comment">//void Init(ListNode** pphead)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//*pphead = BuyNewNode(0);</span><br><span class="hljs-comment">//&#125;</span><br>ListNode* <span class="hljs-title function_">Find</span><span class="hljs-params">(ListNode* phead, DataType x)</span><br>&#123;<br>assert(phead-&gt;next != phead);<br>ListNode* pos = <span class="hljs-literal">NULL</span>;<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span>(cur!=phead)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;data==x)<br>&#123;<br>pos = cur;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">if</span>(pos)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到！\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没找到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(ListNode* pos, DataType x)</span><br>&#123;<br>assert(pos);<br>ListNode* newnode = BuyNewNode(x);<br>ListNode* head = pos-&gt;prev;<br>head-&gt;next = newnode;<br>newnode-&gt;prev = head;<br>newnode-&gt;next = pos;<br>pos-&gt;prev = newnode;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Erease</span><span class="hljs-params">(ListNode* pos)</span><br>&#123;<br>ListNode* Prev = pos-&gt;prev;<br>ListNode* Next = pos-&gt;next;<br>Prev-&gt;next = Next;<br>Next-&gt;prev = Prev;<br><span class="hljs-built_in">free</span>(pos);<br>pos = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, cur-&gt;data);<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br>sum++;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Destory</span><span class="hljs-params">(ListNode* phead)</span><br>&#123;<br>assert(phead);<br>ListNode* cur = phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur!=phead)<br>&#123;<br>ListNode* Next = cur-&gt;next;<br><span class="hljs-built_in">free</span>(cur);<br>cur = Next;<br>&#125;<br><span class="hljs-built_in">free</span>(phead);<br>phead = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h2><a id="testc_344"></a>🧨test.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;list.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Test1</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//ListNode* plist = NULL;</span><br>ListNode* plist = BuyNewNode(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//Init(&amp;plist);</span><br>PushFront(plist, <span class="hljs-number">1</span>);<br>PushFront(plist, <span class="hljs-number">2</span>);<br>PushFront(plist, <span class="hljs-number">3</span>);<br>PushBack(plist, <span class="hljs-number">4</span>);<br>Print(plist);<br>ListNode* pos= Find(plist,<span class="hljs-number">2</span>);<br>Insert(pos, <span class="hljs-number">200</span>);<br>Print(plist);<br>PopFront(plist);<br>Print(plist);<br>PopBack(plist);<br>Print(plist);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Size(plist));<br>Destory(plist);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>Test1();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="testc_374"></a>💖test.c的运行结果</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c4809dce264f4579b9bf06d0433b3426.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"/></p><hr/><h1><a id="_378"></a>🎉结语</h1><p>如果这篇文章有帮助的话请给我点个免费的赞呗。<br/> 如果有什么问题可以在评论区提问。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/934a0afdf56d428da9daf9278ca6a33d.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣leetcode 链表的中间结点 快慢指针解法</title>
    <link href="/2022/03/17/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3leetcode%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9%20%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95/"/>
    <url>/2022/03/17/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3leetcode%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9%20%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_5"></a>🧨前言</h1><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/498a175fe04a4da3bdd1883ddbf49364.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/2c5839cbeec34023b4b609b0b69ea89d.png"/></img></p><blockquote><p>本人目前是西安邮电大学计算机科学与技术专业一位普通的大学生,Q：1243032591<br/> 🧧如果大家觉得这篇文章有帮助的话给我点个免费的赞呗，如果能关注就更好了🧧</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/516d0e256a8a4a7b92a77b58c7051cbb.png"/></p><hr/><h1><a id="_17"></a>🎇题目描述</h1><blockquote><p>给定一个头结点为 head 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p>示例 1：</p><p>输入：[1,2,3,4,5] 输出：此列表中的结点 3 (序列化形式：[3,4,5]) 返回的结点值为 3 。<br/> (测评系统对该结点序列化表述是 [3,4,5])。 注意，我们返回了一个 ListNode 类型的对象 ans，这样： ans.val =<br/> 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next =<br/> NULL. 示例 2：</p><p>输入：[1,2,3,4,5,6] 输出：此列表中的结点 4 (序列化形式：[4,5,6]) 由于该列表有两个中间结点，值分别为 3 和<br/> 4，我们返回第二个结点。</p><p>来源：力扣（LeetCode）<br/> 链接：<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">https://leetcode-cn.com/problems/middle-of-the-linked-list</a></p></blockquote><hr/><h1><a id="_38"></a>🎈题目分析</h1><p><code>这个时候我们运用快慢指针的方式，fast走两步，slow走一步，这样当fast走到末尾的时候slow刚好走到中间</code></p><hr/><h1><a id="_43"></a>🎉代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">middleNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span>&#123;<span class="hljs-comment">//快慢指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">fast</span>=</span>head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">slow</span>=</span>head;<br>    <span class="hljs-keyword">while</span>(fast&amp;&amp;fast-&gt;next)<span class="hljs-comment">//fast走两步，slow走一步，判断fast-&gt;next!=NULL为了防止fast-&gt;next-&gt;next</span><br>                            <span class="hljs-comment">//  非法访问</span><br>    &#123;<br>        fast=fast-&gt;next-&gt;next;<br>        slow=slow-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_59"></a>🎉结语</h1><p>希望这篇博客对大家有帮助，都看到这了那就球球大家点个免费的赞不过分吧<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/ff024d230ea94a5fb2f4e3029234cc5f.png"/></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>链表</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣（LeetCode）之反转链表的题解</title>
    <link href="/2022/03/16/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3%EF%BC%88LeetCode%EF%BC%89%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/03/16/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/%E5%8A%9B%E6%89%A3%EF%BC%88LeetCode%EF%BC%89%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_6"></a>🎈前言：</h1><blockquote><p>本人目前是西安邮电大学计算机科学与技术专业一位普通的大学生,Q：1243032591<br/> 🧧如果大家觉得这篇文章有帮助的话给我点个免费的赞呗，如果能关注就更好了🧧<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/a5b1a91f14aee5e7b56e5891a61485f9.png#pic_center"/></p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/473aa0910bca4d11aea0d304b1da047c.png"/></p><hr/><h1><a id="_18"></a>🎄题目内容：</h1><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p>示例 1：<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/9817ea540c504528b0484364854184da.png"/></p><p>输入：head = [1,2,3,4,5]<br/> 输出：[5,4,3,2,1]<br/> 示例 2：</p><p><img alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-0Tpbrz4U-1647393656278)(C:\Users\pc\AppData\Roaming\Typora\typora-user-images\image-20220316084615678.png)]" src="https://img-blog.csdnimg.cn/a10c0a9670a748ed8217949cfd3e02e6.png"/></p><p>输入：head = [1,2]<br/> 输出：[2,1]<br/> 示例 3：</p><p>输入：head = []<br/> 输出：[]</p><p>来源：力扣（LeetCode）<br/> 链接：https://leetcode-cn.com/problems/reverse-linked-list</p><hr/><h1><a id="_47"></a>✨题目分析：</h1><p>我们先创建一个cur指针，然后创建Next指针记录head指针的下一个节点，然后将head-&gt;next指向cur，再把head赋值给cur，head=Next（在head不为空时就这样循环），最后返回cur。</p><h1><a id="_51"></a>🎁动图演示：</h1><p>做的不好请谅解。</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/a548df0e74f3422bafbb586f35b95b35.gif#pic_center"/></p><hr/><h1><a id="_66"></a>🧨代码实现：</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">reverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">cur</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(head)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">Next</span>=</span>head-&gt;next;<br>        head-&gt;next=cur;<br>        cur=head;<br>        head=Next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cur;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_86"></a>🎉结语：</h1><p>希望这篇博客对大家有帮助，都看到这了那就球球大家点个免费的赞不过分吧<img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/537080289b6b4e21b9fb4edee4785a12.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 力扣.26. 删除有序数组中的重复项（动图详解）</title>
    <link href="/2022/03/14/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/leetcode%20%E5%8A%9B%E6%89%A3.26.%20%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9%EF%BC%88%E5%8A%A8%E5%9B%BE%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
    <url>/2022/03/14/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/leetcode%20%E5%8A%9B%E6%89%A3.26.%20%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9%EF%BC%88%E5%8A%A8%E5%9B%BE%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_4"></a>✨前言</h1><blockquote><p>本人目前是西安邮电大学计算机科学与技术专业一位普通的大学生,Q：1243032591<br/> 🧧如果大家觉得这篇文章有帮助的话给我点个免费的赞呗，如果能关注就更好了🧧</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/873e64aaa8b34888903c84c082f63234.png"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/5f27a80278f84888a4cacfdc3a509ebc.png"/></img></p><hr/><h1><a id="_14"></a>🎄题目描述</h1><blockquote><p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序<br/> 应该保持 一致 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums<br/> 的前 k 个元素应该保存最终结果。</p><p>将最终结果插入 nums 的前 k 个位置后返回 k 。</p><p>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><p>判题标准:</p><p>系统会用下面的代码来测试你的题解:</p><p>int[] nums = […]; // 输入数组 int[] expectedNums = […]; // 长度正确的期望答案</p><p>int k = removeDuplicates(nums); // 调用</p><p>assert k == expectedNums.length; for (int i = 0; i &lt; k; i++) {<!-- --><br/> assert nums[i] == expectedNums[i]; } 如果所有断言都通过，那么您的题解将被 通过。</p><p>示例 1：</p><p>输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums<br/> 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例 2：</p><p>输入：nums = [0,0,1,1,1,2,2,3,3,4] 输出：5, nums = [0,1,2,3,4] 解释：函数应该返回新的长度<br/> 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p><p>提示：</p><p>0 &lt;= nums.length &lt;= 3 * 104<br/> -104 &lt;= nums[i] &lt;= 104 nums 已按 升序 排列</p></blockquote><hr/><h1><a id="_52"></a>🎄题目分析</h1><h2><a id="_53"></a>🎁文字分析</h2><p><code>这个时候我们用双指针法</code></p><blockquote><p>dst先走找不同<br/> <img alt="" src="https://img-blog.csdnimg.cn/33677e8030f6447ba854fc96f41c784a.png"/></p></blockquote><blockquote><p>如果两个数相等dst++</p></blockquote><blockquote><p>如果不相等就 src++，然后把dst位置的值放给src位置</p></blockquote><blockquote><p>src指的是位置，所以大小得 src+1，比如两个数据数组最大下标为1，返回数组大小要给最大的下标加一</p></blockquote><h2><a id="_65"></a>🎉动图分析</h2><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/dca3217e2f434a40b527947e8e714b78.gif#pic_center"/></p><hr/><h1><a id="_72"></a>🎄代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>    <span class="hljs-type">int</span> src=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> dst =<span class="hljs-number">1</span>;<span class="hljs-comment">//dst先走找不同</span><br>    <span class="hljs-keyword">while</span>(dst&lt;numsSize)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[dst]==nums[src])<span class="hljs-comment">//如果两个数相等dst++</span><br>        &#123;<br>            dst++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//如果不相等就 src++，然后把dst位置的值放给src位置</span><br>        &#123;<br>            src++;<br>            nums[src]=nums[dst];<br>            dst++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (src+<span class="hljs-number">1</span>); <span class="hljs-comment">// src指的是位置，所以大小得 src+1，比如两个数据数组最大下标为1，返回数组大小要给最大的下标加一</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1><a id="_94"></a>🎈结语</h1><p><code>大家都看到这里了求个赞不过分吧🧧</code><br/> <img alt="" src="https://img-blog.csdnimg.cn/cd7a5c626be34925aa6a1dd9fae03c2e.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>带你理解单链表（如果对你有帮助的话请点赞呗）</title>
    <link href="/2022/03/13/categories/C%E8%AF%AD%E8%A8%80/%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%A6%82%E6%9E%9C%E5%AF%B9%E4%BD%A0%E6%9C%89%E5%B8%AE%E5%8A%A9%E7%9A%84%E8%AF%9D%E8%AF%B7%E7%82%B9%E8%B5%9E%E5%91%97%EF%BC%89/"/>
    <url>/2022/03/13/categories/C%E8%AF%AD%E8%A8%80/%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%A6%82%E6%9E%9C%E5%AF%B9%E4%BD%A0%E6%9C%89%E5%B8%AE%E5%8A%A9%E7%9A%84%E8%AF%9D%E8%AF%B7%E7%82%B9%E8%B5%9E%E5%91%97%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_3"></a>🧨前言</h1><blockquote><p>本人目前是西安邮电大学计算机科学与技术专业一位普通的大学生,<code>Q：1243032591</code><br/> <a href="https://gitee.com/jdasdasd">🧧我的码云主页点击这里🧧</a></p></blockquote><p>这篇文章是我关于单链表写的文章，如果大家对于单链表的概念还不是很熟的话请点击这里<br/> 👉<a href="https://blog.csdn.net/m0_57723028/article/details/123445484?spm=1001.2014.3001.5502">个人对于单链表的简单理解</a><br/> 按照我之前写代码的惯例，这次依旧分为三个文件<code> Sqlist.c Sqlist.h test.c</code><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c16d3a3790d74e6d8e7fcb231cd751fd.png"/></p><hr/><h1><a id="Sqlisth_14"></a>🚂Sqlist.h(函数声明，并且引用头文件和创建结构体)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> datatype;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span></span><br><span class="hljs-class">&#123;</span><br>datatype data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span>* <span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span> <span class="hljs-title">Sqt</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPrint</span><span class="hljs-params">(Sqt* cur)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPushback</span><span class="hljs-params">(Sqt** pphead, datatype x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPushFront</span><span class="hljs-params">(Sqt** pphead, datatype x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopFront</span><span class="hljs-params">(Sqt** pphead)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopBack</span><span class="hljs-params">(Sqt** pphead)</span>;<br>Sqt* <span class="hljs-title function_">SqlistFind</span><span class="hljs-params">(Sqt*phead, datatype x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistInsert</span><span class="hljs-params">(Sqt** pphead,Sqt* pos, datatype x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistErase</span><span class="hljs-params">(Sqt** pphead, Sqt* pos)</span>;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="SqlistcSqlisth_38"></a>⏩Sqlist.c（实现函数功能，用的时候记得包含Sqlist.h）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Sqlist.h&quot;</span></span><br>Sqt* <span class="hljs-title function_">BuyNode</span><span class="hljs-params">(datatype x)</span><br>&#123;<br>Sqt* NewNode = (Sqt*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Sqt));<br><span class="hljs-keyword">if</span> (NewNode != <span class="hljs-literal">NULL</span>)<br>&#123;<br>NewNode-&gt;data = x;<br>NewNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">return</span> NewNode;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPushback</span><span class="hljs-params">(Sqt** pphead,datatype x)</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>Sqt* tail = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br>*pphead = NewNode;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>tail = *pphead;<br><span class="hljs-keyword">while</span> (tail-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>tail = tail-&gt;next;<br>&#125;<br>tail-&gt;next = NewNode;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span>  <span class="hljs-title function_">SqlistPushFront</span><span class="hljs-params">(Sqt** pphead, datatype x)</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>NewNode-&gt;next = *pphead;<br>*pphead = NewNode;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPrint</span><span class="hljs-params">(Sqt* cur)</span><br>&#123;<br><span class="hljs-keyword">while</span> (cur!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, cur-&gt;data);<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopFront</span><span class="hljs-params">(Sqt** pphead)</span><br>&#123;<br>Sqt* Next = (*pphead)-&gt;next;<br><span class="hljs-built_in">free</span>(*pphead);<br>*pphead = Next;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopBack</span><span class="hljs-params">(Sqt** pphead)</span><br>&#123;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*pphead)-&gt;next==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(*pphead);<br>*pphead = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* pre = <span class="hljs-literal">NULL</span>;<br>Sqt* tail = *pphead;<br><span class="hljs-keyword">while</span> (tail-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>pre = tail;<br>tail = tail-&gt;next;<br>&#125;<br><span class="hljs-built_in">free</span>(tail);<br>pre-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>Sqt* <span class="hljs-title function_">SqlistFind</span><span class="hljs-params">(Sqt* phead, datatype x)</span><br>&#123;<br>Sqt* cur = phead;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;data == x)<br><span class="hljs-keyword">return</span> cur;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistInsert</span><span class="hljs-params">(Sqt** pphead, Sqt* pos, datatype x)</span><br>&#123;<br><span class="hljs-keyword">if</span> (pos == *pphead)<br>&#123;<br>SqlistPushFront(pphead,x);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>Sqt* pre = *pphead;<br><span class="hljs-keyword">while</span> (pre-&gt;next != pos)<br>&#123;<br>pre = pre-&gt;next;<br>&#125;<br>pre-&gt;next = NewNode;<br>NewNode-&gt;next = pos;<br>&#125;<br><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistErase</span><span class="hljs-params">(Sqt** pphead, Sqt* pos)</span><br>&#123;<br><span class="hljs-keyword">if</span>(*pphead==pos)<br>SqlistPopFront(pphead);<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* pre = *pphead;<br><span class="hljs-keyword">while</span> (pre-&gt;next != pos)<br>&#123;<br>pre = pre-&gt;next;<br>&#125;<br>pre-&gt;next = pos-&gt;next;<br><span class="hljs-built_in">free</span>(pos);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_testcSqlisth_164"></a>🌹 test.c(输入数据并且测试,用的时候记得包含Sqlist.h)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Sqlist.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistTest</span><span class="hljs-params">( )</span><br>&#123;<br>Sqt* plist = <span class="hljs-literal">NULL</span>;<br>SqlistPushback(&amp;plist,<span class="hljs-number">1</span>);<br>SqlistPushback(&amp;plist,<span class="hljs-number">2</span>);<br>SqlistPushback(&amp;plist,<span class="hljs-number">3</span>);<br>SqlistPushFront(&amp;plist, <span class="hljs-number">0</span>);<br>SqlistPrint(plist);<br>Sqt* pos = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">/*if (pos)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">SqtlistErase(&amp;plist, pos);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">SqlistPrint(plist);*/</span><br>pos = SqlistFind(plist, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (pos)<br>&#123;<br>SqtlistInsert(&amp;plist, pos, <span class="hljs-number">5</span>);<br>&#125;<br>SqlistPrint(plist);<br><span class="hljs-comment">/*SqlistPopFront(&amp;plist);</span><br><span class="hljs-comment">SqlistPrint(plist);</span><br><span class="hljs-comment">SqlistPopFront(&amp;plist);</span><br><span class="hljs-comment">SqlistPrint(plist);</span><br><span class="hljs-comment">SqlistPopBack(&amp;plist);</span><br><span class="hljs-comment">SqlistPrint(plist);</span><br><span class="hljs-comment">SqlistPopBack(&amp;plist);</span><br><span class="hljs-comment">SqlistPrint(plist);</span><br><span class="hljs-comment">SqlistPopBack(&amp;plist);</span><br><span class="hljs-comment">SqlistPrint(plist);*/</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>SqlistTest();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_208"></a>🍕接下来是单链表中的函数具体实现</h1><h3><a id="_209"></a>🦺插入数据</h3><h4><a id="_BuyNode_210"></a>🚂申请空间 BuyNode</h4><p><code>单链表每次插入数据都要申请一块空间，可以理解为火车要装货物得用车厢装货物然后将单节车厢连接到火车后面</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Sqt* <span class="hljs-title function_">BuyNode</span><span class="hljs-params">(datatype x)</span><br>&#123;<br>Sqt* NewNode = (Sqt*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Sqt));<br><span class="hljs-keyword">if</span> (NewNode != <span class="hljs-literal">NULL</span>)<br>&#123;<br>NewNode-&gt;data = x;<br>NewNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">return</span> NewNode;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h4><a id="_SqlistPushFront_225"></a>🚂头插 SqlistPushFront</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>  <span class="hljs-title function_">SqlistPushFront</span><span class="hljs-params">(Sqt** pphead, datatype x)</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>NewNode-&gt;next = *pphead;<br>*pphead = NewNode;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h4><a id="_SqlistPushback_235"></a>🚂尾插 SqlistPushback</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPushback</span><span class="hljs-params">(Sqt** pphead,datatype x)</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>Sqt* tail = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br>*pphead = NewNode;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>tail = *pphead;<br><span class="hljs-keyword">while</span> (tail-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>tail = tail-&gt;next;<br>&#125;<br>tail-&gt;next = NewNode;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h4><a id="_SqtlistInsert_257"></a>🚂在指定数据之前插入数据 SqtlistInsert</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistInsert</span><span class="hljs-params">(Sqt** pphead, Sqt* pos, datatype x)</span><br>&#123;<br><span class="hljs-keyword">if</span> (pos == *pphead)<br>&#123;<br>SqlistPushFront(pphead,x);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* NewNode = BuyNode(x);<br>Sqt* pre = *pphead;<br><span class="hljs-keyword">while</span> (pre-&gt;next != pos)<br>&#123;<br>pre = pre-&gt;next;<br>&#125;<br>pre-&gt;next = NewNode;<br>NewNode-&gt;next = pos;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h3><a id="_280"></a>🚂删除数据</h3><h4><a id="_SqlistPopFront_281"></a>🚂头删 SqlistPopFront</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopFront</span><span class="hljs-params">(Sqt** pphead)</span><br>&#123;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>Sqt* Next = (*pphead)-&gt;next;<br><span class="hljs-built_in">free</span>(*pphead);<br>*pphead = Next;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h4><a id="_SqlistPopBack_295"></a>🚂尾删 SqlistPopBack</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPopBack</span><span class="hljs-params">(Sqt** pphead)</span><br>&#123;<br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*pphead)-&gt;next==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(*pphead);<br>*pphead = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* pre = <span class="hljs-literal">NULL</span>;<br>Sqt* tail = *pphead;<br><span class="hljs-keyword">while</span> (tail-&gt;next!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>pre = tail;<br>tail = tail-&gt;next;<br>&#125;<br><span class="hljs-built_in">free</span>(tail);<br>pre-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h4><a id="_SqtlistErase_323"></a>🚂删除指定数据 SqtlistErase</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqtlistErase</span><span class="hljs-params">(Sqt** pphead, Sqt* pos)</span><br>&#123;<br><span class="hljs-keyword">if</span>(*pphead==pos)<br>SqlistPopFront(pphead);<br><span class="hljs-keyword">else</span><br>&#123;<br>Sqt* pre = *pphead;<br><span class="hljs-keyword">while</span> (pre-&gt;next != pos)<br>&#123;<br>pre = pre-&gt;next;<br>&#125;<br>pre-&gt;next = pos-&gt;next;<br><span class="hljs-built_in">free</span>(pos);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr/><h3><a id="_SqlistFind_342"></a>🚂查找数据 SqlistFind</h3><p><code>如果找到了的话返回该节点的指针（地址），如果找不到就返回NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">Sqt* <span class="hljs-title function_">SqlistFind</span><span class="hljs-params">(Sqt* phead, datatype x)</span><br>&#123;<br>Sqt* cur = phead;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;data == x)<br><span class="hljs-keyword">return</span> cur;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h3><a id="_SqlistPrint_358"></a>🚂打印数据 SqlistPrint</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SqlistPrint</span><span class="hljs-params">(Sqt* cur)</span><br>&#123;<br><span class="hljs-keyword">while</span> (cur!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, cur-&gt;data);<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr/><h1><a id="_371"></a>🎉结语</h1><p>单链表这一期就完结撒花啦🍻，很感谢大家能看到这里，希望这篇文章对大家有帮助，如果大家有什么好的见解或者有什么疑问的话欢迎大家评论或者联系我。<br/> <img alt="" src="https://img-blog.csdnimg.cn/adb8d927d1914610a2edbea2dc176aa5.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于单链表的简单解释</title>
    <link href="/2022/03/12/categories/C%E8%AF%AD%E8%A8%80/%E5%AF%B9%E4%BA%8E%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <url>/2022/03/12/categories/C%E8%AF%AD%E8%A8%80/%E5%AF%B9%E4%BA%8E%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c8e304936b3c4054a78b5e89a1294fd3.png#pic_center"/></p><hr/><p></p><p></p><hr/><h1><a id="_8"></a>前言</h1><p><strong>本人目前也只是一个普通的大学生，所以难免会有错误，如有错误请指出，感谢！！！</strong><br/> <strong>如果大家有什么疑问或者见解可交流：q:1243032591</strong></p><hr/><p><code>提示：以下是本篇文章正文内容，下面案例可供参考</code></p><h1><a id="_16"></a>一、🎈链表是什么？</h1><p><strong>先上图片：</strong><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/a46d5b9ece2f4156b93f0bb4adceccc1.png"><br/> 链表刚开始是挺难理解的，相信大家一定听过学校老师讲链表了，我说一下我个人的理解：<br/> <strong>个人对于链表的理解就是类似于火车🚂</strong>，一个节点连着一个节点，就像火车🚂 一节车厢连着一节车厢，火车最后一节车厢链接着空气，链表最后一个节点连接着<strong>NULL</strong></img></p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/635fd3b2b63944e290b225f47915d537.png"/></p><h1><a id="_28"></a>二、🎈用结构体创建单链表</h1><p>代码如下（示例）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> datatype;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span></span><br><span class="hljs-class">&#123;</span><br>datatype data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span>* <span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqlistNode</span> <span class="hljs-title">Sqt</span>;</span><br><br></code></pre></td></tr></table></figure><p><code>对于上面结构体的解释</code><br/> <strong>typedef int datatype</strong>: 把int重命名为daratype，这样做的好处就是 如果以后要改数据类型不用在 代码里面改，直接将typedef int datatype 中的int 改为 double/float/char…之类的类型。<br/> <strong>datatype data</strong>: 结构体里的数据。<br/> <em><em>struct SqlistNode</em> next</em>*:存放下一个节点的地址，最后一个节点的<code>next=NULL</code>也可以理解为指向下一个节点的指针，<code>最后一个节点的指向下一个节点的指针指向空</code><br/> <strong>typedef struct SqlistNode Sqt</strong>: 将结构体的名字简写为Sqt 类似于起小名，<code>比如一个人叫尼古拉斯洪都拉斯，这个名字很长，我们起了一个小名叫小尼，把他叫做小尼</code></p><h1><a id="_46"></a>总结</h1><p><code>这篇文章先到这里了，文章子数多了大家也看不下去，下篇文章更新如何使用单链表</code></p><p>以上就是今天要讲的内容，本文仅仅简单介绍了对于单链表的理解以及单链表的创建，希望可以帮助到大家。</p><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/aac00502198742fca5e58af225f1ae68.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>visual studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构之顺序表的增删查改</title>
    <link href="/2022/03/11/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/"/>
    <url>/2022/03/11/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<p></p><p></p><hr/><h1><a id="_5"></a>前言</h1><p>这是我对于数据结构顺序表的增删查改理解以及代码实现<br/> 首先分为三个文件。<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c20bfff79261438a842be33bd0b58ea8.png"/></p><hr/><h1><a id="Seqlisth_13"></a>一、Seqlist.h</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> SLDateType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span></span><br><span class="hljs-class">&#123;</span><br>SLDateType* a;<br><span class="hljs-type">size_t</span> size;<span class="hljs-comment">//无符号整形</span><br><span class="hljs-type">size_t</span> capacity;<br>&#125;SeqList;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListInit</span><span class="hljs-params">(SeqList* ps)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListDestory</span><span class="hljs-params">(SeqList* ps)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPrint</span><span class="hljs-params">(SeqList* ps)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPushBack</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPushFront</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPopFront</span><span class="hljs-params">(SeqList* ps)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPopBack</span><span class="hljs-params">(SeqList* ps)</span>;<br><br><span class="hljs-comment">// 顺序表查找</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">SeqListFind</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span>;<br><span class="hljs-comment">// 顺序表在pos位置插入x</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListInsert</span><span class="hljs-params">(SeqList* ps, <span class="hljs-type">size_t</span> pos, SLDateType x)</span>;<br><span class="hljs-comment">// 顺序表删除pos位置的值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListErase</span><span class="hljs-params">(SeqList* ps, <span class="hljs-type">size_t</span> pos)</span>;<br><br></code></pre></td></tr></table></figure><h1><a id="Seqlistc_46"></a>二、函数功能的实现（Seqlist.c）</h1><h2><a id="1pos_SeqListInsert_47"></a>1.顺序表在pos位置插入 （SeqListInsert）</h2><p>注意size_t是无符号整形，-1为111111111111111111111111111111111111<br/> 代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListInsert</span><span class="hljs-params">(SeqList* ps, <span class="hljs-type">size_t</span> pos, SLDateType x)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">if</span> (pos &gt; ps-&gt;size)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pos越界了%d\n&quot;</span>,pos);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>SeqListCheckCapacity(ps);<span class="hljs-comment">//插入前一定要检查空间够不够用</span><br><br><span class="hljs-type">size_t</span> end = ps-&gt;size;<br><span class="hljs-keyword">while</span> (end &gt; pos)<span class="hljs-comment">//这是while不是if</span><br>&#123;<br>ps-&gt;a[end] = ps-&gt;a[end - <span class="hljs-number">1</span>];<br>--end;<br>&#125;<br>ps-&gt;a[pos] = x;<br>ps-&gt;size++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="2pos0_74"></a>2.头插（在pos=0处插入）</h2><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPushFront</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span><br>&#123;<br>assert(ps);<br>SeqListInsert(ps, <span class="hljs-number">0</span>, x);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="3possize_83"></a>3.尾插（在pos=size处插入）</h2><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPushBack</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span><br>&#123;<br>assert(ps);<br>SeqListInsert(ps, ps-&gt;size, x);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="4_pos_92"></a>4. 顺序表在pos位置删除</h2><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListErase</span><span class="hljs-params">(SeqList* ps, <span class="hljs-type">size_t</span> pos)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">if</span> (pos &gt; ps-&gt;size)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;越界了\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">size_t</span> begin = pos+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(begin &lt; ps-&gt;size)<span class="hljs-comment">//这是while不是if</span><br>&#123;<br>ps-&gt;a[begin<span class="hljs-number">-1</span>] = ps-&gt;a[begin];<br>begin++;<br>&#125;<br><span class="hljs-keyword">if</span> (ps-&gt;size &gt; <span class="hljs-number">0</span>)<br>&#123;<br>ps-&gt;size--;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="5pos0_116"></a>5头删（在pos=0处删除）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPopFront</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br>SeqListErase(ps, <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="6possize1_125"></a>6.尾删（在pos=size-1处删除）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPopBack</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br>SeqListErase(ps, ps-&gt;size<span class="hljs-number">-1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="7_134"></a>7.销毁顺序表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListDestory</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-built_in">free</span>(ps-&gt;a);<br>ps-&gt;a = <span class="hljs-literal">NULL</span>;<br>ps-&gt;size = ps-&gt;capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="8_145"></a>8.查找数据所在位置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">SeqListFind</span><span class="hljs-params">(SeqList* ps, SLDateType x)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ps-&gt;size; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (ps-&gt;a[i] == x)<br>&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="9_161"></a>9.初始化顺序表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListInit</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br>ps-&gt;a = <span class="hljs-literal">NULL</span>;<br>ps-&gt;capacity = <span class="hljs-number">0</span>;<br>ps-&gt;size = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="10_172"></a>10.打印顺序表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListPrint</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ps-&gt;size; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ps-&gt;a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="11_186"></a>11.检查空间够不够用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SeqListCheckCapacity</span><span class="hljs-params">(SeqList* ps)</span><br>&#123;<br>assert(ps);<br><span class="hljs-keyword">if</span> (ps-&gt;size == ps-&gt;capacity)<br>&#123;<br><span class="hljs-type">size_t</span> newCapacity = ps-&gt;capacity==<span class="hljs-number">0</span>?<span class="hljs-number">4</span>:ps-&gt;capacity*<span class="hljs-number">2</span>;<br>SLDateType* tmp = <span class="hljs-built_in">realloc</span>(ps-&gt;a,<span class="hljs-keyword">sizeof</span>(SLDateType)*newCapacity);<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;realloc fail\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ps-&gt;a = tmp;<br>ps-&gt;capacity = newCapacity;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1><a id="_210"></a>总结</h1><p>顺序表其实就是结构体里加了个数组（int*a）。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于数据在内存中的理解</title>
    <link href="/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%AF%B9%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%AF%B9%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/d3c1d35993044c8eac4f7dc9b9f94f8f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>说明：结构体向最长的char对齐，前两个位段元素一共4+2位，不足8位，合起来占1字节，最后一个单独1字节，一共3字节。另外，#define执行的是查找替换， sizeof(struct _Record_Struct) * MAX_SIZE这个语句其实是3*2+3，结果为9，故选D。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/444df96356b647048180c1fae52739d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>puc是一个char数组，每次跳转一个字节，结构体不是，它只有第一个元素单独享用一字节，其他三个元素一起共用一字节，所以puc被结构体填充后，本身只有两个字节会被写入，后两个字节肯定是0，至此AD排除，然后第一个字节是2就是2了，第二个字节比较麻烦，首先ucData0给了3其实是越界了，1位的数字只能是0或1，所以11截断后只有1，同理ucData1给的4也是越界的，100截断后是00，只有5的101是正常的。填充序列是类似小端的低地址在低位，所以排列顺序是00 101 00 1。也就是0010 1001，即0x29，故选B。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/616404954ff74a458165f416c2675065.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>结构体向int对齐，7个short一共是14字节，对齐后是16字节。n是单独的4字节，由于是union，所以n与s共用空间，只取最长的元素，故占用16字节。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/bf32df514c35481ca1e82bb3e6663ec1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>union只有2字节，2字节的十六进制只有4位，所以答案CD排除。而位顺序类似小端，低地址在低处，所以39是低地址，在低位，38在高位，所以是3839，故选A。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/f092ab13889641408a8c1cfe0ccff4c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>说明：不释放会产生内存碎片，小型程序可以不关注，但是在中大型程序上影响极其深刻。故选D。AB是函数的基本功能，C选项比较特殊，malloc(0)是允许的，也会返回一个指针，只是没有空间所以不可使用而已。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/32eb5597a2a74d629f5f82ba24c3f08b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_18,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>基本概念。动态内存分配都是在堆上分配的。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/0e6b8f6deaa642b083bc90acff1a9c2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>枚举默认从0开始，所以X1是0，故Y1是1，给了数字后会根据数字向后推，那么Z1是255，A1是256，所以B1是257，故选B。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/5c4629ddd7c64145ad87ea123ba674db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>realloc在操作过程中是释放旧空间分配并返回新空间，所以返回的新空间也是需要释放的，故选D。AB是malloc和calloc的区别。C是realloc的基础功能。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序的编译</title>
    <link href="/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91/"/>
    <url>/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/5fd979321e6e4fe39e17517addaa4360.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"><br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/baee668f2ea9456ba14a146db00cb131.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></img></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态内存管理</title>
    <link href="/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2><a id="C__void_mallocsize_t_size__0"></a>C 库函数 void *malloc(size_t size) 分配所需的内存空间，并返回一个指向它的指针。</h2><p>声明<br/> 下面是 malloc() 函数的声明。</p><p>void *malloc(size_t size)<br/> 参数<br/> size – 内存块的大小，以字节为单位。<br/> 返回值<br/> 该函数返回一个指针 ，指向已分配大小的内存。如果请求失败，则返回 NULL。</p><p>实例<br/> 下面的实例演示了 malloc() 函数的用法。</p><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">char</span> *str;<br> <br>   <span class="hljs-comment">/* 最初的内存分配 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">15</span>);<br>   <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;runoob&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %u\n&quot;</span>, str, str);<br> <br>   <span class="hljs-comment">/* 重新分配内存 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">realloc</span>(str, <span class="hljs-number">25</span>);<br>   <span class="hljs-built_in">strcat</span>(str, <span class="hljs-string">&quot;.com&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %u\n&quot;</span>, str, str);<br> <br>   <span class="hljs-built_in">free</span>(str);<br> <br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>让我们编译并运行上面的程序，这将产生以下结果：</p><blockquote><p>String = runoob, Address = 3662685808 String = runoob.com, Address =<br/> 3662685808</p></blockquote><p>C 库函数 - realloc()<br/> C 标准库 - &lt;stdlib.h&gt; C 标准库 - &lt;stdlib.h&gt;</p><p>描述</p><h2><a id="C__void_reallocvoid_ptr_size_t_size__malloc__calloc__ptr__51"></a>C 库函数 void *realloc(void *ptr, size_t size) 尝试重新调整之前调用 malloc 或 calloc 所分配的 ptr 所指向的内存块的大小。</h2><p>声明<br/> 下面是 realloc() 函数的声明。</p><p>void *realloc(void *ptr, size_t size)<br/> 参数<br/> ptr – 指针指向一个要重新分配内存的内存块，该内存块之前是通过调用 malloc、calloc 或 realloc 进行分配内存的。如果为空指针，则会分配一个新的内存块，且函数返回一个指向它的指针。<br/> size – 内存块的新的大小，以字节为单位。如果大小为 0，且 ptr 指向一个已存在的内存块，则 ptr 所指向的内存块会被释放，并返回一个空指针。<br/> 返回值<br/> 该函数返回一个指针 ，指向重新分配大小的内存。如果请求失败，则返回 NULL。</p><p>实例<br/> 下面的实例演示了 realloc() 函数的用法。</p><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">char</span> *str;<br> <br>   <span class="hljs-comment">/* 最初的内存分配 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">15</span>);<br>   <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;runoob&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %p\n&quot;</span>, str, str);<br> <br>   <span class="hljs-comment">/* 重新分配内存 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">realloc</span>(str, <span class="hljs-number">25</span>);<br>   <span class="hljs-built_in">strcat</span>(str, <span class="hljs-string">&quot;.com&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %p\n&quot;</span>, str, str);<br> <br>   <span class="hljs-built_in">free</span>(str);<br>   <br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>让我们编译并运行上面的程序，这将产生以下结果：</p><blockquote><p>String = runoob, Address = 0x7fa2f8c02b10 String = runoob.com,<br/> Address = 0x7fa2f8c02b10</p></blockquote><h2><a id="C___calloc_98"></a>C 库函数 - calloc()</h2><p>C 标准库 - &lt;stdlib.h&gt; C 标准库 - &lt;stdlib.h&gt;</p><p>描述<br/> C 库函数 void *calloc(size_t nitems, size_t size) 分配所需的内存空间，并返回一个指向它的指针。malloc 和 calloc 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</p><p>声明<br/> 下面是 calloc() 函数的声明。</p><p>void *calloc(size_t nitems, size_t size)<br/> 参数<br/> nitems – 要被分配的元素个数。<br/> size – 元素的大小。<br/> 返回值<br/> 该函数返回一个指针，指向已分配的内存。如果请求失败，则返回 NULL。</p><p>实例<br/> 下面的实例演示了 calloc() 函数的用法。</p><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">int</span> i, n;<br>   <span class="hljs-type">int</span> *a;<br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;要输入的元素个数：&quot;</span>);<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br> <br>   a = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入 %d 个数字：\n&quot;</span>,n);<br>   <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span> ; i &lt; n ; i++ ) <br>   &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>   &#125;<br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的数字为：&quot;</span>);<br>   <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span> ; i &lt; n ; i++ ) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>   &#125;<br>   <span class="hljs-built_in">free</span> (a);  <span class="hljs-comment">// 释放内存</span><br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>让我们编译并运行上面的程序，这将产生以下结果：</p><blockquote><p>要输入的元素个数：3 输入 3 个数字： 22 55 14 输入的数字为：22 55 14</p></blockquote><h2><a id="C__void_freevoid_ptr__callocmalloc__realloc__152"></a>C 库函数 void free(void *ptr) 释放之前调用 calloc、malloc 或 realloc 所分配的内存空间。</h2><p>声明<br/> 下面是 free() 函数的声明。</p><p>void free(void *ptr)<br/> 参数<br/> ptr – 指针指向一个要释放内存的内存块，该内存块之前是通过调用 malloc、calloc 或 realloc 进行分配内存的。如果传递的参数是一个空指针，则不会执行任何动作。<br/> 返回值<br/> 该函数不返回任何值。</p><p>实例<br/> 下面的实例演示了 free() 函数的用法。</p><p>实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">char</span> *str;<br> <br>   <span class="hljs-comment">/* 最初的内存分配 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">15</span>);<br>   <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;runoob&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %p\n&quot;</span>, str, str);<br> <br>   <span class="hljs-comment">/* 重新分配内存 */</span><br>   str = (<span class="hljs-type">char</span> *) <span class="hljs-built_in">realloc</span>(str, <span class="hljs-number">25</span>);<br>   <span class="hljs-built_in">strcat</span>(str, <span class="hljs-string">&quot;.com&quot;</span>);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String = %s,  Address = %p\n&quot;</span>, str, str);<br> <br>   <span class="hljs-comment">/* 释放已分配的内存 */</span><br>   <span class="hljs-built_in">free</span>(str);<br> <br>   <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>让我们编译并运行上面的程序，这将产生以下结果：</p><blockquote><p>String = runoob, Address = 0x7fe4e4c02b10 String = runoob.com,<br/> Address = 0x7fe4e4c02b10</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宏定义和函数</title>
    <link href="/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2022/02/27/categories/C%E8%AF%AD%E8%A8%80/%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>以下资源来自比特就业课：</strong><br/> <img alt="#define执行查找替换，#if可以区分是否编译，#undef可以反定义，也就是取消#define宏定义的东西，#end并没有这玩意，只有#endif，故选D。" src="https://img-blog.csdnimg.cn/5eddfc80eb17409f983cc91dcc67331c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>#define执行查找替换，#if可以区分是否编译，#undef可以反定义，也就是取消#define宏定义的东西，#end并没有这玩意，只有#endif，故选D。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/3be8923b742548d6a9dddc57762c6f41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>前三个是常用宏，分别是：打印所在文件、打印编译时间、打印编译日期。除此之外，还有__LINE__（行号）、<strong>FUNCTION</strong>（函数名）等宏，而__MAIN__并不存在，故选D</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/88294311c29e468baa602b2e7d4aabc0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>概念性问题，这个做法本就是解决同一文件重复包含相同头文件的，选A。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/32139e1b3b364b848d6f25c6c43cde23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>Y(5+1)经过替换后是((N+2)*5+1)，其中N是4，所以结果是31，2 * (4 + 31)结果为70，选D。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/d7d05abb971c4964beac56cccb408f0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>宏C预处理后的代码是：2+2*3+3，即2+6+3，等于11，选B。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/2d1a680187b648d9b780f7bcffa77a57.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>宏不存在执行速度，它是查找替换，选C。A中宏是查找替换，无法设定递归跳出条件，自然无法递归。B中宏是查找替换，都没有执行，类型更是无从谈起。D中直接说了宏的本质。所以只要知道了宏是查找替换，其他问题也就不是问题了。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/94d46743cbae4ecaaf79c82f1c647c06.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>A是宏定义，C是一个比较复杂的预编译语句，但跟条件肯定扯不上关系，D是报错用的，条件编译指令包括#if、#ifdef，#ifndef，#else，#elif、#endif等。除此之外还有#if defined(xxx)的用法。故选B。</p></blockquote><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/b1e31729fddf4da398490d9e69cb6506.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><blockquote><p>AB说反了，尖括号是直接去库找，双引号是先从当前目录找，再去库里找。C选项头文件不能定义全局变量，否则如果有多个文件，那链接时会冲突。故选D。D也不是十全十美，在大型项目的开发中，这也并不是一个很好的编程习惯，分类放在不同的头文件并根据特点命名是更好的选择，因为这样更加方便代码的管理和维护，就目前而言，算是一个好习惯吧。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>visual studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向循环链表实现—通讯录（学生管理系统，自行车管理系统，影院管理系统）—C语言课设（万能模板）—数据结构—用文件存储数据</title>
    <link href="/2022/02/11/categories/C%E8%AF%AD%E8%A8%80/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E2%80%94%E9%80%9A%E8%AE%AF%E5%BD%95%EF%BC%88%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BD%B1%E9%99%A2%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89%E2%80%94C%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE%EF%BC%88%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF%EF%BC%89%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E7%94%A8%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/02/11/categories/C%E8%AF%AD%E8%A8%80/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E2%80%94%E9%80%9A%E8%AE%AF%E5%BD%95%EF%BC%88%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%BD%B1%E9%99%A2%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89%E2%80%94C%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE%EF%BC%88%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF%EF%BC%89%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E7%94%A8%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>大家好，如果觉得我这篇文章写的不错并且对你有帮助的话就关注一下呗。<br/> <a href="https://blog.csdn.net/m0_57723028/article/details/122032368?spm=1001.2014.3001.5502">这是我关于双向循环链表的博客，可以点进去康康啦</a> <br/> 编译器是VS2019，依旧是分为三个文件<br/> 我先把三个文件的原码放出来，然后对于函数 一 一 解释。</p><h2><a id="_4"></a>申请空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> Contact* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span>* sex, <span class="hljs-type">char</span>* tel, <span class="hljs-type">char</span>* adr)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Contact</span>* <span class="hljs-title">newnode</span> =</span> (<span class="hljs-keyword">struct</span> Contact*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Contact));<br>assert(newnode);<br>newnode-&gt;next = newnode;<br>newnode-&gt;front = newnode;<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;name , name);<br>newnode-&gt;age = age;<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;sex , sex);<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;tel , tel);<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;adr , adr);<br><span class="hljs-keyword">return</span> newnode;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="_22"></a>先将文件中的数据存到链表中</h2><blockquote><p>这里用 feof判断文件光标后面是否有内容，如果光标后面没有内容则返回非0，如果有内容则返回0，党光标后面有内容的时候我们需要读取文件，所以循环条件为 while(!feof)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SaveFileData</span><span class="hljs-params">(PC*phead)</span><br>&#123;<br><br>FILE* fp = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>assert(phead);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, strerror(errno));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>getc(fp);<br><span class="hljs-keyword">if</span> (!feof(fp))<br>&#123;<br>rewind(fp);<br>&#125;<br><span class="hljs-keyword">while</span> (!feof(fp))<br>&#123;<br><br>PC* newnode = BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;(newnode-&gt;age));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;tel);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;adr);<br>PC* head = phead-&gt;front;<br>head-&gt;next = newnode;<br>newnode-&gt;front = head;<br>newnode-&gt;next = phead;<br>phead-&gt;front = newnode;<br>&#125;<br>fclose(fp);<br>fp = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="1_62"></a>1.添加联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ADDPc</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>PC* newnode = BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br>assert(phead);<br>assert(newnode);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入姓名\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入年龄\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(newnode-&gt;age));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入性别\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;sex);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入电话\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;tel);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入地址\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;adr);<br>PC* head = phead-&gt;front;<br>head-&gt;next = newnode;<br>newnode-&gt;front = head;<br>newnode-&gt;next = phead;<br>phead-&gt;front = newnode;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;添加成功\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="2_89"></a>2.删除联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DelPc</span><span class="hljs-params">(PC* pos)</span><br>&#123;<br>assert(pos);<br>PC* Front = pos-&gt;front;<br>PC* Next = pos-&gt;next;<br>Front-&gt;next = Next;<br>Next-&gt;front = Front;<br><span class="hljs-built_in">free</span>(pos);<br>pos = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="3_103"></a>3.查找联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">PC* <span class="hljs-title function_">Find_by_name</span><span class="hljs-params">( PC* phead, <span class="hljs-type">char</span>* name)</span><br>&#123;<br>assert(phead);<br>PC* pos = phead-&gt;next;<br><span class="hljs-keyword">while</span> (pos !=phead)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(name, pos-&gt;name))<br>&#123;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br>pos = pos-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="4_122"></a>4.修改联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">MoDify</span><span class="hljs-params">(PC* pos)</span><br>&#123;<br><span class="hljs-type">char</span> str_name2[NAM_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_sex2[SEX_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_tel2[TEL_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_adr2[ADR_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br>assert(pos);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的姓名\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_name2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;name, str_name2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的年龄\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(pos-&gt;age));<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的性别\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_sex2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;sex, str_sex2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的电话\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str_tel2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;tel, str_tel2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的地址\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_adr2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;adr, str_adr2);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="5_155"></a>5.显示所有联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>PC* cur = phead-&gt;next;<br>assert(phead);<br><span class="hljs-keyword">if</span> (cur == phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;还没有添加信息\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名            年龄    性别    电话            地址\n&quot;</span>);<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-15s\t%-5d\t%-5s\t%-15s\t%-10s\n&quot;</span>, cur-&gt;name, cur-&gt;age, cur-&gt;sex, cur-&gt;tel, cur-&gt;adr);<br>cur = cur-&gt;next;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="6_175"></a>6.清空所有联系人</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">DesTroy</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>assert(phead);<br>PC* cur=phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br>PC* Next = cur-&gt;next;<br><span class="hljs-built_in">free</span>(cur);<br>cur = Next;<br>&#125;<br>phead-&gt;next = phead;<br>phead-&gt;front = phead;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="7_193"></a>7.按名字排序所有联系人</h2><blockquote><p>由于qsort是用于一个连续的空间，所以，这里用冒泡排序。<br/> 算个数的时候要加上phead，但是排序的时候不要排phead</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Compare_ByName</span><span class="hljs-params">(PC*phead)</span><br>&#123;<br><span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>PC* cur = phead-&gt;next;<br>PC* Next = cur-&gt;next;<br><span class="hljs-type">char</span> Name_s[NAM_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">int</span> age_s=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> sex_s[SEX_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> tel_s[TEL_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> adr_s[ADR_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br>assert(phead);<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; Size(phead)+<span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; Size(phead) - i ;j++)<br>&#123;<br><span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strcmp</span>(cur-&gt;name, Next-&gt;name) &gt; <span class="hljs-number">0</span>) &amp;&amp; (cur != phead) &amp;&amp; (Next != phead))<br>&#123;<br><span class="hljs-built_in">strcpy</span>(Name_s, cur-&gt;name);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;name, Next-&gt;name);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;name, Name_s);<br><br>age_s = cur-&gt;age;<br>cur-&gt;age = Next-&gt;age;<br>Next-&gt;age = age_s;<br><br><span class="hljs-built_in">strcpy</span>(sex_s, cur-&gt;sex);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;sex, Next-&gt;sex);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;sex, sex_s);<br><br><span class="hljs-built_in">strcpy</span>(tel_s, cur-&gt;tel);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;tel, Next-&gt;tel);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;tel, tel_s);<br><br><span class="hljs-built_in">strcpy</span>(adr_s, cur-&gt;adr);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;adr, Next-&gt;adr);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;adr, adr_s);<br>&#125;<br>cur = cur-&gt;next;<br>Next = Next-&gt;next;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="8_245"></a>8.将数据保存在文件中</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SaveData</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>FILE* fp = <span class="hljs-literal">NULL</span>;<br>PC* cur = phead-&gt;next;<br>assert(phead);<br>fp = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, strerror(errno));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;name);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, cur-&gt;age);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;sex);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>,  cur-&gt;tel);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;adr);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//换行</span><br>cur = cur-&gt;next;<br>&#125;<br>fclose(fp);<br>fp = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/c9059561610b447d82ccf96431e7c459.png"><br/> contact.h文件中包含所需要的头文件以及函数的声明：</img></p><h2><a id="contacth_276"></a>contact.h文件</h2><p>以下就是contact.h的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAM_MAX 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEX_MAX 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TEL_MAX 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADR_MAX 20</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Contact</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Contact</span>* <span class="hljs-title">front</span>;</span><br><span class="hljs-type">char</span> name[NAM_MAX];<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">char</span> sex[SEX_MAX];<br><span class="hljs-type">char</span> tel[TEL_MAX];<br><span class="hljs-type">char</span> adr[ADR_MAX];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Contact</span>* <span class="hljs-title">next</span>;</span><br>&#125;PC;<br><br><span class="hljs-comment">//申请空间√</span><br>PC* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span>* sex, <span class="hljs-type">char</span>* tel, <span class="hljs-type">char</span>* adr)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ADDPc</span><span class="hljs-params">(PC* phead)</span>;<span class="hljs-comment">//增加联系人√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DelPc</span><span class="hljs-params">(PC* pos)</span>;<span class="hljs-comment">//删除联系人√</span><br>PC* <span class="hljs-title function_">Find_by_name</span><span class="hljs-params">(PC* phead,<span class="hljs-type">char</span>* name)</span>;<span class="hljs-comment">//通过姓名寻找联系人√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(<span class="hljs-type">const</span> PC* phead)</span>;<span class="hljs-comment">//打印联系人√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DesTroy</span><span class="hljs-params">(PC* phead)</span>;<span class="hljs-comment">//销毁通讯录√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MoDify</span><span class="hljs-params">(PC* pos)</span>;<span class="hljs-comment">//修改联系人信息√</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(PC* phead)</span>;<span class="hljs-comment">//计算数据数量√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compare_ByName</span><span class="hljs-params">(PC*phead)</span>;<span class="hljs-comment">//按名字排序 abcdefg......√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SaveData</span><span class="hljs-params">(PC*phead)</span>;<span class="hljs-comment">// 保存数据√</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SaveFileData</span><span class="hljs-params">(PC*phead)</span>;<span class="hljs-comment">//先将文件中的数据存到链表中√</span><br><br></code></pre></td></tr></table></figure><p>contac.c是每个函数的实现：</p><h2><a id="contacc_318"></a>contac.c文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;contact.h&quot;</span></span><br><span class="hljs-keyword">struct</span> Contact* <span class="hljs-title function_">BuyNewNode</span><span class="hljs-params">(<span class="hljs-type">char</span>* name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span>* sex, <span class="hljs-type">char</span>* tel, <span class="hljs-type">char</span>* adr)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Contact</span>* <span class="hljs-title">newnode</span> =</span> (<span class="hljs-keyword">struct</span> Contact*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Contact));<br>assert(newnode);<br>newnode-&gt;next = newnode;<br>newnode-&gt;front = newnode;<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;name , name);<br>newnode-&gt;age = age;<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;sex , sex);<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;tel , tel);<br><span class="hljs-built_in">strcpy</span>(newnode-&gt;adr , adr);<br><span class="hljs-keyword">return</span> newnode;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SaveFileData</span><span class="hljs-params">(PC*phead)</span><br>&#123;<br><br>FILE* fp = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>assert(phead);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, strerror(errno));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>getc(fp);<br><span class="hljs-keyword">while</span> (!feof(fp))<br>&#123;<br>rewind(fp);<br>PC* newnode = BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;(newnode-&gt;age));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;tel);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, newnode-&gt;adr);<br>PC* head = phead-&gt;front;<br>head-&gt;next = newnode;<br>newnode-&gt;front = head;<br>newnode-&gt;next = phead;<br>phead-&gt;front = newnode;<br>&#125;<br>fclose(fp);<br>fp = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>PC* cur = phead-&gt;next;<br>assert(phead);<br><span class="hljs-keyword">if</span> (cur == phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;还没有添加信息\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名            年龄    性别    电话            地址\n&quot;</span>);<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-15s\t%-5d\t%-5s\t%-15s\t%-10s\n&quot;</span>, cur-&gt;name, cur-&gt;age, cur-&gt;sex, cur-&gt;tel, cur-&gt;adr);<br>cur = cur-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ADDPc</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>PC* newnode = BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br>assert(phead);<br>assert(newnode);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入姓名\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入年龄\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(newnode-&gt;age));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入性别\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;sex);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入电话\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;tel);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入地址\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, newnode-&gt;adr);<br>PC* head = phead-&gt;front;<br>head-&gt;next = newnode;<br>newnode-&gt;front = head;<br>newnode-&gt;next = phead;<br>phead-&gt;front = newnode;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;添加成功\n&quot;</span>);<br>&#125;<br>PC* <span class="hljs-title function_">Find_by_name</span><span class="hljs-params">( PC* phead, <span class="hljs-type">char</span>* name)</span><br>&#123;<br>assert(phead);<br>PC* pos = phead-&gt;next;<br><span class="hljs-keyword">while</span> (pos !=phead)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(name, pos-&gt;name))<br>&#123;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br>pos = pos-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DelPc</span><span class="hljs-params">(PC* pos)</span><br>&#123;<br>assert(pos);<br>PC* Front = pos-&gt;front;<br>PC* Next = pos-&gt;next;<br>Front-&gt;next = Next;<br>Next-&gt;front = Front;<br><span class="hljs-built_in">free</span>(pos);<br>pos = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DesTroy</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>assert(phead);<br>PC* cur=phead-&gt;next;<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br>PC* Next = cur-&gt;next;<br><span class="hljs-built_in">free</span>(cur);<br>cur = Next;<br>&#125;<br><span class="hljs-built_in">free</span>(phead);<br>phead = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">MoDify</span><span class="hljs-params">(PC* pos)</span><br>&#123;<br><span class="hljs-type">char</span> str_name2[NAM_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_sex2[SEX_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_tel2[TEL_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> str_adr2[ADR_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br>assert(pos);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的姓名\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_name2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;name, str_name2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的年龄\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;(pos-&gt;age));<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的性别\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_sex2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;sex, str_sex2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的电话\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str_tel2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;tel, str_tel2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的地址\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_adr2);<br><span class="hljs-built_in">strcpy</span>(pos-&gt;adr, str_adr2);<br><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br><span class="hljs-type">int</span> sz = <span class="hljs-number">0</span>;<br>PC* cur = phead-&gt;next;<br>assert(phead);<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br>sz++;<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> sz;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Compare_ByName</span><span class="hljs-params">(PC*phead)</span><br>&#123;<br><span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>PC* cur = phead-&gt;next;<br>PC* Next = cur-&gt;next;<br><span class="hljs-type">char</span> Name_s[NAM_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">int</span> age_s=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> sex_s[SEX_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> tel_s[TEL_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-type">char</span> adr_s[ADR_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<br>assert(phead);<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; Size(phead)+<span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; Size(phead) - i ;j++)<br>&#123;<br><span class="hljs-keyword">if</span> ((<span class="hljs-built_in">strcmp</span>(cur-&gt;name, Next-&gt;name) &gt; <span class="hljs-number">0</span>) &amp;&amp; (cur != phead) &amp;&amp; (Next != phead))<br>&#123;<br><span class="hljs-built_in">strcpy</span>(Name_s, cur-&gt;name);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;name, Next-&gt;name);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;name, Name_s);<br><br>age_s = cur-&gt;age;<br>cur-&gt;age = Next-&gt;age;<br>Next-&gt;age = age_s;<br><br><span class="hljs-built_in">strcpy</span>(sex_s, cur-&gt;sex);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;sex, Next-&gt;sex);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;sex, sex_s);<br><br><span class="hljs-built_in">strcpy</span>(tel_s, cur-&gt;tel);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;tel, Next-&gt;tel);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;tel, tel_s);<br><br><span class="hljs-built_in">strcpy</span>(adr_s, cur-&gt;adr);<br><span class="hljs-built_in">strcpy</span>(cur-&gt;adr, Next-&gt;adr);<br><span class="hljs-built_in">strcpy</span>(Next-&gt;adr, adr_s);<br>&#125;<br>cur = cur-&gt;next;<br>Next = Next-&gt;next;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SaveData</span><span class="hljs-params">(PC* phead)</span><br>&#123;<br>FILE* fp = <span class="hljs-literal">NULL</span>;<br>PC* cur = phead-&gt;next;<br>assert(phead);<br>fp = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, strerror(errno));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (cur != phead)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;name);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, cur-&gt;age);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;sex);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>,  cur-&gt;tel);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, cur-&gt;adr);<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//换行</span><br>cur = cur-&gt;next;<br>&#125;<br>fclose(fp);<br>fp = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>test.c是各个函数之间的调用：</p><h2><a id="testc_550"></a>test.c文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;contact.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">MyEnum</span></span><br><span class="hljs-class">&#123;</span><br>Exit,<br>Add,<br>Dele,<br>Find,<br>Modify,<br>Show,<br>Destroy,<br>Sort,<br>Save<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Menu</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//system(&quot;cls&quot;);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********1.添加联系人*********\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********2.删除联系人***********\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********3.查找联系人************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********4.修改联系人*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********5.显示所有联系人*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********6.清空所有联系人*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********7.按名字排序所有联系人*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********8.将数据保存在文件中*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********0.退出*******\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;************************\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br>PC* phead = BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<span class="hljs-comment">//初始化一个头节点</span><br>SaveFileData(phead);<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sz = <span class="hljs-number">0</span>;<span class="hljs-comment">//求联系人的个数</span><br><span class="hljs-type">char</span> str_name[NAM_MAX] = <span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//用来通过姓名寻找</span><br><span class="hljs-keyword">do</span><br>&#123;<br>Sleep(<span class="hljs-number">500</span>);<br>Menu();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的选择-&gt;&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> Exit:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;即将退出程序\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>Sleep(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Add:<br><span class="hljs-keyword">if</span> (phead == <span class="hljs-literal">NULL</span>)<br>&#123;<br>phead= BuyNewNode(<span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;000000&quot;</span>, <span class="hljs-string">&quot;00000&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br>&#125;<br>ADDPc(phead);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Dele:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要删除的姓名:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_name);<br>PC* pos = Find_by_name(phead, str_name);<br><span class="hljs-keyword">if</span> (pos)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名            年龄    性别    电话            地址\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-15s\t%-5d\t%-5s\t%-15s\t%-10s\n&quot;</span>, pos-&gt;name, pos-&gt;age, pos-&gt;sex, pos-&gt;tel, pos-&gt;adr);<br>DelPc(pos);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有找到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Show:<br>sz = Size(phead);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;共有%d个联系人\n&quot;</span>, sz);<br>Print(phead);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Find:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要寻找的姓名:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_name);<br>PC* pos1=Find_by_name(phead,str_name);<br><span class="hljs-keyword">if</span> (pos1)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名            年龄    性别    电话            地址\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-15s\t%-5d\t%-5s\t%-15s\t%-10s\n&quot;</span>, pos1-&gt;name, pos1-&gt;age, pos1-&gt;sex, pos1-&gt;tel, pos1-&gt;adr);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有找到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Modify:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要寻找的姓名:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str_name);<br>PC* pos2 = Find_by_name(phead, str_name);<br><span class="hljs-keyword">if</span> (pos2)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名            年龄    性别    电话            地址\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-15s\t%-5d\t%-5s\t%-15s\t%-10s\n&quot;</span>, pos2-&gt;name, pos2-&gt;age, pos2-&gt;sex, pos2-&gt;tel, pos2-&gt;adr);<br>MoDify(pos2);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有找到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Destroy:<br>DesTroy(phead);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;销毁成功\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Sort:<br>sz = Size(phead);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;共有%d个联系人\n&quot;</span>, sz);<br>Compare_ByName(phead);<br>Print(phead);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> Save:<br>SaveData(phead);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;保存成功\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择错误，请重新选择\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-1 定义一个矩形类（C++构造函数） (10 分)</title>
    <link href="/2022/01/25/categories/c++/6-1%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2%E7%B1%BB%EF%BC%88C++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%89%20(10%20%E5%88%86)/"/>
    <url>/2022/01/25/categories/c++/6-1%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2%E7%B1%BB%EF%BC%88C++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%89%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>设计一个名为Rectangle的矩形类，这个类包括：两个名为width和height的double数据域，它们分别表示矩形的宽和高。width和height的默认值都为1.该类包括矩形类的无参构造函数（默认构造函数）；一个width和height为指定值的矩形构造函数；一个名为getArea( )的函数返回矩形的面积；一个名为getPerimeter( )的函数返回矩形的周长。请实现这个类。</p><p>类名为：<br/> Rectangle<br/> 裁判测试程序样例：<br/> 在这里给出函数被调用进行测试的例子。例如：<br/> #include <br/> using namespace std;<br/> //你提交的代码将嵌入到这里</p><p>int main()<br/> {<!-- --><br/> double m,n;<br/> cin&gt;&gt;m;<br/> cin&gt;&gt;n;<br/> Rectangle a(m,n);<br/> cout&lt;&lt;a.getArea()&lt;&lt;endl;<br/> cout&lt;&lt;a.getPerimeter()&lt;&lt;endl;<br/> return 0;<br/> }<br/> 输入样例：<br/> 3.5 35.9<br/> 输出样例：<br/> 125.65<br/> 78.8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span></span><br><span class="hljs-class">&#123;</span><br>private:<br><span class="hljs-type">double</span> width;<span class="hljs-comment">//宽</span><br><span class="hljs-type">double</span> height;<span class="hljs-comment">//高</span><br>public:<br>Rectangle()<span class="hljs-comment">//无参构造函数</span><br>&#123;<br>width=<span class="hljs-number">1</span>;<br>height=<span class="hljs-number">1</span>;<br>&#125;<br>Rectangle(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)<span class="hljs-comment">//有参构造函数</span><br>&#123;<br>width=x;<br>height=y;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span><span class="hljs-comment">//得到面积</span><br>&#123;<br><span class="hljs-type">double</span> area;<br>area=width*height;<br><span class="hljs-comment">//cout&lt;&lt;&quot;面积为：&quot;&lt;&lt;area&lt;&lt;endl;</span><br><span class="hljs-keyword">return</span> area;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">getPerimeter</span><span class="hljs-params">()</span><span class="hljs-comment">//得到周长</span><br>&#123;<br><span class="hljs-type">double</span> perimeter;<br>perimeter=<span class="hljs-number">2</span>*(width+height);<br><span class="hljs-comment">//cout&lt;&lt;&quot;周长为：&quot;&lt;&lt;perimeter&lt;&lt;endl;</span><br><span class="hljs-keyword">return</span> perimeter;<br>&#125;<br><br>&#125;;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>几何学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++6-2 设计一个三角形Triangle类（C++构造函数） (10 分)</title>
    <link href="/2022/01/25/categories/c++/C++6-2%20%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2Triangle%E7%B1%BB%EF%BC%88C++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%89%20(10%20%E5%88%86)/"/>
    <url>/2022/01/25/categories/c++/C++6-2%20%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2Triangle%E7%B1%BB%EF%BC%88C++%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%89%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>6-2 设计一个三角形Triangle类（C++构造函数） (10 分)<br/> 设计一个三角形Triangle类。这个类包括： 两个名为width和height的double型数据域，它们分别表示三角形的底宽和高。一个为width和height指定初值的构造函数。 一个名为getArea()的方法返回这个三角形的面积。</p><p>类名为：<br/> Triangle<br/> 裁判测试程序样例：<br/> #include <br/> using namespace std;<br/> // 你提交的代码将被嵌入到这里</p><p>int main( )<br/> {<!-- --><br/> double w,h;<br/> cin&gt;&gt;w&gt;&gt;h;<br/> Triangle t(w,h);<br/> cout&lt;&lt;"The area of the Triangle is: "&lt;&lt;t.getArea( )&lt;&lt;endl;<br/> }<br/> 输入样例：<br/> 3.5 4.8<br/> 输出样例：<br/> The area of the Triangle is: 8.4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span></span><br><span class="hljs-class">&#123;</span><br>private:<br><span class="hljs-type">double</span> width;<span class="hljs-comment">//宽</span><br><span class="hljs-type">double</span> height;<span class="hljs-comment">//高</span><br>public:<br>Triangle(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)<span class="hljs-comment">//有参构造函数</span><br>&#123;<br>width=x;<br>height=y;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span><span class="hljs-comment">//得到面积</span><br>&#123;<br><span class="hljs-type">double</span> area;<br>area=width*height/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> area;<br>&#125;<br><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/img_convert/f1976753a2b3e83fbef2c06c26918fde.png#pic_center"/></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>strtok函数，实现memcpy还有memmove</title>
    <link href="/2022/01/25/categories/C%E8%AF%AD%E8%A8%80/strtok%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AE%9E%E7%8E%B0memcpy%E8%BF%98%E6%9C%89memmove/"/>
    <url>/2022/01/25/categories/C%E8%AF%AD%E8%A8%80/strtok%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AE%9E%E7%8E%B0memcpy%E8%BF%98%E6%9C%89memmove/</url>
    
    <content type="html"><![CDATA[<hr/><h2><a id="_2"></a>前期提醒：这是比特鹏哥上课讲的内容，鹏哥讲的非常好，大家可以了解一下。</h2><hr/><p>先来讲一讲strtok函数：<br/> <img alt="这是关于strtok函数的介绍" src="https://img-blog.csdnimg.cn/f7ff2aafc22d47f9a2843224e5d30e4d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* p = <span class="hljs-string">&quot;@.#&quot;</span>;<br><span class="hljs-built_in">char</span> arr[] = <span class="hljs-string">&quot;zpengwei@yeah.net#hehe&quot;</span>;<br><span class="hljs-built_in">char</span> buf[<span class="hljs-number">50</span>] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">// &quot;zpengwei@yeah.net&quot;</span><br>strcpy(buf, arr);<br><span class="hljs-built_in">char</span>* str = NULL;<br><br><span class="hljs-keyword">for</span> (str = strtok(buf, p); str != NULL; str=strtok(NULL, p))<br>&#123;<br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>&#125;<span class="hljs-comment">//运用循环来实现</span><br><br><span class="hljs-built_in">char</span>* str = strtok(buf, p);<span class="hljs-comment">//zpengwei</span><br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>str = strtok(NULL, p);<span class="hljs-comment">//yeah</span><br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>str = strtok(NULL, p);<span class="hljs-comment">//net</span><br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>strtok - 开始返回NULL<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><a id="memovememcpy_32"></a>实现memove和memcpy函数：</h2><p>memcpy函数挺简单的，主要还是说一下memmove函数：<br/> <img alt="在这里插入图片描述" src="https://img-blog.csdnimg.cn/6c331498ac484d40919678fd20841557.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_10,color_FFFFFF,t_70,g_se,x_16"/></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-type">void</span>* <span class="hljs-title function_">my_memmove</span><span class="hljs-params">(<span class="hljs-type">void</span>* dest,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* str,<span class="hljs-type">size_t</span> num)</span><br>&#123;<br><span class="hljs-type">void</span>* ret = dest;<br><span class="hljs-keyword">if</span> (dest &lt; str)<span class="hljs-comment">//前-&gt;后</span><br>&#123;<br><span class="hljs-keyword">while</span> (num--)<br>&#123;<br>*(<span class="hljs-type">char</span>*) dest = *(<span class="hljs-type">char</span>*)str;<br>dest = (<span class="hljs-type">char</span>*)dest + <span class="hljs-number">1</span>;<br>str = (<span class="hljs-type">char</span>*)str + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//后-&gt;前</span><br>&#123;<br>dest = (<span class="hljs-type">char</span>*)dest + num<span class="hljs-number">-1</span>;<br>str = (<span class="hljs-type">char</span>*)str + num<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (num--)<br>&#123;<br>*(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)str;<br>dest = (<span class="hljs-type">char</span>*)dest - <span class="hljs-number">1</span>;<br>str = (<span class="hljs-type">char</span>*)str - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">void</span>* <span class="hljs-title function_">my_memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span>* dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* str, <span class="hljs-type">size_t</span> num)</span><br>&#123;<br><span class="hljs-type">void</span>* ret = dest;<br>assert(dest &amp;&amp; str);<br><span class="hljs-keyword">while</span> (num--)<br>&#123;<br>*(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)str;<br>dest = (<span class="hljs-type">char</span>*)dest + <span class="hljs-number">1</span>;<br>str = (<span class="hljs-type">char</span>*)str + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> b[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">/*my_memmove(a+2,a,5*sizeof(int));*/</span><br>my_memcpy(b,a,<span class="hljs-number">5</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串和内存函数小记</title>
    <link href="/2022/01/25/categories/C%E8%AF%AD%E8%A8%80/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/"/>
    <url>/2022/01/25/categories/C%E8%AF%AD%E8%A8%80/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>strtok函数：</p><pre><code class="hljs">在这里插入代码片for这里插入代码片 (str = strtok(buf, p); str != NULL; str=strtok(NULL, p))//&#123;//printf("%s\n", str);//&#125;</code></pre><p>for (str = strtok(buf, p); str != NULL; str=strtok(NULL, p))<br/> // {<!-- --><br/> // printf("%s\n", str);<br/> // }<br/> #include &lt;stdio.h&gt;<br/> #include &lt;string.h&gt;</p><p>//int main()<br/> //{<!-- --><br/> // const char* p = “@.#”;<br/> // char arr[] = “zpengwei@yeah.net#hehe”;<br/> // char buf[50] = { 0 };// “zpengwei@yeah.net”<br/> // strcpy(buf, arr);<br/> // char* str = NULL;<br/> //<br/> // for (str = strtok(buf, p); str != NULL; str=strtok(NULL, p))<br/> // {<!-- --><br/> // printf("%s\n", str);<br/> // }<br/> //<br/> // //char* str = strtok(buf, p);//zpengwei<br/> // //printf("%s\n", str);<br/> // //str = strtok(NULL, p);//yeah<br/> // //printf("%s\n", str);<br/> // //str = strtok(NULL, p);//net<br/> // //printf("%s\n", str);<br/> // //strtok - 开始返回NULL<br/> //<br/> // return 0;<br/> //}</p><p>//C语言中<br/> //规定了一些信息<br/> //错误码 - 错误信息<br/> //0 - “No Error”<br/> //1 -<br/> //2 -<br/> //3 -<br/> //</p><p>//<br/> //strerror - 可以把错误码翻译成错误信息<br/> //</p><p>//int main()<br/> //{<!-- --><br/> // int i = 0;<br/> // for (i = 0; i &lt; 10; i++)<br/> // {<!-- --><br/> // printf("%s\n", strerror(i));<br/> // }<br/> // return 0;<br/> //}</p><p>//<br/> //C语言可以操作文件<br/> //打开文件 - fopen<br/> //<br/> //当库函数使用的时候，发生错误会把errno这个全局的错误变量设置为本次执行库函数产生的错误码<br/> //errno是C语言提供的一个全局变量，可以直接使用，放在errno.h文件中的<br/> #include &lt;errno.h&gt;</p><p>//int main()<br/> //{<!-- --><br/> // //打开文件<br/> // FILE* pf = fopen(“test.txt”, “r”);<br/> // if (NULL == pf)<br/> // {<!-- --><br/> // //出错误的原因是什么<br/> // printf("%s\n", strerror(errno));<br/> // return 0;<br/> // }<br/> // //读文件<br/> // //…<br/> // <br/> // //关闭文件<br/> // fclose(pf);<br/> // pf = NULL;<br/> //<br/> // return 0;<br/> //}</p><p>#include &lt;ctype.h&gt;</p><p>//int main()<br/> //{<!-- --><br/> // //printf("%d\n", isspace(’!’));<br/> // char ch = ‘w’;<br/> // if (isspace(ch))<br/> // {<!-- --><br/> // //空白字符<br/> // }<br/> // else<br/> // {<!-- --><br/> //<br/> // }<br/> // return 0;<br/> //}<br/> //int main()<br/> //{<!-- --><br/> // //char ch = ‘0’;<br/> // //if (ch &gt;= ‘0’ &amp;&amp; ch &lt;= ‘9’)<br/> // //{<!-- --><br/> //<br/> // //}<br/> // //if (isdigit(ch))<br/> // //{<!-- --><br/> //<br/> // //}<br/> //<br/> // char ch = 0;<br/> // ch = getchar();<br/> // if (islower(ch))<br/> // {<!-- --><br/> // ch = toupper(ch);<br/> // }<br/> // else<br/> // {<!-- --><br/> // ch = tolower(ch);<br/> // }<br/> // printf("%c\n", ch);<br/> //<br/> // return 0;<br/> //}<br/> //</p><p>//void* memcpy(void* destination,<br/> // const void* source,<br/> // size_t num);</p><p>#include &lt;assert.h&gt;</p><p>//void* my_memcpy(void* dest, const void<em>src, size_t num)<br/> //{<!-- --><br/> // void</em> ret = dest;<br/> // assert(dest &amp;&amp; src);<br/> //<br/> // while (num–)<br/> // {<!-- --><br/> // <em>(char</em>)dest = <em>(char</em>)src;<br/> // dest = (char*)dest + 1;<br/> // src = (char*)src + 1;<br/> // }<br/> //<br/> // return ret;<br/> //}<br/> //<br/> //<br/> //void* my_memmove(void* dest, const void* src, size_t num)<br/> //{<!-- --><br/> // void* ret = dest;<br/> // assert(dest &amp;&amp; src);<br/> // <br/> // if (dest &lt; src)<br/> // {<!-- --><br/> // //前-&gt;后<br/> // while (num–)<br/> // {<!-- --><br/> // <em>(char</em>)dest = <em>(char</em>)src;<br/> // dest = (char*)dest + 1;<br/> // src = (char*)src + 1;<br/> // }<br/> // }<br/> // else<br/> // {<!-- --><br/> // //后-&gt;前<br/> // while (num–)<br/> // {<!-- --><br/> // <em>((char</em>)dest+num) = <em>((char</em>)src + num);<br/> // }<br/> // }<br/> // return ret;<br/> //}<br/> //<br/> //void test1()<br/> //{<!-- --><br/> // int arr3[] = { 1,2,3,4,5,6,7,8,9,10 };<br/> // //1 2 1 2 3 4 5 8 9 10<br/> // //my_memcpy(arr3+2, arr3, 5 * sizeof(arr3[0]));<br/> // my_memmove(arr3, arr3+2, 20);<br/> //<br/> // //memcpy(arr3+2, arr3, 20);<br/> //<br/> // int i = 0;<br/> // for (i = 0; i &lt; 10; i++)<br/> // {<!-- --><br/> // printf("%d “, arr3[i]);<br/> // }<br/> //}<br/> //int main()<br/> //{<!-- --><br/> // test1();<br/> // //char arr1[] = “abcdef”;<br/> // //char arr2[20] = { 0 };<br/> // //strcpy(arr2, arr1);//拷贝字符串的<br/> //<br/> // //int arr3[] = { 1,2,3,4,5,6,7,8,9,10 };<br/> // //int arr4[5] = { 0 };<br/> //<br/> // //my_memcpy(arr4, arr3+5, 5*sizeof(arr3[0]));<br/> //<br/> // //int i = 0;<br/> // //for (i = 0; i &lt; 5; i++)<br/> // //{<!-- --><br/> // // printf(”%d\n", arr4[i]);<br/> // //}<br/> //<br/> // return 0;<br/> //}<br/> //</p><p>//int main()<br/> //{<!-- --><br/> // int arr1[] = { 1,2,7,4,5 };<br/> // int arr2[] = { 1,2,3,4,5 };<br/> // int ret = memcmp(arr1, arr2, 9);<br/> //<br/> // printf("%d\n", ret);<br/> // return 0;<br/> //}<br/> //<br/> //int main()<br/> //{<!-- --><br/> // //char arr[20] = { 0 };<br/> // //memset(arr, ‘x’, 10);<br/> // int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };<br/> // memset(arr, ‘x’, 10);<br/> // //00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 …<br/> // return 0;<br/> //}</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模仿qsort的功能实现一个通用的冒泡排序</title>
    <link href="/2022/01/24/categories/C%E8%AF%AD%E8%A8%80/%E6%A8%A1%E4%BB%BFqsort%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/01/24/categories/C%E8%AF%AD%E8%A8%80/%E6%A8%A1%E4%BB%BFqsort%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p id="main-toc"><strong>目录</strong></p><p id="-toc" style="margin-left:0px;"></p><p id="1.%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%20%EF%BC%9A-toc" style="margin-left:0px;"><a href="#1.%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%20%EF%BC%9A">1.什么是冒泡排序 ：</a></p><hr id="hr-toc"/><h1 id="1.%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%20%EF%BC%9A">1.什么是冒泡排序 ：</h1><p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/41917fa66f73e8d9cdebc65b36a43dc6.gif"/></p><p>动图看完之后总结一下吧：</p><p>       比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>       对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p><p>       针对所有的元素重复以上的步骤，除了最后一个。</p><p>       持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3>2. 什么时候最快</h3><p>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。</p><h3>3. 什么时候最慢</h3><p>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p><p>以上是对于冒泡排序的解释，现在来说一下如何用qsort实现一个通用的冒泡排序：</p><p>可以点这个链接看一下库函数qsort怎么用</p><p><a class="link-info has-card" href="https://blog.csdn.net/m0_57723028/article/details/122665254" title="https://blog.csdn.net/m0_57723028/article/details/122665254"><span class="link-card-box"><span class="link-title">https://blog.csdn.net/m0_57723028/article/details/122665254</span><span class="link-link"><img alt="" class="link-link-icon" src="https://csdnimg.cn/release/blog_editor_html/release1.9.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=M0H8">https://blog.csdn.net/m0_57723028/article/details/122665254</img></span></span></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int</span>* a,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//打印数组信息</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(a+i));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf1, <span class="hljs-type">char</span>* buf2, <span class="hljs-type">int</span> width)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; width; i++)<br>&#123;<br><span class="hljs-type">char</span> tmp = *buf1;<br>*buf1 = *buf2;<br>*buf2 = tmp;<br>buf1++;<br>buf2++;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">void</span>* base,<span class="hljs-type">int</span> sz,<span class="hljs-type">int</span> width,<span class="hljs-type">int</span>(*cmp)(<span class="hljs-type">void</span>* e1,<span class="hljs-type">void</span>* e2))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; sz - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; sz - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">cmp</span>((<span class="hljs-type">char</span>*)base + j * width, (<span class="hljs-type">char</span>*)base + (j + <span class="hljs-number">1</span>) * width) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">Swap</span>((<span class="hljs-type">char</span>*)base + j * width, (<span class="hljs-type">char</span>*)base + (j + <span class="hljs-number">1</span>) * width,width);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span> ,<span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> sz1 = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">bubble_sort</span>(a, sz1, <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]), compare_int);<br><span class="hljs-built_in">Print</span>(a, sz1);<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>linq</tag>
      
      <tag>p2p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言 qsort库函数使用方式：</title>
    <link href="/2022/01/24/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20qsort%E5%BA%93%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9A/"/>
    <url>/2022/01/24/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20qsort%E5%BA%93%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[<p>首先引用<span style="color:#fe2c24;">stdlib.h</span>头文件。</p><p>C 库函数 <strong>void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))</strong> 对数组进行排序。</p><h2>参数</h2><ul><li><strong>base </strong>-- 指向要排序的数组的第一个元素的指针。</li><li><strong>nitems </strong>-- 由 base 指向的数组中元素的个数。</li><li><strong>size </strong>-- 数组中每个元素的大小，以字节为单位。</li><li><strong>compar </strong>-- 用来比较两个元素的函数。</li></ul><p>接着看代码（这是一个升序排序）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare_int</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* e1,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* e2)</span><span class="hljs-comment">//数组排序</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (*(<span class="hljs-type">int</span>*)e1 - *(<span class="hljs-type">int</span>*)e2);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span> ,<span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> sz1 = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">qsort</span>(a, sz1, <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]), compare_int);<br><span class="hljs-built_in">Print</span>(a, sz1);<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构之双向循环链表。</title>
    <link href="/2021/12/19/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E3%80%82/"/>
    <url>/2021/12/19/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p></p><p> <img alt="" height="115" src="https://img-blog.csdnimg.cn/138e860ae2dd4058a5c45f49edfe5190.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="653"/></p><p> 上面是双向循环链表的物理结构。</p><p>代码实现如下：</p><p>list.h（函数的声明和头文件的引用）</p><p>test.c（函数之间的调用关系）</p><p>list.c（每个函数功能的具体实现）</p><pre><code class="hljs">#pragma once#include&lt;stdio.h&gt;#include&lt;assert.h&gt;#include&lt;malloc.h&gt;#include&lt;stdlib.h&gt;#include&lt;stdbool.h&gt;typedef int DataType;typedef struct ListNode&#123;    struct ListNode* prev;    struct ListNode* next;    DataType data;&#125;ListNode;typedef struct ListNode ListNode;//void Init(ListNode** pphead); 初始化头节点ListNode* BuyNewNode(DataType x);//申请空间void PushFront(ListNode* phead,DataType x);//头插void PushBack(ListNode* phead, DataType x);//尾插void PopFront(ListNode* phead);//头删void PopBack(ListNode* phead);//尾删void Insert(ListNode* pos,DataType x);//在指定位置插入void Erease(ListNode* pos);//在指定位置删除ListNode* Find(ListNode* phead, DataType x);//寻找void Print(ListNode* phead);//打印int Size(ListNode* phead);//计算链表的大小void Destory(ListNode* phead);//摧毁链表</code></pre><pre><code class="hljs">#define _CRT_SECURE_NO_WARNINGS 1#include"list.h"ListNode* BuyNewNode( DataType x)&#123;    ListNode* newnode = (ListNode*)malloc(sizeof(ListNode));    assert(newnode);    newnode-&gt;data = x;    newnode-&gt;next = newnode;    newnode-&gt;prev = newnode;    return newnode;&#125;void PushFront(ListNode* phead, DataType x)&#123;    ListNode* pos = phead-&gt;next;    Insert(pos, x);&#125;void PushBack(ListNode* phead, DataType x)&#123;    ListNode* pos = phead;    Insert(pos, x);&#125;void PopFront(ListNode* phead, DataType x)&#123;    ListNode* pos = phead-&gt;next;    Erease(pos);&#125;void PopBack(ListNode* phead, DataType x)&#123;    ListNode* pos = phead-&gt;prev;    Erease(pos);&#125;//void Init(ListNode** pphead)//&#123;//*pphead = BuyNewNode(0);//&#125;ListNode* Find(ListNode* phead, DataType x)&#123;    assert(phead-&gt;next != phead);    ListNode* pos = NULL;    ListNode* cur = phead-&gt;next;    while(cur!=phead)    &#123;        if (cur-&gt;data==x)        &#123;            pos = cur;            break;        &#125;        cur = cur-&gt;next;    &#125;    if(pos)    &#123;        printf("找到！\n");    &#125;    else    &#123;        printf("没找到\n");    &#125;    return pos;&#125;void Insert(ListNode* pos, DataType x)&#123;    assert(pos);    ListNode* newnode = BuyNewNode(x);    ListNode* head = pos-&gt;prev;    head-&gt;next = newnode;    newnode-&gt;prev = head;    newnode-&gt;next = pos;    pos-&gt;prev = newnode;&#125;void Erease(ListNode* pos)&#123;    ListNode* Prev = pos-&gt;prev;    ListNode* Next = pos-&gt;next;    Prev-&gt;next = Next;    Next-&gt;prev = Prev;    free(pos);    pos = NULL;&#125;void Print(ListNode* phead)&#123;    assert(phead);    ListNode* cur = phead-&gt;next;    while (cur!=phead)    &#123;        printf("%d ", cur-&gt;data);        cur = cur-&gt;next;    &#125;    printf("\n");&#125;int Size(ListNode* phead)&#123;    assert(phead);    int sum = 0;    ListNode* cur = phead-&gt;next;    while (cur!=phead)    &#123;        sum++;        cur = cur-&gt;next;    &#125;    return sum;&#125;void Destory(ListNode* phead)&#123;    assert(phead);    ListNode* cur = phead-&gt;next;    while (cur!=phead)    &#123;        ListNode* Next = cur-&gt;next;        free(cur);        cur = Next;    &#125;    free(phead);    phead = NULL;&#125;</code></pre><pre><code class="hljs">#define _CRT_SECURE_NO_WARNINGS 1#include"list.h"void Test1()&#123;    //ListNode* plist = NULL;    ListNode* plist = BuyNewNode(0);    //Init(&amp;plist);    PushFront(plist, 1);    PushFront(plist, 2);    PushFront(plist, 3);    PushBack(plist, 4);    Print(plist);    ListNode* pos= Find(plist,2);    Insert(pos, 200);    Print(plist);    PopFront(plist);    Print(plist);    PopBack(plist);    Print(plist);    printf("%d\n",Size(plist));    Destory(plist);&#125;int main(void)&#123;    Test1();    return 0;&#125;</code></pre><p><img alt="" height="418" src="https://img-blog.csdnimg.cn/c4809dce264f4579b9bf06d0433b3426.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="1200"/></p><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据在内存中的存储，超详解</title>
    <link href="/2021/11/30/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%8C%E8%B6%85%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/11/30/categories/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%8C%E8%B6%85%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p id="main-toc"><strong>目录</strong></p><p id="%E5%85%B3%E4%BA%8E%E6%95%B4%E5%BD%A2%E6%8F%90%E5%8D%87-toc" style="margin-left:0px;"><a href="#%E5%85%B3%E4%BA%8E%E6%95%B4%E5%BD%A2%E6%8F%90%E5%8D%87">关于整形提升</a></p><p id="%C2%A0%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F-toc" style="margin-left:0px;"><a href="#%C2%A0%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F"> 浮点数的存储方式</a></p><hr id="hr-toc"/><p>  我将自己对于数据在内存中的存储的理解写一篇博客以供大家参考。</p><p>我觉得还是边写代码边解释吧，这样可以边看代码边想问题，比较方便一点。</p><h1 id="%E5%85%B3%E4%BA%8E%E6%95%B4%E5%BD%A2%E6%8F%90%E5%8D%87">关于整形提升</h1><p><img alt="" height="272" src="https://img-blog.csdnimg.cn/c15fcb20445c4495b7b798a5ca4416b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="719"/></p><p></p><p>先来解释以下上边的这个代码，数字在内存中的存储，存储的是二进制补码</p><p>-1的原码： 10000000000000000000000000000001</p><p>-1的反码： 11111111111111111111111111111110</p><p>-1的补码： 11111111111111111111111111111111</p><p>在VS中：char-&gt;signed char</p><p>这里还涉及一个整形提升（因为以%d（整形格式）打印）：</p><p>                char a=-1在内存中的存储：11111111</p><p>                signed char b=-1在内存中的存储：11111111</p><p>                unsigned char c=-1在内存中的存储：11111111</p><p>                整形提升后：a,b在内存中存的32位补码都是：11111111111111111111111111111111</p><p>                由于定义c是无符号的（整型提升补的是0）：00000000000000000000000011111111</p><p>                所以 a=b=-1 ; c=256-1=255</p><p>接下里分析这一段代码（我只写了代码，int main ，头文件之类的没截到）：</p><p><img alt="" height="110" src="https://img-blog.csdnimg.cn/bada55d1949642a495ce213e1559e0e8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_14,color_FFFFFF,t_70,g_se,x_16" width="446"/></p><p>%u：以无符号整形打印。</p><p>-128的原码时：10000000000000000000000010000000</p><p>              反码：11111111111111111111111101111111</p><p>              补码：1111111111111111111111110000000</p><p>由于代码是char a=-128，整形提升后：1111111111111111111111110000000</p><p><img alt="" height="82" src="https://img-blog.csdnimg.cn/fbd2189a6d634a008a450802e9bb0658.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_14,color_FFFFFF,t_70,g_se,x_16" width="455"/></p><p>128的补码 00000000000000000000000010000000  </p><p>a-&gt;10000000</p><p>整形提升后：1111111111111111111111110000000</p><p></p><p> <img alt="" height="160" src="https://img-blog.csdnimg.cn/3f90fa1608dc46879a466a7112e9e16e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_14,color_FFFFFF,t_70,g_se,x_16" width="459"/></p><p>-20的原码：10000000000000000000000000010100<br/> -20的反码：11111111111111111111111111101011</p><p>-20的补码：11111111111111111111111111101100</p><p>10的补码： 00000000000000000000000000001010</p><p>-20的补码+10的补码：11111111111111111111111111110110</p><p>-20的补码+10的补码取反：10000000000000000000000000001001</p><p>-20的补码+10的补码取反+1:10000000000000000000000000001010 = -10</p><p>  </p><p> <img alt="" height="175" src="https://img-blog.csdnimg.cn/dd6f4fb2ef9848f1aee36b24b1e3e10e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_9,color_FFFFFF,t_70,g_se,x_16" width="313"/></p><p>这是一个死循环：</p><p><img alt="" height="413" src="https://img-blog.csdnimg.cn/2332c49b5ea74c359d76e10b70b1e685.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_10,color_FFFFFF,t_70,g_se,x_16" width="332"/></p><p>由于i是无符号整形（最高位不表示符号）</p><p>如果是int 类型（有符号）0-1=-1，-1的补码是 11111111111111111111111111111111</p><p>然而现在是无符号整形，最高位（在这里是最左边）的那个1不是负号，而是正整数1；所以相当于2的32次方-1=4294967295的补码（正整数的补码反码原码都是一样的）所以陷入了死循环。</p><p><img alt="" height="270" src="https://img-blog.csdnimg.cn/4f24dd2b8f5f42c3a18bb60383a7cd3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_10,color_FFFFFF,t_70,g_se,x_16" width="341"/></p><p> <img alt="" height="317" src="https://img-blog.csdnimg.cn/83e2e09c455e4f6aacfd819a3096ccb9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_18,color_FFFFFF,t_70,g_se,x_16" width="557"/></p><p> 用画图来表示（<span style="color:#38d8f0;"><strong>出自比特鹏哥</strong></span>）：<img alt="" height="592" src="https://img-blog.csdnimg.cn/b063e8478abe4399b080ea81b8288be8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="815"/></p><h1 id="%C2%A0%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F"> 浮点数的存储方式</h1><p>        <img alt="" height="202" src="https://img-blog.csdnimg.cn/1e3885bed8d64bbbbf0208298707cea4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="816"/></p><p> 以下是对于浮点数在内存中存储的规定：</p><p><img alt="" height="545" src="https://img-blog.csdnimg.cn/7adb7c91e80643bfba1bb3a4cc503fda.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="1067"/></p><p></p><p><img alt="" height="676" src="https://img-blog.csdnimg.cn/e65992e1f35843539fe3ea793b7d45f0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="867"/></p><p><img alt="" height="836" src="https://img-blog.csdnimg.cn/22a75585ef9142179875272aeaa0876d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="1200"/></p><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现打印杨辉三角</title>
    <link href="/2021/11/25/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    <url>/2021/11/25/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%93%E5%8D%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; i + <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || j == i)<br>&#123;<br>a[i][j] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[i][j] = a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + a[i<span class="hljs-number">-1</span>][j];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %-4d &quot;</span>, a[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>       上面是源代码，现在开始讲以下杨辉三角的规律(百度搜的）：</p><p>       杨辉三角，是<a href="https://baike.baidu.com/item/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E7%B3%BB%E6%95%B0" title="二项式系数">二项式系数</a>在三角形中的一种几何排列。在欧洲，这个表叫做<a href="https://baike.baidu.com/item/%E5%B8%95%E6%96%AF%E5%8D%A1%E4%B8%89%E8%A7%92%E5%BD%A2" title="帕斯卡三角形">帕斯卡三角形</a>。<a href="https://baike.baidu.com/item/%E5%B8%95%E6%96%AF%E5%8D%A1/5464" title="帕斯卡">帕斯卡</a>（1623----1662）是在1654年发现这一<a href="https://baike.baidu.com/item/%E8%A7%84%E5%BE%8B" title="规律">规律</a>的，比<a href="https://baike.baidu.com/item/%E6%9D%A8%E8%BE%89/24967" title="杨辉">杨辉</a>要迟393年，比<a href="https://baike.baidu.com/item/%E8%B4%BE%E5%AE%AA" title="贾宪">贾宪</a>迟600年。杨辉三角是中国古代数学的杰出研究成果之一，它把二项式系数图形化，把组合数内在的一些代数性质直观地从图形中体现出来，是一种离散型的数与形的结合 [2]​​​​​​。</p><p>        </p><ol><li> <p>每个数等于它上方两数之和。</p> </li><li> <p>每行数字左右对称，由1开始逐渐变大。</p> </li><li> <p>第n行的数字有n项。</p> </li><li> <p>前n行共[(1+n)n]/2 个数。</p> </li><li> <p>第n行的m个数可表示为 <em>C(n-1，m-1)</em>，即为从n-1个不同元素中取m-1个元素的组合数。</p> </li><li> <p>第n行的第m个数和第n-m+1个数相等 ，为<a href="https://baike.baidu.com/item/%E7%BB%84%E5%90%88%E6%95%B0" title="组合数">组合数</a>性质之一。</p> </li><li> <p>每个数字等于上一行的左右两个数字之和。可用此性质写出整个杨辉三角。即第n+1行的第i个数等于第n行的第i-1个数和第i个数之和，这也是组合数的性质之一。即 <em>C(n+1,i)=C(n,i)+C(n,i-1)</em>。</p> </li><li> <p>(a+b)n的展开式中的各项<a href="https://baike.baidu.com/item/%E7%B3%BB%E6%95%B0" title="系数">系数</a>依次对应杨辉三角的第(n+1)行中的每一项。</p> </li><li> <p>将第2n+1行第1个数，跟第2n+2行第3个数、第2n+3行第5个数……连成一线，这些数的和是第4n+1个<a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0" title="斐波那契数">斐波那契数</a>；将第2n行第2个数(n&gt;1)，跟第2n-1行第4个数、第2n-2行第6个数……这些数之和是第4n-2个斐波那契数。</p> </li><li> <p>将第n行的数字分别乘以10^（m-1），其中m为该数所在的列，再将各项相加的和为11^（n-1）。11^0=1，11^1=1x10^0+1×10^1=11，11^2=1×10^0+2x10^1+1x10^2=121，11^3=1x10^0+3×10^1+3x10^2+1x10^3=1331，11^4=1x10^0+4x10^1+6x10^2+4x10^3+1x10^4=14641，11^5=1x10^0+5x10^1+10x10^2+10x10^3+5x10^4+1×10^5=161051。</p> </li><li> <p>第n行数字的和为2^（n-1）。1=2^（1-1），1+1=2^（2-1），1+2+1=2^（3-1），1+3+3+1=2^（4-1），1+4+6+4+1=2^（5-1），1+5+10+10+5+1=2^（6-1）。</p> </li><li> <p>斜线上数字的和等于其向左（从左上方到右下方的斜线）或向右拐弯（从右上方到左下方的斜线），拐角上的数字。1+1=2，1+1+1=3，1+1+1+1=4，1+2=3，1+2+3=6，1+2+3+4=10，1+3=4，1+3+6=10，1+4=5。</p> </li><li> <p>将各行数字左对齐，其右上到左下对角线数字的和等于斐波那契数列的数字。1，1，1+1=2，2+1=3，1+3+1=5，3+4+1=8，1+6+5+1=13，4+10+6+1=21，1+10+15+7+1=34，5+20+21+8+1=55</p> </li></ol>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单解释一下图中左上角的代码执行结果为什么是死循环。</title>
    <link href="/2021/11/24/categories/C%E8%AF%AD%E8%A8%80/%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E5%9B%BE%E4%B8%AD%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E5%BE%AA%E7%8E%AF%E3%80%82/"/>
    <url>/2021/11/24/categories/C%E8%AF%AD%E8%A8%80/%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E5%9B%BE%E4%B8%AD%E5%B7%A6%E4%B8%8A%E8%A7%92%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E5%BE%AA%E7%8E%AF%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/0dbb3a0f806e4c1187382ca0f825bc9b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16"/></p><p> </p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA 7-3 找出总分最高的学生 (10 分)</title>
    <link href="/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/PTA%207-3%20%E6%89%BE%E5%87%BA%E6%80%BB%E5%88%86%E6%9C%80%E9%AB%98%E7%9A%84%E5%AD%A6%E7%94%9F%20(10%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/PTA%207-3%20%E6%89%BE%E5%87%BA%E6%80%BB%E5%88%86%E6%9C%80%E9%AB%98%E7%9A%84%E5%AD%A6%E7%94%9F%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>给定N个学生的基本信息，包括学号（由5个数字组成的字符串）、姓名（长度小于10的不包含空白字符的非空字符串）和3门课程的成绩（[0,100]区间内的整数），要求输出总分最高学生的姓名、学号和总分。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出正整数N（≤10）。随后N行，每行给出一位学生的信息，格式为“学号 姓名 成绩1 成绩2 成绩3”，中间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>在一行中输出总分最高学生的姓名、学号和总分，间隔一个空格。题目保证这样的学生是唯一的。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">500001 huanglan 78 83 7500002 wanghai 76 80 7700003 shenqiang 87 83 7610001 zhangfeng 92 88 7821987 zhangmeng 80 82 75</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">zhangfeng 10001 258</code></pre><p>结尾无空行</p><p><br/>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,&amp;n);<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">15</span>];<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">15</span>];<br>    <span class="hljs-type">char</span> d[<span class="hljs-number">15</span>];<br>    <span class="hljs-type">char</span> e[<span class="hljs-number">15</span>];<br>    <span class="hljs-type">int</span> n1,n2,n3;<br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)&#123;<br>        <span class="hljs-built_in">gets</span>(a);<br>        <span class="hljs-built_in">sscanf</span>(a,<span class="hljs-string">&quot;%s %s %d %d %d&quot;</span>,b,c,&amp;n1,&amp;n2,&amp;n3);<br>        s = n1 + n2 + n3;<br>        <span class="hljs-keyword">if</span>(s &gt; t)&#123;<br>            t = s;<br>            <span class="hljs-built_in">strcpy</span>(e,b);<br>            <span class="hljs-built_in">strcpy</span>(d,c);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s %d&quot;</span>,d,e,t);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-4 通讯录的录入与显示 (10 分)</title>
    <link href="/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E9%80%9A%E8%AE%AF%E5%BD%95%E7%9A%84%E5%BD%95%E5%85%A5%E4%B8%8E%E6%98%BE%E7%A4%BA%20(10%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E9%80%9A%E8%AE%AF%E5%BD%95%E7%9A%84%E5%BD%95%E5%85%A5%E4%B8%8E%E6%98%BE%E7%A4%BA%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>通讯录中的一条记录包含下述基本信息：朋友的姓名、出生日期、性别、固定电话号码、移动电话号码。 本题要求编写程序，录入N条记录，并且根据要求显示任意某条记录。</p><h3 id="输入格式：">输入格式：</h3><p>输入在第一行给出正整数N（≤10）；随后N行，每行按照格式<code>姓名 生日 性别 固话 手机</code>给出一条记录。其中<code>姓名</code>是不超过10个字符、不包含空格的非空字符串；生日按<code>yyyy/mm/dd</code>的格式给出年月日；性别用<code>M</code>表示“男”、<code>F</code>表示“女”；<code>固话</code>和<code>手机</code>均为不超过15位的连续数字，前面有可能出现<code>+</code>。</p><p>在通讯录记录输入完成后，最后一行给出正整数K，并且随后给出K个整数，表示要查询的记录编号（从0到N−1顺序编号）。数字间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>对每一条要查询的记录编号，在一行中按照<code>姓名 固话 手机 性别 生日</code>的格式输出该记录。若要查询的记录不存在，则输出<code>Not Found</code>。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">3Chris 1984/03/10 F +86181779452 13707010007LaoLao 1967/11/30 F 057187951100 +8618618623333QiaoLin 1980/01/01 M 84172333 100862 1 7</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">LaoLao 057187951100 +8618618623333 F 1967/11/30Not Found</code></pre><p>结尾无空行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tongxu</span>&#123;<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>  <span class="hljs-type">char</span> birthday[<span class="hljs-number">11</span>];<br>  <span class="hljs-type">char</span> sex[<span class="hljs-number">2</span>];<br>  <span class="hljs-type">char</span> telephone1[<span class="hljs-number">17</span>];<br>  <span class="hljs-type">char</span> telephone2[<span class="hljs-number">17</span>];<br>&#125; tongxun ;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    tongxun s[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> n,i,m,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>       <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%s%s%s&quot;</span>,s[i].name,s[i].birthday,s[i].sex,s[i].telephone1,s[i].telephone2);<br><br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>        <span class="hljs-keyword">if</span>(m&gt;=n||m&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Found\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s %s %s %s\n&quot;</span>,s[m].name,s[m].telephone1,s[m].telephone2,s[m].sex,s[m].birthday);<br>        &#125;<br>        <br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA C语言结构体 7-5 复数四则运算 (15 分)</title>
    <link href="/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/PTA%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%207-5%20%E5%A4%8D%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%20(15%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/C%E8%AF%AD%E8%A8%80/PTA%20C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%207-5%20%E5%A4%8D%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%20(15%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>本题要求编写程序，计算2个复数的和、差、积、商。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中按照<code>a1 b1 a2 b2</code>的格式给出2个复数C1=<code>a1+b1i</code>和C2=<code>a2+b2i</code>的实部和虚部。题目保证C2不为0。</p><h3 id="输出格式：">输出格式：</h3><p>分别在4行中按照<code>(a1+b1i) 运算符 (a2+b2i) = 结果</code>的格式顺序输出2个复数的和、差、积、商，数字精确到小数点后1位。如果结果的实部或者虚部为0，则不输出。如果结果为0，则输出0.0。</p><h3 id="输入样例1：">输入样例1：</h3><pre><code class="hljs">2 3.08 -2.04 5.06</code></pre><p>结尾无空行</p><h3 id="输出样例1：">输出样例1：</h3><pre><code class="hljs">(2.0+3.1i) + (-2.0+5.1i) = 8.1i(2.0+3.1i) - (-2.0+5.1i) = 4.0-2.0i(2.0+3.1i) * (-2.0+5.1i) = -19.7+3.8i(2.0+3.1i) / (-2.0+5.1i) = 0.4-0.6i</code></pre><p>结尾无空行</p><h3 id="输入样例2：">输入样例2：</h3><pre><code class="hljs">1 1 -1 -1.01</code></pre><h3 id="输出样例2：">输出样例2：</h3><pre><code class="hljs">(1.0+1.0i) + (-1.0-1.0i) = 0.0(1.0+1.0i) - (-1.0-1.0i) = 2.0+2.0i(1.0+1.0i) * (-1.0-1.0i) = -2.0i(1.0+1.0i) / (-1.0-1.0i) = -1.0</code></pre><pre><code class="hljs">#include&lt;stdio.h&gt;#include&lt;math.h&gt;void result(double a1,double b1,double a2,double b2,int i); int main()&#123;    double  a1,b1,a2,b2;    scanf("%lf%lf%lf%lf",&amp;a1,&amp;b1,&amp;a2,&amp;b2);    <pre><code class="hljs">for(int i=0;i&amp;lt;4;i++)&#123;    if(i==0)    &#123;        if(b1&amp;gt;=0&amp;amp;&amp;amp;b2&amp;gt;=0)        printf(&quot;(%.1lf+%.1lfi) + (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp; b2&amp;gt;=0)        printf(&quot;(%.1lf%.1lfi) + (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp; b2&amp;lt;0)        printf(&quot;(%.1lf%.1lfi) + (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        else        printf(&quot;(%.1lf+%.1lfi) + (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        result(a1,b1,a2,b2,i);    &#125;    else if(i==1)&#123;        if(b1&amp;gt;=0&amp;amp;&amp;amp;b2&amp;gt;=0)        printf(&quot;(%.1lf+%.1lfi) - (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp; b2&amp;gt;=0)        printf(&quot;(%.1lf%.1lfi) - (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp;b2&amp;lt;0)        printf(&quot;(%.1lf%.1lfi) - (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        else        printf(&quot;(%.1lf+%.1lfi) - (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        result(a1,b1,a2,b2,i);    &#125;    else if(i==2)&#123;        if(b1&amp;gt;=0&amp;amp;&amp;amp;b2&amp;gt;=0)        printf(&quot;(%.1lf+%.1lfi) * (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp; b2&amp;gt;=0)        printf(&quot;(%.1lf%.1lfi) * (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0&amp;amp;&amp;amp;b2&amp;lt;0)        printf(&quot;(%.1lf%.1lfi) * (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        else        printf(&quot;(%.1lf+%.1lfi) * (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        result(a1,b1,a2,b2,i);    &#125;    else if(i==3)&#123;        if(b1&amp;gt;=0&amp;amp;&amp;amp;b2&amp;gt;=0)        printf(&quot;(%.1lf+%.1lfi) / (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0 &amp;amp;&amp;amp; b2&amp;gt;=0)        printf(&quot;(%.1lf%.1lfi) / (%.1lf+%.1lfi) = &quot;,a1,b1,a2,b2);        else if(b1&amp;lt;0&amp;amp;&amp;amp;b2&amp;lt;0)        printf(&quot;(%.1lf%.1lfi) / (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        else        printf(&quot;(%.1lf+%.1lfi) / (%.1lf%.1lfi) = &quot;,a1,b1,a2,b2);        result(a1,b1,a2,b2,i);    &#125;&#125;</code></pre><p>}<br>void result(double a1,double b1,double a2,double b2,int i){<br>    double really,v;<br>    if(i&#x3D;&#x3D;0){<br>        really&#x3D;a1+a2;<br>        v&#x3D;b1+b2;<br>    }<br>    else if(i&#x3D;&#x3D;1){<br>        really&#x3D;a1-a2;<br>        v&#x3D;b1-b2;<br>    }<br>    else if(i&#x3D;&#x3D;2){<br>        really&#x3D;a1<em>a2-b1</em>b2;<br>        v&#x3D;a2<em>b1+a1</em>b2;<br>    }<br>    else if(i&#x3D;&#x3D;3){<br>        &#x2F;<em>double fenzi,fenmu;<br>&#x2F;&#x2F;MultReally(a1,b1,a2,-b2)+MultV(a1,b1,a2,-b2);<br>        fenmu&#x3D;a2</em>a2-b2<em>b2;<br>        really&#x3D;MultReally(a1,b1,a2,-b2)&#x2F;fenmu;<br>        v&#x3D;MultV(a1,b1,a2,-b2)&#x2F;fenmu;</em>&#x2F;</p><pre><code class="hljs">    really=(a1*a2+b1*b2)/(a2*a2+b2*b2);    v=(a2*b1-a1*b2)/(a2*a2+b2*b2);    if(a2==0&amp;amp;&amp;amp;b2==0)&#123;        really=0;        v=0;            &#125;&#125;</code></pre><p>&#x2F;&#x2F;if(really&#x3D;&#x3D;0) printf(“yes\n”);<br>    if(fabs(really)&lt;0.1&amp;&amp;fabs(v)&gt;0.1){&#x2F;&#x2F;实部为0<br>        printf(“%.1fi\n”,v);<br>    }<br>    else if(fabs(really)&gt;0.1&amp;&amp;fabs(v)&lt;0.1)<br>    {&#x2F;&#x2F;虚部为0<br>        printf(“%.1lf\n”,really);<br>    }<br>    else if(fabs(really)&gt;0.1&amp;&amp;fabs(v)&gt;0.1){<br>        if(v&lt;0)<br>            printf(“%.1lf%.1lfi\n”,really,v);</p><pre><code class="hljs">    else        printf(&quot;%.1lf+%.1lfi\n&quot;,really,v);&#125;else if(fabs(really)&amp;lt;0.1&amp;amp;&amp;amp;fabs(v)&amp;lt;0.1) printf(&quot;0.0\n&quot;);</code></pre><p>}</code></pre></p><p> </p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA Python 6-9 sdut-求嵌套列表的平均值 (10 分)</title>
    <link href="/2021/11/19/categories/python/PTA%20Python%206-9%20sdut-%E6%B1%82%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%20(10%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/python/PTA%20Python%206-9%20sdut-%E6%B1%82%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>Avg是一个求平均值的函数。它的参数是嵌套列表，求每个元素的平均值。每个元素是列表，至少有1个值。</p><h3 id="函数接口定义：">函数接口定义：</h3><pre><code class="hljs"> Avg(lst)</code></pre><p>lst是一个二维嵌套列表，该函数返回值是每个元素的平均值组成的列表。</p><h3 id="裁判测试程序样例：">裁判测试程序样例：</h3><pre><code class="hljs">/* 请在这里填写答案 */<p>lst&#x3D;eval(input())<br>result&#x3D;Avg(lst)<br>for value in result:<br>    print(“&#123;:.1f&#125;”.format(value),end&#x3D;” “)<br></code></pre></p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">[[95,92,80],[66,75,40],[89,72,100,91]]</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">89.0 60.3 88.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Avg</span>(<span class="hljs-params">lst</span>):<br>    blst = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst)):<br>        fin = <span class="hljs-number">0</span><br>        avg = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst[i])):<br>            fin = fin + lst[i][j]<br>        avg = fin / <span class="hljs-built_in">len</span>(lst[i])<br>        blst.append(avg)<br>    <span class="hljs-keyword">return</span> blst<br><br></code></pre></td></tr></table></figure><p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/86f766f2681d98b8017f4c5c6f6f7f87.png"/></p><p> </p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA python 6-4 整数数位和（高教社，《Python编程基础及应用》习题8-3） (4 分)</title>
    <link href="/2021/11/19/categories/python/PTA%20python%206-4%20%E6%95%B4%E6%95%B0%E6%95%B0%E4%BD%8D%E5%92%8C%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%988-3%EF%BC%89%20(4%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/python/PTA%20python%206-4%20%E6%95%B4%E6%95%B0%E6%95%B0%E4%BD%8D%E5%92%8C%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%988-3%EF%BC%89%20(4%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>编写一个函数，该函数接受一个正整数作为参数，返回该整数的各位数字之和。</p><h3 id="函数接口定义：">函数接口定义：</h3><pre><code class="hljs">def digitSum(v)</code></pre><p>v为输入整数（正整数）； 函数返回一个整数，其值为v的各位数字之和。</p><h3 id="裁判测试程序样例：">裁判测试程序样例：</h3><pre><code class="hljs">a = int(input())print(digitSum(a))</code></pre><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">291</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">12</code></pre><p>结尾无空行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digitSum</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> v:<br>        <span class="hljs-built_in">sum</span>+=v%<span class="hljs-number">10</span><br>        v//=<span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span> (<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA python 6-10 判断素数函数 (9 分)</title>
    <link href="/2021/11/19/categories/python/PTA%20python%206-10%20%E5%88%A4%E6%96%AD%E7%B4%A0%E6%95%B0%E5%87%BD%E6%95%B0%20(9%20%E5%88%86)/"/>
    <url>/2021/11/19/categories/python/PTA%20python%206-10%20%E5%88%A4%E6%96%AD%E7%B4%A0%E6%95%B0%E5%87%BD%E6%95%B0%20(9%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><h3 id="函数接口定义：">函数接口定义：</h3><pre><code class="hljs">def isPrime(n): </code></pre><h3 id="裁判测试程序样例：">裁判测试程序样例：</h3><pre><code class="hljs">/* 请在这里填写答案 */num = int(input())        #接收用户输入并转成整数for i in range(num+1):    if isPrime(i):        print(i,end=' ')  #在同一行内输出结果，不换行，中间用空格分隔</code></pre><h3 id="输入样例：">输入样例：</h3><p>在这里给出一组输入。例如：</p><pre><code class="hljs">100</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><p>在这里给出相应的输出。例如：</p><pre><code class="hljs">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 </code></pre><p>结尾无空行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">n</span>):<br>    flag=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> n&gt;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>            <span class="hljs-keyword">if</span> n%i==<span class="hljs-number">0</span>:<br>                flag=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> flag==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> n        <br><br></code></pre></td></tr></table></figure><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p><p>写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。写一个函数isPrime(n)用于判断一个数字n是不是素数，用户输入一个正整数，在一行内输出不大于该数的所有素数，各数后面用一个空格分隔。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 7-6 删除重复元素 (10 分)</title>
    <link href="/2021/11/18/categories/python/python%207-6%20%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20(10%20%E5%88%86)/"/>
    <url>/2021/11/18/categories/python/python%207-6%20%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>对于给定的数列，要求把其中的重复元素删去再从小到大输出。</p><h3 id="输入格式">输入格式:</h3><p>首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试数据先输入一个整数n（1≤n≤100），再输入n个整数。</p><h3 id="输出格式">输出格式:</h3><p>对于每组测试，从小到大输出删除重复元素之后的结果，每两个数据之间留一个空格。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">110 1 2 2 2 3 3 1 5 4 5</code></pre><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">1 2 3 4 5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">T=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> T&gt;<span class="hljs-number">0</span>:<br>    lists=[]<br>    a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>        lists.append(a[i])<br>    lists.sort()<br>    t = lists[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lists)-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> t == lists[i]:<br>    lists.remove(lists[i])<br>    <span class="hljs-keyword">else</span>:<br>    t = lists[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(lists)-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(lists[i],end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(lists[<span class="hljs-built_in">len</span>(lists)-<span class="hljs-number">1</span>])<br>    T=T-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 7-5 统计字符个数 (10 分)</title>
    <link href="/2021/11/18/categories/python/Python%207-5%20%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0%20(10%20%E5%88%86)/"/>
    <url>/2021/11/18/categories/python/Python%207-5%20%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>输入若干的字符串，每个字符串中只包含数字字符和大小写英文字母，统计字符串中有出现的不同字符的出现次数。</p><h3 id="输入格式">输入格式:</h3><p>测试数据有多组，处理到文件尾。每组测试输入一个字符串（不超过80个字符）。</p><h3 id="输出格式">输出格式:</h3><p>对于每组测试，按字符串中有出现的字符的ASCII码升序逐行输出不同的字符及其个数（两个数据之间留一个空格），每两组测试数据之间留一空行，输出格式参照输出样例。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">12123A1c1B</code></pre><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">1 22 23 1<p>1 2<br>A 1<br>B 1<br>c 1</code></pre></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        a_list=<span class="hljs-built_in">input</span>()<br>        <span class="hljs-keyword">if</span> a&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>()<br>        n=<span class="hljs-built_in">len</span>(a_list)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>            c=<span class="hljs-built_in">str</span>(i)<br>            b=a_list.count(c)<br>            <span class="hljs-keyword">if</span> b&gt;<span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%c %d&quot;</span>%(c,b))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>,<span class="hljs-number">123</span>):<br>            c=<span class="hljs-built_in">chr</span>(i)<br>            b=a_list.count(c)<br>            <span class="hljs-keyword">if</span> b&gt;<span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%c %d&quot;</span>%(c,b))<br>        a=a+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-137 计算工资 (25 分)（C语言）</title>
    <link href="/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/7-137%20%E8%AE%A1%E7%AE%97%E5%B7%A5%E8%B5%84%20(25%20%E5%88%86)%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
    <url>/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/7-137%20%E8%AE%A1%E7%AE%97%E5%B7%A5%E8%B5%84%20(25%20%E5%88%86)%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>某公司员工的工资计算方法如下：一周内工作时间不超过40小时，按正常工作时间计酬；超出40小时的工作时间部分，按正常工作时间报酬的1.5倍计酬。员工按进公司时间分为新职工和老职工，进公司不少于5年的员工为老职工，5年以下的为新职工。新职工的正常工资为30元/小时，老职工的正常工资为50元/小时。请按该计酬方式计算员工的工资。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出2个正整数，分别为某员工入职年数和周工作时间，其间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>在一行输出该员工的周薪，精确到小数点后2位。</p><h3 id="输入样例1：">输入样例1：</h3><pre><code class="hljs">5 40</code></pre><p>结尾无空行</p><h3 id="输出样例1：">输出样例1：</h3><pre><code class="hljs">2000.00</code></pre><p>结尾无空行</p><h3 id="输入样例2：">输入样例2：</h3><pre><code class="hljs">3 50</code></pre><h3 id="输出样例2：">输出样例2：</h3><pre><code class="hljs">1650.00</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> year,time;<br>    <span class="hljs-type">float</span> money;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;year,&amp;time);<br>    <span class="hljs-keyword">if</span>(year&lt;<span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">if</span>(time&lt;=<span class="hljs-number">40</span>)&#123;<br>         money=<span class="hljs-number">30</span>*time;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(time&gt;<span class="hljs-number">40</span>)&#123;<br>             money=<span class="hljs-number">30</span>*<span class="hljs-number">40</span>+<span class="hljs-number">45</span>*(time<span class="hljs-number">-40</span>);<br>        &#125;<br>      &#125;<br>    <span class="hljs-keyword">if</span>(year&gt;=<span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">if</span>(time&lt;=<span class="hljs-number">40</span>)&#123;<br>             money=<span class="hljs-number">50</span>*time;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(time&gt;<span class="hljs-number">40</span>)&#123;<br>             money=<span class="hljs-number">50</span>*<span class="hljs-number">40</span>+<span class="hljs-number">75</span>*(time<span class="hljs-number">-40</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>,money);<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是广度优先遍历</title>
    <link href="/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/%E8%BF%99%E6%98%AF%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
    <url>/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/%E8%BF%99%E6%98%AF%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>, a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, cur = <span class="hljs-number">0</span>, book[<span class="hljs-number">101</span>] = &#123; <span class="hljs-number">0</span> &#125;, e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> que[<span class="hljs-number">10001</span>] = &#123; <span class="hljs-number">0</span> &#125;, d[<span class="hljs-number">101</span>] = &#123; <span class="hljs-number">0</span> &#125;,head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == i)<br>&#123;<br>e[i][j] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[i][j] = <span class="hljs-number">99999999</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//读入顶点之间的边</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>e[a][b] = <span class="hljs-number">1</span>;<br>e[b][a] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//队列初始化</span><br>head = <span class="hljs-number">1</span>;<br>tail = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//从一号顶点出发，将一号顶点加入队列</span><br>que[tail] = <span class="hljs-number">1</span>;<br>tail++;<br>book[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//标记1号顶点已访问</span><br><span class="hljs-comment">//当队列不为0时循环</span><br><span class="hljs-keyword">while</span> (head&lt;tail&amp;&amp;tail&lt;=n)<br>&#123;<br>cur = que[head];<span class="hljs-comment">//当前正在访问的顶点的编号</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<span class="hljs-comment">//从1-n依次尝试</span><br>&#123;<br><span class="hljs-keyword">if</span> (e[cur][i] == <span class="hljs-number">1</span> &amp;&amp; book[i] == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//如果从顶点cur到顶点i有边，并且顶点i没有被访问过，则顶点i入队</span><br>d[cur]++;<br>que[tail] = i;<br>tail++;<br>book[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//如果tail大于n，则表明所有顶点都已经被访问过</span><br><span class="hljs-keyword">if</span> (tail &gt; n)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>head++;<span class="hljs-comment">//注意这个地方，千万不要忘记当一个顶点扩展结束后，head++，然后才能继续往下扩展</span><br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;tail; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, que[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; tail; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, d[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一个无向图的深度优先搜索</title>
    <link href="/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%97%A0%E5%90%91%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/11/18/categories/C%E8%AF%AD%E8%A8%80/%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%97%A0%E5%90%91%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">//这是一个无向图的深度优先搜索#include&lt;stdio.h&gt;int book[101] = &#123; 0 &#125;;int e[101][101] = &#123; 0 &#125;;int sum = 0;int n = 0;int d[101] = &#123; 0 &#125;;void dfs(int cur)//当前顶点的编号&#123;    printf("%d ", cur);    sum++;    if (sum == n)//如果所有顶点都访问过直接退出    &#123;        return ;    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        if (e[cur][i] == 1 &amp;&amp; 0 == book[i])        &#123;            book[i] = 1;//标记顶点i已经访问过            dfs(i);//从顶点i出发        &#125;    &#125;    return ;&#125;int main(void)&#123;    int i = 0;    int j = 0;    int m = 0;    int a = 0;    int b = 0;    scanf("%d%d", &amp;n, &amp; m);    //初始化二维矩阵    for (i = 1; i &lt;= n; i++)    &#123;        for (j = 1; j &lt;= n; j++)        &#123;            if (i == j)            &#123;                e[i][j] = 0;            &#125;            else            &#123;                e[i][j] = 99999999;//设99999999为无穷            &#125;        &#125;    &#125;    //读入顶点之间的边    for (i = 1; i &lt;= m; i++)    &#123;        scanf("%d%d", &amp;a, &amp;b);        d[a]++;        d[b]++;        e[a][b] = 1;//这是一个无向图        e[b][a] = 1;    &#125;    book[1] = 1;    dfs(1);    printf("\n");    for (i = 1; i &lt;=n; i++)    &#123;        printf("%d ", d[i]);    &#125;    return 0;&#125;</code></pre><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现简易版的扫雷游戏</title>
    <link href="/2021/11/13/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%9A%84%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/11/13/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%89%88%E7%9A%84%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p id="main-toc"><strong>目录</strong></p><p id="%E5%9C%A8%E6%AD%A3%E5%BC%8F%E8%AE%B2%E5%86%85%E5%AE%B9%E4%B9%8B%E5%89%8D%E5%85%88%E8%AF%B4%E4%B8%80%E8%AF%B4%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%84%E5%88%99-toc" style="margin-left:0px;"><a href="#%E5%9C%A8%E6%AD%A3%E5%BC%8F%E8%AE%B2%E5%86%85%E5%AE%B9%E4%B9%8B%E5%89%8D%E5%85%88%E8%AF%B4%E4%B8%80%E8%AF%B4%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%84%E5%88%99">在正式讲内容之前先说一说扫雷游戏的规则</a></p><p id="%E9%A6%96%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%8Btest.c%EF%BC%9A-toc" style="margin-left:0px;"><a href="#%E9%A6%96%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%8Btest.c%EF%BC%9A">首先看一下test.c：</a></p><p id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.h%EF%BC%9A-toc" style="margin-left:0px;"><a href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.h%EF%BC%9A">接下来是game.h：</a></p><p id="%C2%A0%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.c%EF%BC%9A-toc" style="margin-left:0px;"><a href="#%C2%A0%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.c%EF%BC%9A"> 接下来是game.c：</a></p><hr id="hr-toc"/><p></p><p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/a23bea71b340722ca48938869c0a2c6b.png"/></p><p></p><p id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.h%EF%BC%9A-toc" style="margin-left:0px;"></p><p id="%C2%A0%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.c%EF%BC%9A-toc" style="margin-left:0px;"></p><h1 id="%E5%9C%A8%E6%AD%A3%E5%BC%8F%E8%AE%B2%E5%86%85%E5%AE%B9%E4%B9%8B%E5%89%8D%E5%85%88%E8%AF%B4%E4%B8%80%E8%AF%B4%E6%89%AB%E9%9B%B7%E6%B8%B8%E6%88%8F%E7%9A%84%E8%A7%84%E5%88%99">在正式讲内容之前先说一说扫雷游戏的规则</h1><p>游戏规则很简单，点击方格，如果是地雷，游戏失败，找到所有地雷游戏胜利</p><p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/0007193babf3612c04ae37d6bf990de2.png"/></p><ul><li> <p>.刚开始需要碰运气，只要点开一个区域，就可以正式开始了。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/00421d670c7982b914b08aafd47d6a88.png"/></p> </li><li>3 <p>根据现有情况，判断出一定有雷的位置。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/55a502e8dec6817ef46879c4de9a2f3e.png"/></p> <p></p> </li><li>4 <p>进一步计算，因为“2”右边的“1”已经有从属的雷了，所以右边的“2”的正下方没有雷，因此可以判断出左边有两颗雷，满足两个“2”。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/b7a9d610376dedeba6fcb06950e738cf.png"/></p> </li><li>5 <p>红圈表明的“1”已经有一颗确定的雷了，这时只需要把鼠标放在“1”上，按住右键不放，再点一下左键，“1”周围的其他方块就全被点开了。这个小技巧对于提升速度非常有帮助。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/9ecd6430f931f5b58df2ec03edfc3d95.png"/></p> </li><li>6 <p>左上角的“1”旁边必须有一颗雷，可能在红圈圈住的两个块中，目前还无法确定。但是不论在两个中的哪一个，都从属于“3”，因此“3”周围已经有了三颗雷，“3”左下角的方块可以确定没有雷。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/1bd678dc8adbd993f966b9228b73aea6.png"/></p> </li><li>7 <p>红圈框住的位置肯定有一颗雷，因为“3”周围必须有三颗雷。不论在两个中的哪一个，都从属于“3旁边的“2”，这样“2”就满足两颗雷的条件了。因此“2”左下角的块是没有雷的。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/b4ef18cc3f7822a0be1cb66eea558329.png"/></p> </li><li>8 <p>这样一来，“3”下面的两个块可以确定都是有雷的。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/c762a245c4e92eaef92714150d2f9ee3.png"/></p> </li><li>9 <p>把这些有雷的地方标出来，就打开了一片新天地。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/590a7a900aa9dfdff0fea8212345e6a2.png"/></p> </li><li>10 <p>再根据现有的条件把确定有雷的地方表明，点开其他的地方。这时我们发现刚才左上角遗留的问题解决了。</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/73f61d66d85eec80c7ca3a8fe8dd3b77.png"/></p> </li><li>11 <p>重复上面的各种方法，不断推理出，最后就能完成扫雷</p> <p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/a4e0bb7a06f5bf9307c052852b458844.png"/></p> </li></ul><p></p><p> 好了，规则已经讲完了，现在来说一说怎么实现的吧：</p><p><strong>首先还是得创建三个文件夹，分别为game.c 游戏需要的具体函数的实现 game.h （所要用的头文件）test.c（游戏的逻辑，菜单，以及函数顺序调用）。</strong></p><h1 id="%E9%A6%96%E5%85%88%E7%9C%8B%E4%B8%80%E4%B8%8Btest.c%EF%BC%9A"><strong>首先看一下test.c：</strong></h1><p><strong>游戏大概的逻辑就是布置雷，把棋盘打印出来，然后玩家自己扫雷，这部分代码不是很难理解</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;game.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> mine[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//存放布置雷的信息 0无雷 1有雷</span><br><span class="hljs-type">char</span> show[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//展示给用户看并且存放排查出的雷的信息</span><br><br><span class="hljs-built_in">InitBoard</span>(mine, ROWS, COLS, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-built_in">InitBoard</span>(show, ROWS, COLS, <span class="hljs-string">&#x27;*&#x27;</span>);<br><br><span class="hljs-comment">//布置雷</span><br><span class="hljs-built_in">SetMine</span>(mine, ROW, COL);<br><span class="hljs-comment">//打印棋盘</span><br><span class="hljs-comment">//DisplayBoard(mine, ROW, COL);</span><br><span class="hljs-built_in">DisplayBoard</span>(show, ROW, COL);<br><span class="hljs-comment">//排雷</span><br><span class="hljs-built_in">FindMine</span>(mine,show, ROW, COL);<br>&#125;<br><span class="hljs-comment">//游戏菜单界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***1.开始***\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***0.退出***\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;************\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//选择玩或不玩</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;   <br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">menu</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择-&gt;;&quot;</span>);<br><span class="hljs-built_in">scanf_s</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-comment">//扫雷</span><br><span class="hljs-built_in">game</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,input);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;即将退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误,请重新输入:\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.h%EF%BC%9A">接下来是game.h：</h1><p>          我将所使用到的函数和代码段都写入了代码里应该不难理解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 9<span class="hljs-comment">//打印出来的棋盘大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 9<span class="hljs-comment">//打印出来的棋盘大小</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROWS ROW+2<span class="hljs-comment">//实际棋盘大小，为了防止越界</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COLS COL+2<span class="hljs-comment">//实际棋盘大小，为了防止越界</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EASY_COUNT 10<span class="hljs-comment">//简单模式10个雷然后根据自己的需要调整大小</span></span><br><br><span class="hljs-comment">//初始化棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> set)</span></span>;<br><span class="hljs-comment">//打印棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><span class="hljs-comment">//布置雷</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><span class="hljs-comment">//找雷</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br></code></pre></td></tr></table></figure><h1 id="%C2%A0%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AFgame.c%EF%BC%9A"> 接下来是game.c：</h1><p>扫雷游戏有一个功能是，点开一个位置，如果周围都没有雷的话就会展开那一片，我们这里用递归来实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//将棋盘展开的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Open</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS],<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">get_mine_count</span>(mine, x, y);<br><span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span>)<br>&#123;<br>show[x][y] = <span class="hljs-string">&#x27;0&#x27;</span> + n;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>show[x][y] = <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = x - <span class="hljs-number">1</span>; i &lt;= x + <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (j = y - <span class="hljs-number">1</span>; j &lt;= y + <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-built_in">Open</span>(mine, show, i, j);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;game.h&quot;</span></span><br><span class="hljs-comment">//初始化棋盘：全部为&#x27;*&#x27;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> set)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; rows; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; cols; j++)<br>&#123;<br>board[i][j] = set;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 显示应该给用户显示的界面‘*’</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= row; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d|&quot;</span>, i);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-|&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d|&quot;</span>, i );<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c|&quot;</span>, board[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;col+<span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-|&quot;</span>);<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> count = EASY_COUNT;<br><span class="hljs-keyword">while</span> (count)<br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">rand</span>() % row + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-built_in">rand</span>() % col + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>board[x][y] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>count--;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">get_mine_count</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mine[x + <span class="hljs-number">1</span>][y] +<br>mine[x - <span class="hljs-number">1</span>][y] +<br>mine[x][y + <span class="hljs-number">1</span>] +<br>mine[x][y - <span class="hljs-number">1</span>] +<br>mine[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] +<br>mine[x - <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] +<br>mine[x + <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] +<br>mine[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] -<br><span class="hljs-number">8</span> * <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//将棋盘展开的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Open</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS],<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">get_mine_count</span>(mine, x, y);<br><span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span>)<br>&#123;<br>show[x][y] = <span class="hljs-string">&#x27;0&#x27;</span> + n;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>show[x][y] = <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = x - <span class="hljs-number">1</span>; i &lt;= x + <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (j = y - <span class="hljs-number">1</span>; j &lt;= y + <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-built_in">Open</span>(mine, show, i, j);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要查询的坐标-&gt;&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">500</span>);<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;1&#x27;</span> == mine[x][y])<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;很遗憾，你无了\n&quot;</span>);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">500</span>);<br><span class="hljs-built_in">DisplayBoard</span>(mine, row, col);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//计算坐标x，y周围有几个雷</span><br><span class="hljs-built_in">Open</span>(mine,show,x,y);<br><span class="hljs-built_in">DisplayBoard</span>(show, row, col);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入坐标非法，无法排雷，请重新输入\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (show[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br>flag++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag == EASY_COUNT)<span class="hljs-comment">//棋盘全部展开后扫描玩家找的雷的个数是否复合实际雷的个数</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;恭喜你,你赢了!\n&quot;</span>);<br><span class="hljs-built_in">DisplayBoard</span>(mine, row, col);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>由于我要去睡觉了，就先写到这里了，如有需要可以直接拿走，如有不懂的地方可以私信我，我们一起探讨！！！</p><p id="main-toc"></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现三子棋（井字棋）小游戏</title>
    <link href="/2021/11/08/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%EF%BC%88%E4%BA%95%E5%AD%97%E6%A3%8B%EF%BC%89%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/11/08/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%EF%BC%88%E4%BA%95%E5%AD%97%E6%A3%8B%EF%BC%89%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p> </p><p id="main-toc"><strong> 目录</strong></p><p id="%E6%88%91%E5%86%99%E8%BF%99%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B0%B1%E5%83%8F%E8%BF%99%E6%A0%B7%EF%BC%9A-toc" style="margin-left:0px;"></p><p id="%E6%88%91%E5%86%99%E8%BF%99%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B0%B1%E5%83%8F%E8%BF%99%E6%A0%B7%EF%BC%9A-toc" style="margin-left:0px;"><a href="#%E6%88%91%E5%86%99%E8%BF%99%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B0%B1%E5%83%8F%E8%BF%99%E6%A0%B7%EF%BC%9A" title=" 我写这个小游戏创建了三个文件就像这样："> 我写这个小游戏创建了三个文件就像这样：</a></p><p id="test.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A-toc" style="margin-left:40px;"><a href="#test.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A" title="test.c的全部内容如下：">test.c的全部内容如下：</a></p><p id="%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%8B%E7%9B%98%EF%BC%9A-toc" style="margin-left:40px;"><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%8B%E7%9B%98%EF%BC%9A" title="初始化棋盘：">初始化棋盘：</a></p><p id="%E5%B1%95%E7%A4%BA%E6%A3%8B%E7%9B%98%EF%BC%9A-toc" style="margin-left:40px;"><a href="#%E5%B1%95%E7%A4%BA%E6%A3%8B%E7%9B%98%EF%BC%9A" title="展示棋盘：">展示棋盘：</a></p><p id="%E7%8E%A9%E5%AE%B6%E4%B8%8B%E6%A3%8B%EF%BC%9A-toc" style="margin-left:40px;"><a href="#%E7%8E%A9%E5%AE%B6%E4%B8%8B%E6%A3%8B%EF%BC%9A" title="玩家下棋：">玩家下棋：</a></p><p id="%C2%A0%E7%94%B5%E8%84%91%E4%B8%8B%E6%A3%8B%EF%BC%9A-toc" style="margin-left:40px;"><a href="#%C2%A0%E7%94%B5%E8%84%91%E4%B8%8B%E6%A3%8B%EF%BC%9A" title=" 电脑下棋："> 电脑下棋：</a></p><p id="%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2%E8%BF%98%E6%98%AF%E5%B9%B3%E5%B1%80%EF%BC%9A-toc" style="margin-left:40px;"><a href="#%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2%E8%BF%98%E6%98%AF%E5%B9%B3%E5%B1%80%EF%BC%9A" title="判断输赢还是平局：">判断输赢还是平局：</a></p><p id="game.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A-toc" style="margin-left:40px;"><a href="#game.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A" title="game.c的全部内容如下：">game.c的全部内容如下：</a></p><p id="%E6%9C%80%E7%BB%88%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-toc" style="margin-left:0px;"><a href="#%E6%9C%80%E7%BB%88%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" title="最终运行结果"><span style="color:#4da8ee;">最终运行结果</span></a></p><p> 系统头文件用&lt;&gt;比如 : #include&lt;stdio.h&gt;</p><p>自己写的头文件用""比如 : #include"game.h"</p><p> 我建议写的代码量大的话可以自己创建一个头文件里面包含着系统头文件以及自定义的函数。</p><p>每段代码的意思我将会在代码段里面解释</p><h1 id="%E6%88%91%E5%86%99%E8%BF%99%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%9B%E5%BB%BA%E4%BA%86%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B0%B1%E5%83%8F%E8%BF%99%E6%A0%B7%EF%BC%9A"></h1><h1> <strong>我写这个小游戏创建了三个文件就像这样：</strong></h1><p><img alt="" height="59" src="https://img-blog.csdnimg.cn/7b0dd12e7ed64facaa2aa8e72d8eb421.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_13,color_FFFFFF,t_70,g_se,x_16" width="409"/></p><p id="%C2%A0game.h%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A"> game.h内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-comment">//自定义棋盘大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 3</span><br><br><span class="hljs-comment">//初始化棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//打印棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//玩家下棋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">player_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//电脑下棋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computer_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//判断输赢的代码</span><br><span class="hljs-comment">//玩家赢 - &#x27;*&#x27;</span><br><span class="hljs-comment">//电脑赢 - &#x27;#&#x27;</span><br><span class="hljs-comment">//平局 --- &#x27;Q&#x27;</span><br><span class="hljs-comment">//继续 ----&#x27;C&#x27;</span><br><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">is_win</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br></code></pre></td></tr></table></figure><p><strong><span style="color:#fe2c24;"> 本人建议之后写代码如果涉及到坐标的大小建议传ROW COL</span></strong></p><p><strong><span style="color:#fe2c24;">因为这样如果想要改棋盘大小直接在宏定义那一部分改大小，这样比较方便。</span></strong></p><p>比如：将3*3的棋盘改为5*5：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3-&gt;#<span class="hljs-keyword">define</span> ROW 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 3 -&gt;#<span class="hljs-keyword">define</span> COL 5</span><br></code></pre></td></tr></table></figure><h2 id="test.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A"><span style="color:#0d0016;">test.c的全部内容如下：</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;game.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t***三子棋***\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t************\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t*  1.play  *\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t*  0.exit  *\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t************\t\t\t\t\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//数据存储到一个字符的二维数组中，玩家下棋是&#x27;*&#x27;,电脑下棋是&#x27;#&#x27;</span><br><span class="hljs-type">char</span> board[ROW][COL] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//数组的初始内容应该是全部空格</span><br><span class="hljs-built_in">InitBoard</span>(board, ROW, COL);<span class="hljs-comment">//初始化棋牌</span><br><span class="hljs-comment">//打印棋盘</span><br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br><span class="hljs-comment">//下棋</span><br><span class="hljs-type">char</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">player_move</span>(board, ROW, COL);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br>ret = <span class="hljs-built_in">is_win</span>(board, ROW, COL);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">computer_move</span>(board, ROW, COL);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">DisplayBoard</span>(board,ROW, COL);<br>ret = <span class="hljs-built_in">is_win</span>(board, ROW, COL);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t恭喜你赢了！\t\t\t\t\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t很可惜你输了\t\t\t\t\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;平局\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">menu</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请选择:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">game</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t退出游戏&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t选择错误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img alt="" height="140" src="https://img-blog.csdnimg.cn/29e6850a1a8b441188a2482f62ea5eda.png" width="285"> <img alt="" height="135" src="https://img-blog.csdnimg.cn/4d2024de8f844d72ad5f823ae5eb2f80.png" width="148"/></img></p><h2 id="%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%8B%E7%9B%98%EF%BC%9A">初始化棋盘：</h2><p>                因为刚开始还没有输入字符，所以将内容初始化为空格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ROW; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; COL; j++)<br>&#123;<br>board[i][j] =<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="%E5%B1%95%E7%A4%BA%E6%A3%8B%E7%9B%98%EF%BC%9A">展示棋盘：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp">​<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, board[i][j]);<br><span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<span class="hljs-comment">//分割列</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">if</span> (i &lt; row - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---&quot;</span>);<span class="hljs-comment">//分割行</span><br><span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<span class="hljs-comment">//分割列</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//换行</span><br>&#125;<br>&#125;<br><br>​<br></code></pre></td></tr></table></figure><p>初始化棋盘和展示棋盘：</p><p>        <img alt="" height="117" src="https://img-blog.csdnimg.cn/40cf677fb7ac424ab8494d5dc7ad64ec.png" width="143"/></p><h2 id="%E7%8E%A9%E5%AE%B6%E4%B8%8B%E6%A3%8B%EF%BC%9A">玩家下棋：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">player_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该你操作了-&gt;\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请输入坐标-&gt;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\ttip:坐标1-3,用空格分开:&quot;</span>);<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>])<br>&#123;<br>board[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;*&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该坐标已被占用请重新输入:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该坐标非法啦\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请重新输入\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="%C2%A0%E7%94%B5%E8%84%91%E4%B8%8B%E6%A3%8B%EF%BC%9A"> 电脑下棋：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computer_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该电脑了-&gt;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t你要完蛋了\n&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断行</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp; board[i][<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br> board[i][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> flag = <span class="hljs-number">1</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[i][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == flag)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断列</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp; board[<span class="hljs-number">2</span>][i]  == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[<span class="hljs-number">2</span>][i]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">2</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[<span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>        &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>==flag)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//判断对角线</span><br>&#123;<br> board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br> board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2%E8%BF%98%E6%98%AF%E5%B9%B3%E5%B1%80%EF%BC%9A">判断输赢还是平局：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_full</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[i][j])<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">is_win</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断行</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>]==board[i][<span class="hljs-number">1</span>]&amp;&amp;board[i][<span class="hljs-number">1</span>]==board[i][<span class="hljs-number">2</span>]&amp;&amp;board[i][<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[i][<span class="hljs-number">1</span>];<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断列</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i]==board[<span class="hljs-number">1</span>][i]&amp;&amp;board[<span class="hljs-number">1</span>][i]==board[<span class="hljs-number">2</span>][i]&amp;&amp;board[<span class="hljs-number">1</span>][i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][i];<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//判断对角线</span><br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">//判断平局</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-built_in">is_full</span>(board, row, col))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Q&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//继续</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p id="main-toc"></p><hr id="hr-toc"/><p><img alt="" height="423" src="https://img-blog.csdnimg.cn/74e839ac67e24b94aa8ccedf71fb7c01.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_10,color_FFFFFF,t_70,g_se,x_16" width="325"><img alt="" height="639" src="https://img-blog.csdnimg.cn/9c808862a7a545bfb59891164301329d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="1200"> </img></img></p><h2 id="game.c%E7%9A%84%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A"><span style="color:#0d0016;"><strong>game.c的全部内容如下：</strong></span></h2><p></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ROW; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; COL; j++)<br>&#123;<br>board[i][j] =<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, board[i][j]);<br><span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">if</span> (i &lt; row - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---&quot;</span>);<br><span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">player_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该你操作了-&gt;\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请输入坐标-&gt;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\ttip:坐标1-3,用空格分开:&quot;</span>);<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>])<br>&#123;<br>board[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;*&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该坐标已被占用请重新输入:\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该坐标非法啦\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请重新输入\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computer_move</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t该电脑了-&gt;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t你要完蛋了\n&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断行</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp; board[i][<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br> board[i][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> flag = <span class="hljs-number">1</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[i][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[i][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == flag)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断列</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp; board[<span class="hljs-number">2</span>][i]  == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[<span class="hljs-number">2</span>][i]=<span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">2</span>][i] == <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[<span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>flag = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>        &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>==flag)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//判断对角线</span><br>&#123;<br> board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;* &#x27;</span> &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br> board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;#&#x27;</span>;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>&#123;<br>board[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>&#123;<br>board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_full</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27; &#x27;</span> == board[i][j])<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">is_win</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断行</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>]==board[i][<span class="hljs-number">1</span>]&amp;&amp;board[i][<span class="hljs-number">1</span>]==board[i][<span class="hljs-number">2</span>]&amp;&amp;board[i][<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[i][<span class="hljs-number">1</span>];<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<span class="hljs-comment">//判断列</span><br>&#123;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][i]==board[<span class="hljs-number">1</span>][i]&amp;&amp;board[<span class="hljs-number">1</span>][i]==board[<span class="hljs-number">2</span>][i]&amp;&amp;board[<span class="hljs-number">1</span>][i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][i];<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//判断对角线</span><br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span> (board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">//判断平局</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-built_in">is_full</span>(board, row, col))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Q&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//继续</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="%E6%9C%80%E7%BB%88%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C">最终运行结果</h1><p><img alt="" height="1200" src="https://img-blog.csdnimg.cn/2b5eea8ea5614fcaad558bfa57e5f876.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_9,color_FFFFFF,t_70,g_se,x_16" width="293"/></p><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串逆序（递归实现）</title>
    <link href="/2021/11/03/categories/C%E8%AF%AD%E8%A8%80/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F%EF%BC%88%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/11/03/categories/C%E8%AF%AD%E8%A8%80/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F%EF%BC%88%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>内容编写一个函数 reverse_string(char * string)（递归实现）</p><p>实现：将参数字符串中的字符反向排列，不是逆序打印。</p><p><strong><span style="color:#0d0016;">“</span><span style="color:#fe2c24;">*</span><span style="color:#0d0016;">” </span></strong>有三种含义：</p><p>1 相乘：2*2=4；</p><p>2 定义一个指针<span style="color:#fe2c24;">变量</span><span style="color:#0d0016;">：</span></p><p><span style="color:#0d0016;">例 int a=10；</span></p><p> <span style="color:#fe2c24;">int*</span> p = &amp;a；（<span style="color:#fe2c24;">注意： int* </span><span style="color:#0d0016;">是一个整体，我刚开始一直以为 </span><span style="color:#fe2c24;">*p</span><span style="color:#0d0016;"> 是一个整体，这个一定要理解</span>）</p><p>3  *p =10；（这个相当于根据a的地址找出a的值）<br/> 在这里用的是 第二和第三种用法。</p><p>（在这里建议用vs2019 或者 vscode 编写代码，因为本人用了之后觉得写出来的代码比较整齐，它俩会自动格式化代码）</p><table><tbody><tr><td> <p>思路：</p> </td></tr><tr><td></td><td> <p>逆置字符串，循环的方式实现非常简单</p> </td></tr><tr><td></td><td> <p>  1. 给两个指针，left放在字符串左侧，right放在最后一个有效字符位置</p> </td></tr><tr><td></td><td> <p>  2. 交换两个指针位置上的字符</p> </td></tr><tr><td></td><td> <p>  3. left指针往后走，right指针往前走，只要两个指针没有相遇，继续2，两个指针相遇后，逆置结束</p> </td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span>* arr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span>* left = arr;<br>    <span class="hljs-type">char</span>* right = arr + <span class="hljs-built_in">strlen</span>(arr) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;right)<br>    &#123;<br>        <span class="hljs-type">char</span> tmp = *left;<br>        *left = *right;<br>        *right = tmp;<br>        left++;<br>        right--;<br>    &#125;<br>   <br>   <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,arr);<br>    <span class="hljs-built_in">reverse</span>(arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img alt="" height="320" src="https://img-blog.csdnimg.cn/1795a786c04e4e28828dc54a3aaa17d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA56eD5aS05bCR5bm044CC,size_20,color_FFFFFF,t_70,g_se,x_16" width="1165"/></p><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>猜数字小游戏 （C语言实现）</title>
    <link href="/2021/10/29/categories/C%E8%AF%AD%E8%A8%80/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/10/29/categories/C%E8%AF%AD%E8%A8%80/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%B0%8F%E6%B8%B8%E6%88%8F%20%EF%BC%88C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>如有需要自取 代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">( )</span><span class="hljs-comment">// 主菜单</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t********************\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t****** 1.play ******\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t****** 0.exit ******\t\t\t\t\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t********************\t\t\t\t\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> guess = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> r = <span class="hljs-built_in">rand</span>()%<span class="hljs-number">100</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t猜数字:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;guess);  <span class="hljs-comment">// 输入自己猜的数字</span><br><span class="hljs-keyword">if</span> (guess &lt; r)      <span class="hljs-comment">//自己猜的数字与随机数比较</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t猜小了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess&gt;r)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t猜大了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\tNice! 猜对了\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">menu</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t请选择(1-100):&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">game</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t输入错误\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>visualstudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA Python 7-1 统计不同数字字符的个数 (10 分)</title>
    <link href="/2021/10/23/categories/python/PTA%20Python%207-1%20%E7%BB%9F%E8%AE%A1%E4%B8%8D%E5%90%8C%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E7%9A%84%E4%B8%AA%E6%95%B0%20(10%20%E5%88%86)/"/>
    <url>/2021/10/23/categories/python/PTA%20Python%207-1%20%E7%BB%9F%E8%AE%A1%E4%B8%8D%E5%90%8C%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E7%9A%84%E4%B8%AA%E6%95%B0%20(10%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>输入只包含数字字符的字符串，统计串中不同字符的出现次数。</p><h3 id="输入格式">输入格式:</h3><p>测试数据有多组，处理到文件尾。对于每组测试，输入一个字符串（不超过80个字符）。</p><h3 id="输出格式">输出格式:</h3><p>对于每组测试，按字符串中出现字符的ASCII码升序逐个输出不同的字符及其个数（<span style="color:#fe2c24;">两者之间留一个空格</span>），<span style="color:#fe2c24;">每组输出之后空一行</span>，输出格式参照输出样例。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">12123</code></pre><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">1 22 23 1</code></pre><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        a_list=<span class="hljs-built_in">input</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>            a=<span class="hljs-built_in">str</span>(i)<br>            b=a_list.count(a)<br>            <span class="hljs-keyword">if</span>(b&gt;<span class="hljs-number">0</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d %d&quot;</span>%(i,b))<br>        <span class="hljs-built_in">print</span>()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span>    <br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发语言</tag>
      
      <tag>后端</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言 解密回文——栈</title>
    <link href="/2021/10/22/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20%E8%A7%A3%E5%AF%86%E5%9B%9E%E6%96%87%E2%80%94%E2%80%94%E6%A0%88/"/>
    <url>/2021/10/22/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%20%E8%A7%A3%E5%AF%86%E5%9B%9E%E6%96%87%E2%80%94%E2%80%94%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>回文序列是指正读反读均相同的字符序列，如“abba”和“abdba”均是回文，但“good”不是回文。试写一个算法判定给定的字符串是否为回文序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> a[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;, s[<span class="hljs-number">101</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> i, len, mid, next, top;<br><span class="hljs-built_in">gets</span>(a);<span class="hljs-comment">//读入一行字符串</span><br>len = <span class="hljs-built_in">strlen</span>(a);<span class="hljs-comment">//求字符串的长度</span><br>   mid = len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<span class="hljs-comment">//求字符串的中点</span><br><br>    top = <span class="hljs-number">0</span>;<span class="hljs-comment">//栈的初始化</span><br>    <span class="hljs-comment">//将mid前的字符依次入栈</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= mid; i++)<br>s[++top] = a[i];<br>    <span class="hljs-comment">//判断字符串的长度是奇数还是偶数，并找出需要进行字符匹配的起始下标</span><br><span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>next = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>next = mid + <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//开始匹配</span><br><span class="hljs-keyword">for</span> (i = next; i &lt;= len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] != s[top])<br><span class="hljs-keyword">break</span>;<br>top--;<br>&#125;<br>    <span class="hljs-comment">//如果top值为，则说明栈内所有的字符都被一一匹配了</span><br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><br><span class="hljs-built_in">getchar</span>(); <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>开发语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于未来的简单规划</title>
    <link href="/2021/10/15/categories/%E7%AC%94%E8%AE%B0/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%84%E5%88%92/"/>
    <url>/2021/10/15/categories/%E7%AC%94%E8%AE%B0/%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>        本人是一名计科专业大二学生，学校是西安市的普通一本。近一年的目标是把C语言重头再来稳固复习一遍然后向c++方向发展。学习编程还得多刷题，从易到难一步一步慢慢来，每天分配三个小时来学习编程，最想进入的还是华为，腾讯这类的大公司，哔哩哔哩也是一个不错的选择。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动驾驶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。 (15 分)</title>
    <link href="/2021/10/14/categories/python/python%207-8%20%E5%AF%B9%E4%BA%8E%E7%BB%99%E5%AE%9A%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0N%EF%BC%8C%E6%B1%82%E5%AE%83%E7%9A%84%E4%BD%8D%E6%95%B0%E5%8F%8A%E5%85%B6%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%E3%80%82%20(15%20%E5%88%86)/"/>
    <url>/2021/10/14/categories/python/python%207-8%20%E5%AF%B9%E4%BA%8E%E7%BB%99%E5%AE%9A%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0N%EF%BC%8C%E6%B1%82%E5%AE%83%E7%9A%84%E4%BD%8D%E6%95%B0%E5%8F%8A%E5%85%B6%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%E3%80%82%20(15%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>python</p><p>python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。 (15 分)</p><p>python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。 (15 分)</p><p>python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。 (15 分)</p><p>给定的正整数N，求它的位数及其各位数字之和。</p><p></p><p>给定的正整数N，求它的位数及其各位数字之和。</p><p>给定的正整数N，求它的位数及其各位数字之和。</p><p>给定的正整数N，求它的位数及其各位数字之和。</p><h3 id="输入格式">输入格式:</h3><p>在一行中给出1个正整数N。</p><h3 id="输出格式">输出格式:</h3><p>在一行中输出正整数N的位数和各位数字之和。</p><h3 id="输入样例">样例"&gt;样例"&gt;输入样例:</h3><p>在这里给出一组输入。例如：</p><pre><code class="hljs">20201224</code></pre><h3 id="输出样例">输出样例:</h3><p>在这里给出相应的输出。例如：</p><pre><code class="hljs">8 13</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">input</span>()<br>s=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>    s+=<span class="hljs-built_in">int</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(num),s)<br></code></pre></td></tr></table></figure><p style="text-align:center;"><img alt="" src="https://img-blog.csdnimg.cn/img_convert/aacd8592f5928b6938592a29662a6fab.png"/></p><p style="text-align:center;"></p><p style="text-align:center;">python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)python 7-8 对于给定的正整数N，求它的位数及其各位数字之和。</p><p style="text-align:center;">(15 分)</p><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 7-4 输出一个数的因子 (22 分)</title>
    <link href="/2021/10/14/categories/python/python%207-4%20%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90%20(22%20%E5%88%86)/"/>
    <url>/2021/10/14/categories/python/python%207-4%20%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90%20(22%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>输入一个正整数n，输出包含n的所有正因子的列表，注意输出格式，两个数之间用逗号隔开并空一格。</p><h3 id="输入格式">输入格式:</h3><p>输入一个正整数n。</p><h3 id="输出格式">输出格式:</h3><p>输出包含n的所有正整数列表，两个数之间用逗号隔开并空一格</p><h3 id="输入样例1">输入样例1:</h3><p>在这里给出一组输入。例如：</p><pre><code class="hljs">1</code></pre><p>结尾无空行</p><h3 id="输出样例1">输出样例1:</h3><p>在这里给出相应的输出。例如：</p><pre><code class="hljs">[1]</code></pre><p>结尾无空行</p><h3 id="输入样例2">输入样例2:</h3><p>在这里给出一组输入。例如：</p><pre><code class="hljs">100</code></pre><p>结尾无空行</p><h3 id="输出样例2">输出样例2:</h3><p>在这里给出相应的输出。例如：</p><pre><code class="hljs">[1, 2, 4, 5, 10, 20, 25, 50, 100]</code></pre><p>结尾无空行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>ls = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> n%i ==<span class="hljs-number">0</span>:<br>        ls.append(i)<br><span class="hljs-built_in">print</span>(ls)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-4 选择法排序 (15 分)C语言版</title>
    <link href="/2021/10/14/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E9%80%89%E6%8B%A9%E6%B3%95%E6%8E%92%E5%BA%8F%20(15%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
    <url>/2021/10/14/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E9%80%89%E6%8B%A9%E6%B3%95%E6%8E%92%E5%BA%8F%20(15%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>本题要求将给定的n个整数从大到小排序后输出。</p><h3 id="输入格式：">输入格式：</h3><p>输入第一行给出一个不超过10的正整数n。第二行给出n个整数，其间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>在一行中输出从大到小有序的数列，相邻数字间有一个空格，行末不得有多余空格。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">45 1 7 6</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">7 6 5 1</code></pre><p>结尾无空行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-type">int</span> n,i,t,k,a[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;n;k++)<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(a[i]&lt;a[i+<span class="hljs-number">1</span>]) &#123;<br>t=a[i];<br>a[i]=a[i+<span class="hljs-number">1</span>];<br>a[i+<span class="hljs-number">1</span>]=t;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[i]);<br><span class="hljs-keyword">if</span>(i&lt;n<span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-10 求所有N位的素数和 (15 分)</title>
    <link href="/2021/10/14/categories/python/7-10%20%E6%B1%82%E6%89%80%E6%9C%89N%E4%BD%8D%E7%9A%84%E7%B4%A0%E6%95%B0%E5%92%8C%20(15%20%E5%88%86)/"/>
    <url>/2021/10/14/categories/python/7-10%20%E6%B1%82%E6%89%80%E6%9C%89N%E4%BD%8D%E7%9A%84%E7%B4%A0%E6%95%B0%E5%92%8C%20(15%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>输入一个正整数n(n&gt;=2)，输出所有n位的素数和，如n=2，即输出的是10-99之间的所有素数的和。</p><h3 id="输入格式">输入格式:</h3><p>一个正整数n(n&gt;=2)</p><h3 id="输出格式">输出格式:</h3><p>输出所有n位的素数和</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">2</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">10-99之间所有的素数和=1043</code></pre><p>结尾无空行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>):<br>    i = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> i*i &lt;= n:<br>        <span class="hljs-keyword">if</span>(n%i == <span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>m = <span class="hljs-number">10</span> ** (n-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>,m*<span class="hljs-number">10</span>,<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> f(i):<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d-%d之间所有的素数和=%d&#x27;</span>%(m,m*<span class="hljs-number">10</span>-<span class="hljs-number">1</span>,<span class="hljs-built_in">sum</span>))<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言 7-1 求矩阵各行元素之和 (20 分)</title>
    <link href="/2021/10/11/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%207-1%20%E6%B1%82%E7%9F%A9%E9%98%B5%E5%90%84%E8%A1%8C%E5%85%83%E7%B4%A0%E4%B9%8B%E5%92%8C%20(20%20%E5%88%86)/"/>
    <url>/2021/10/11/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%207-1%20%E6%B1%82%E7%9F%A9%E9%98%B5%E5%90%84%E8%A1%8C%E5%85%83%E7%B4%A0%E4%B9%8B%E5%92%8C%20(20%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>本题要求编写程序，求一个给定的m×n矩阵各行元素之和。</p><h3 id="输入格式：">输入格式：</h3><p>输入第一行给出两个正整数m和n（1≤m,n≤6）。随后m行，每行给出n个整数，其间</p><p>以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>每行输出对应矩阵行元素之和。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">3 26 31 -83 12</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">9-715</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">int</span> a[n][m];<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; m; j++)<br><br>        &#123;<br>            b = b + a[i][j];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b);<br>        b = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-3 统计字符串列表中每个字母出现的次数（高教社，《Python编程基础及应用》习题6-8） (4 分)</title>
    <link href="/2021/10/11/categories/python/7-3%20%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%97%E8%A1%A8%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-8%EF%BC%89%20(4%20%E5%88%86)/"/>
    <url>/2021/10/11/categories/python/7-3%20%E7%BB%9F%E8%AE%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%97%E8%A1%A8%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-8%EF%BC%89%20(4%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>统计字符串列表中每个字母出现的次数。<br/> 编写程序，使用eval()函数读入一个仅包含字符串对象的列表，然后统计该列表中每个字母出现的次数。 列表中的字符串对象仅包含小写英文字母。</p><h3 id="输入格式">输入格式:</h3><p>一个仅包括字符串对象的列表，且全部字符串对象中仅出现小写英文字母。</p><h3 id="输出格式">输出格式:</h3><p>字母,次数<br/> ...<br/> 字母,次数<br/> (注意按a-z的顺序输出)</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">["aaab", "cccdz"]</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><p>在这里给出相应的输出。例如：</p><pre><code class="hljs">a,3b,1c,3d,1z,1</code></pre><p>结尾无空行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br>counts = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        counts[<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]+=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">if</span> counts[i]&gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+i),counts[i],sep=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-5 统计输入字符串中的单词个数及单词的平均长度（高教社，《Python编程基础及应用》习题7-7） (3 分)</title>
    <link href="/2021/10/10/categories/python/7-5%20%E7%BB%9F%E8%AE%A1%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E4%B8%AA%E6%95%B0%E5%8F%8A%E5%8D%95%E8%AF%8D%E7%9A%84%E5%B9%B3%E5%9D%87%E9%95%BF%E5%BA%A6%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%987-7%EF%BC%89%20(3%20%E5%88%86)/"/>
    <url>/2021/10/10/categories/python/7-5%20%E7%BB%9F%E8%AE%A1%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E4%B8%AA%E6%95%B0%E5%8F%8A%E5%8D%95%E8%AF%8D%E7%9A%84%E5%B9%B3%E5%9D%87%E9%95%BF%E5%BA%A6%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%987-7%EF%BC%89%20(3%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>编写一个程序，接受用户输入的一行英文句子（假设该句子仅由英文单词及空格构成，不包括逗号等符号），统计并输出该行句子包含的单词个数及单词的平均长度。</p><h3 id="输入格式">输入格式:</h3><p>单词1 单词2 .... 单词n</p><h3 id="输出格式">输出格式:</h3><p>单词个数,单词平均长度（保留两位小数）</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">aaa bbb ccccccccccc</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">3,5.67</code></pre><p>结尾无空行</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&#x27; &#x27;</span>)<br>len_sum=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>    len_sum+=<span class="hljs-built_in">len</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(lst)&#125;</span>,<span class="hljs-subst">&#123;len_sum/<span class="hljs-built_in">len</span>(lst):<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA python 7-9 键盘输入学习的课程名称及考分等信息并计算 (15 分)</title>
    <link href="/2021/10/10/categories/python/PTA%20python%207-9%20%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AF%BE%E7%A8%8B%E5%90%8D%E7%A7%B0%E5%8F%8A%E8%80%83%E5%88%86%E7%AD%89%E4%BF%A1%E6%81%AF%E5%B9%B6%E8%AE%A1%E7%AE%97%20(15%20%E5%88%86)/"/>
    <url>/2021/10/10/categories/python/PTA%20python%207-9%20%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AF%BE%E7%A8%8B%E5%90%8D%E7%A7%B0%E5%8F%8A%E8%80%83%E5%88%86%E7%AD%89%E4%BF%A1%E6%81%AF%E5%B9%B6%E8%AE%A1%E7%AE%97%20(15%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>键盘输入学习的课程名称及考分等信息，屏幕输出得分最高的课程及成绩，得分最低的课程及成绩，以及平均分(保留2位小数)。</p><h3 id="输入格式">输入格式:</h3><p>键盘输入学习的课程名称及考分等信息，信息间采用空格分隔，每个课程一行，<strong>空行回车结束录入</strong>。</p><h3 id="输出格式">输出格式:</h3><p>屏幕输出得分最高的课程及成绩，得分最低的课程及成绩，以及平均分(保留2位小数)。</p><h3 id="输入样例">输入样例:</h3><p>示例格式如下：</p><pre><code class="hljs">数学 90 语文 95 英语 86 物理 84 生物 87 </code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">最高分课程是语文95，最低分课程是物理84， 平均分是88.40</code></pre><p>结尾无空行</p><p><strong>这是我的宿舍其中一位大佬写的代码：</strong></p><p><span style="color:#fe2c24;">如果显示格式错误记得看一下输出的内容是不是多打或者少打空格。</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-built_in">input</span>()<br>ls = data.split()<br>min_score = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>min_name = ls[<span class="hljs-number">0</span>]<br>max_score = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>max_name = ls[<span class="hljs-number">0</span>]<br>n = <span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> data:<br>    n += <span class="hljs-number">1</span><br>    lt = data.split()<br>    <span class="hljs-keyword">if</span> min_score &gt; <span class="hljs-built_in">int</span>(lt[<span class="hljs-number">1</span>]):<br>        min_score = <span class="hljs-built_in">int</span>(lt[<span class="hljs-number">1</span>])<br>        min_name = lt[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> max_score &lt; <span class="hljs-built_in">int</span>(lt[<span class="hljs-number">1</span>]):<br>        max_score = <span class="hljs-built_in">int</span>(lt[<span class="hljs-number">1</span>])<br>        max_name = lt[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(lt[<span class="hljs-number">1</span>])<br>    data = <span class="hljs-built_in">input</span>()<br>avg = <span class="hljs-built_in">sum</span> / n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最高分课程是&#123;&#125;&#123;&#125;, 最低分课程是&#123;&#125;&#123;&#125;, 平均分是&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(max_name, max_score, min_name, min_score, avg))<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python ： 7-5 菲姐游泳 - 实验3 简单的计算及输入输出 -《Python编程实验》</title>
    <link href="/2021/10/10/categories/python/python%20%EF%BC%9A%207-5%20%E8%8F%B2%E5%A7%90%E6%B8%B8%E6%B3%B3%20-%20%E5%AE%9E%E9%AA%8C3%20%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%8F%8A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%20-%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%AE%9E%E9%AA%8C%E3%80%8B/"/>
    <url>/2021/10/10/categories/python/python%20%EF%BC%9A%207-5%20%E8%8F%B2%E5%A7%90%E6%B8%B8%E6%B3%B3%20-%20%E5%AE%9E%E9%AA%8C3%20%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%8F%8A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%20-%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%AE%9E%E9%AA%8C%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p> 游泳奥运冠军菲姐刻苦训练，从早上a时b分开始下水训练，直到当天的c时d分结束。请编程计算：菲姐当天一共训练多少小时多少分钟？</p><h3 id="输入格式">输入格式:</h3><p>一行之内输入以空格分隔的4个非负整数，分别对应a,b,c,d。其中，0 ≤a&lt;c ≤24；b和d均不大于60。</p><h3 id="输出格式">输出格式:</h3><p>h:m。其中，整数h表示小时数，整数m表示分钟数,m应小于60。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">6 30 23 20</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">16:50</code></pre><p>结尾无空行</p><p> 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">array = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>().split())<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>]&gt;array[<span class="hljs-number">3</span>]):<br>    array[<span class="hljs-number">2</span>]=<span class="hljs-built_in">int</span>(array[<span class="hljs-number">2</span>])-<span class="hljs-number">1</span><br>    m  = <span class="hljs-built_in">int</span>(array[<span class="hljs-number">3</span>]) - <span class="hljs-built_in">int</span>(array[<span class="hljs-number">1</span>]) + <span class="hljs-number">60</span><br>    h = <span class="hljs-built_in">int</span>(array[<span class="hljs-number">2</span>]) - <span class="hljs-built_in">int</span>(array[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">else</span>:<br>    m = <span class="hljs-built_in">int</span>(array[<span class="hljs-number">3</span>]) - <span class="hljs-built_in">int</span>(array[<span class="hljs-number">1</span>])<br>    h = <span class="hljs-built_in">int</span>(array[<span class="hljs-number">2</span>]) - <span class="hljs-built_in">int</span>(array[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s:%s&quot;</span>%(h,m),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-5 找完数 (20 分)</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-5%20%E6%89%BE%E5%AE%8C%E6%95%B0%20(20%20%E5%88%86)/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-5%20%E6%89%BE%E5%AE%8C%E6%95%B0%20(20%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>所谓完数就是该数恰好等于除自身外的因子之和。例如：6=1+2+3，其中1、2、3为6的因子。本题要求编写程序，找出任意两正整数m和n之间的所有完数。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出2个正整数m和n（1&lt;m≤n≤10000），中间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>逐行输出给定范围内每个完数的因子累加形式的分解式，每个完数占一行，格式为“完数 = 因子1 + 因子2 + ... + 因子k”，其中完数和因子均按递增顺序给出。若区间内没有完数，则输出“None”。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">2 30</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">6 = 1 + 2 + 328 = 1 + 2 + 4 + 7 + 14</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, k, m, n, s = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-keyword">for</span> (i = m; i &lt;= n; i++)<br><br>    &#123;<br>        s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i % k == <span class="hljs-number">0</span>)<br>                s += k;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s == i)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = 1&quot;</span>, i);<br>            <span class="hljs-keyword">for</span> (k = <span class="hljs-number">2</span>; k &lt; i; k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i % k == <span class="hljs-number">0</span>)<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; + %d&quot;</span>, k);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            c++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;None\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-4 求符合给定条件的整数集 (20 分) C语言 实现</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E6%B1%82%E7%AC%A6%E5%90%88%E7%BB%99%E5%AE%9A%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B4%E6%95%B0%E9%9B%86%20(20%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%20%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E6%B1%82%E7%AC%A6%E5%90%88%E7%BB%99%E5%AE%9A%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B4%E6%95%B0%E9%9B%86%20(20%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%20%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p> 给定不超过6的正整数A，考虑从A开始的连续4个数字。请输出所有由它们组成的无重复数字的3位数。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出A。</p><h3 id="输出格式：">输出格式：</h3><p>输出满足条件的的3位数，要求从小到大，每行6个整数。整数间以空格分隔，但行末不能有多余空格。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">2</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">234 235 243 245 253 254324 325 342 345 352 354423 425 432 435 452 453523 524 532 534 542 543</code></pre><p>结尾无空行</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> A, i, j, k, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A);<br>    m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = A; i &lt;= A + <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = A; j &lt;= A + <span class="hljs-number">3</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (k = A; k &lt;= A + <span class="hljs-number">3</span>; k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i != j &amp;&amp; i != k &amp;&amp; j != k)<br>                &#123;<br>                    m += <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, i, j, k);<br>                    <span class="hljs-keyword">if</span> (m % <span class="hljs-number">6</span> == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英文单词（字符串）长度排序</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%E9%95%BF%E5%BA%A6%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%E9%95%BF%E5%BA%A6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">20</span>][<span class="hljs-number">10</span>],t[<span class="hljs-number">20</span>],str1[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> i,j,n=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str1);<br>    <span class="hljs-keyword">if</span>(str1[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-comment">//输入 # 结束</span><br>    &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>        <span class="hljs-keyword">else</span><br>&#123;<br>        <span class="hljs-built_in">strcpy</span>(str[n],str1);<br>        n++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n-i<span class="hljs-number">-1</span>;j++)<br>    &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(str[j])&gt;<span class="hljs-built_in">strlen</span>(str[j+<span class="hljs-number">1</span>]))<br>    &#123;<br>               <span class="hljs-built_in">strcpy</span>(t,str[j]);<br>               <span class="hljs-built_in">strcpy</span>(str[j],str[j+<span class="hljs-number">1</span>]);<br>               <span class="hljs-built_in">strcpy</span>(str[j+<span class="hljs-number">1</span>],t);<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,str[i]);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码是字符串由短到长排序，如果想要由长到短排序改变大于小于号</p><p></p><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-1 打印九九口诀表 (20 分) C语言实现</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-1%20%E6%89%93%E5%8D%B0%E4%B9%9D%E4%B9%9D%E5%8F%A3%E8%AF%80%E8%A1%A8%20(20%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-1%20%E6%89%93%E5%8D%B0%E4%B9%9D%E4%B9%9D%E5%8F%A3%E8%AF%80%E8%A1%A8%20(20%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>下面是一个完整的下三角九九口诀表：</p><pre><code class="hljs">1*1=1   1*2=2   2*2=4   1*3=3   2*3=6   3*3=9   1*4=4   2*4=8   3*4=12  4*4=16  1*5=5   2*5=10  3*5=15  4*5=20  5*5=25  1*6=6   2*6=12  3*6=18  4*6=24  5*6=30  6*6=36  1*7=7   2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49  1*8=8   2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64  1*9=9   2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81  </code></pre><p>本题要求对任意给定的一位正整数<code>N</code>，输出从<code>1*1</code>到<code>N*N</code>的部分口诀表。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出一个正整数<code>N</code>（1≤<code>N</code>≤9）。</p><h3 id="输出格式：">输出格式：</h3><p>输出下三角<code>N*N</code>部分口诀表，其中等号右边数字占4位、左对齐。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">4</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">1*1=1   1*2=2   2*2=4   1*3=3   2*3=6   3*3=9   1*4=4   2*4=8   3*4=12  4*4=16  </code></pre><p>结尾无空行</p><p> 代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-type">int</span> i,j,k,n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=i; j++) &#123;<br>k=i*j;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d=%-4d&quot;</span>,j,i,k);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-4 计算存款利息 (25 分) C语言实现</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E8%AE%A1%E7%AE%97%E5%AD%98%E6%AC%BE%E5%88%A9%E6%81%AF%20(25%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-4%20%E8%AE%A1%E7%AE%97%E5%AD%98%E6%AC%BE%E5%88%A9%E6%81%AF%20(25%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>本题目要求计算存款利息，计算公式为interest=money×(1+rate)year−money，其中interest为存款到期时的利息（税前），money是存款金额，year是存期，rate是年利率。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中顺序给出三个正实数money、year和rate，以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>在一行中按“interest = 利息”的格式输出，其中利息保留两位小数。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">1000 3 0.025</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">interest = 76.89</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> money,rate;<br>    <span class="hljs-type">float</span> year;<br>    <span class="hljs-type">float</span> interest;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f %f %f&quot;</span>,&amp;money,&amp;year,&amp;rate);<br>    interest=money*<span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span>+rate,year)-money;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;interest = %.2f&quot;</span>,interest);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-2 求整数均值 (25 分) C语言实现</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-2%20%E6%B1%82%E6%95%B4%E6%95%B0%E5%9D%87%E5%80%BC%20(25%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-2%20%E6%B1%82%E6%95%B4%E6%95%B0%E5%9D%87%E5%80%BC%20(25%20%E5%88%86)%20C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>本题要求编写程序，计算4个整数的和与平均值。题目保证输入与输出均在整型范围内。</p><h3 id="输入格式">输入格式:</h3><p>输入在一行中给出4个整数，其间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>在一行中按照格式“Sum = 和; Average = 平均值”顺序输出和与平均值，其中平均值精确到小数点后一位。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">1 2 3 4</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">Sum = 10; Average = 2.5</code></pre><p>结尾无空行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b,c,d;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sum = %d; Average = %.1f\n&quot;</span>,a+b+c+d,(a+b+c+d)/<span class="hljs-number">4.0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-1 计算摄氏温度 (25 分)C语言实现</title>
    <link href="/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-1%20%E8%AE%A1%E7%AE%97%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%20(25%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/categories/C%E8%AF%AD%E8%A8%80/7-1%20%E8%AE%A1%E7%AE%97%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%20(25%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>给定一个华氏温度F，本题要求编写程序，计算对应的摄氏温度C。计算公式：C=5×(F−32)/9。题目保证输入与输出均在整型范围内。</p><h3 id="输入格式">输入格式:</h3><p>输入在一行中给出一个华氏温度。</p><h3 id="输出格式">输出格式:</h3><p>在一行中按照格式“Celsius = C”输出对应的摄氏温度C的整数值。</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">150</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">Celsius = 65</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> C,F;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;F);<br>C=(<span class="hljs-number">5</span>*(F<span class="hljs-number">-32</span>))/<span class="hljs-number">9</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Celsius = %d&quot;</span>,C);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-2 找出肇事者，循环与布尔逻辑（高教社，《Python编程基础及应用》习题6-6） (6 分)</title>
    <link href="/2021/10/09/categories/python/7-2%20%E6%89%BE%E5%87%BA%E8%82%87%E4%BA%8B%E8%80%85%EF%BC%8C%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-6%EF%BC%89%20(6%20%E5%88%86)/"/>
    <url>/2021/10/09/categories/python/7-2%20%E6%89%BE%E5%87%BA%E8%82%87%E4%BA%8B%E8%80%85%EF%BC%8C%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-6%EF%BC%89%20(6%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>在视线不太好的黑夜一司机撞伤行人之后逃逸，有3个目击者记住了该车的部分车号特征。 甲说：“车牌号的前两位相同，且末位数是奇数”；乙说：“车牌号的后两位加起来等于5”； 丙说：“车牌号是一个N位数，并且能被3整除”。请你写一个程序，该程序接受一个正整数N(&gt;=3), 找出肇事车可能的车牌号。</p><h3 id="输入格式">输入格式:</h3><p>一个&gt;=3的正整数</p><h3 id="输出格式">输出格式:</h3><p>全部可能的车牌号（一行一个，按递增序）</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">3</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">441</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">10</span>**(n-<span class="hljs-number">1</span>),<span class="hljs-number">10</span>**n):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i//<span class="hljs-number">10</span>**(n-<span class="hljs-number">1</span>)==i//<span class="hljs-number">10</span>**(n-<span class="hljs-number">2</span>)%<span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">10</span>+i//<span class="hljs-number">10</span>%<span class="hljs-number">10</span>==<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> i%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA 7-1 奖金计算，循环与多分支（高教社，《Python编程基础及应用》习题6-5） (4 分)</title>
    <link href="/2021/10/09/categories/python/PTA%207-1%20%E5%A5%96%E9%87%91%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%A4%9A%E5%88%86%E6%94%AF%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-5%EF%BC%89%20(4%20%E5%88%86)/"/>
    <url>/2021/10/09/categories/python/PTA%207-1%20%E5%A5%96%E9%87%91%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%A4%9A%E5%88%86%E6%94%AF%EF%BC%88%E9%AB%98%E6%95%99%E7%A4%BE%EF%BC%8C%E3%80%8APython%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E4%B9%A0%E9%A2%986-5%EF%BC%89%20(4%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p> </p><p>企业发放的奖金根据利润提成。利润低于或等于100,000元的，奖金可提10%；利润高于100,000元，低于200,000（100,000 &lt; p &lt;=200,000）时，100,000元及以内部分按10%提成，高于100,000元的部分，可提成7.5%； 200,000 &lt; p &lt;= 400,000时，200,000元及其以内的部分仍按上述办法提成（下同），高于200,000元的部分按5%提成； 400,000 &lt; p &lt;=600,000元时，高于400,000元的部分按3%提成； 600,000 &lt; p &lt;=1,000,000时，高于600,000元的部分按1.5%提成； p &gt;1,000,000时，超过1,000,000元的部分按1%提成。 按上述需求，编写一个程序，该程序从键盘输入当月利润p，求应发奖金数。</p><h3 id="输入格式">输入格式:</h3><p>利润总额（浮点数）</p><h3 id="输出格式">输出格式:</h3><p>奖金数（保留两位小数）</p><h3 id="输入样例">输入样例:</h3><pre><code class="hljs">230000</code></pre><p>结尾无空行</p><h3 id="输出样例">输出样例:</h3><pre><code class="hljs">19000.00</code></pre><p>结尾无空行</p><p><span style="color:#fe2c24;"><strong>代码如下：</strong></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> p&lt;=<span class="hljs-number">100000</span>:<br>    l=<span class="hljs-number">0.1</span>*p<br><span class="hljs-keyword">if</span> <span class="hljs-number">100000</span> &lt; p &lt;=<span class="hljs-number">200000</span>:<br>    l=<span class="hljs-number">0.1</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.075</span>*(p-<span class="hljs-number">100000</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">200000</span> &lt; p &lt;= <span class="hljs-number">400000</span>:<br>    l=<span class="hljs-number">0.1</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.075</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.05</span>*(p-<span class="hljs-number">200000</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">400000</span> &lt; p &lt;=<span class="hljs-number">600000</span>:<br>    l=<span class="hljs-number">0.1</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.075</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.05</span>*<span class="hljs-number">200000</span>+<span class="hljs-number">0.03</span>*(p-<span class="hljs-number">400000</span>)<br><span class="hljs-keyword">if</span>  <span class="hljs-number">600000</span> &lt; p &lt;=<span class="hljs-number">1000000</span>:<br>     l=<span class="hljs-number">0.1</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.075</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.05</span>*<span class="hljs-number">200000</span>+<span class="hljs-number">0.03</span>*<span class="hljs-number">200000</span>+<span class="hljs-number">0.015</span>*(p-<span class="hljs-number">600000</span>)<br><span class="hljs-keyword">if</span> p &gt;<span class="hljs-number">1000000</span>:<br>    l=<span class="hljs-number">0.1</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.075</span>*<span class="hljs-number">100000</span>+<span class="hljs-number">0.05</span>*<span class="hljs-number">200000</span>+<span class="hljs-number">0.03</span>*<span class="hljs-number">200000</span>+<span class="hljs-number">0.015</span>*<span class="hljs-number">400000</span>+<span class="hljs-number">0.01</span>*(p-<span class="hljs-number">1000000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.2f&quot;</span>%l)<br><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA C语言 7-3 计算平均成绩 (15 分)</title>
    <link href="/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/PTA%20C%E8%AF%AD%E8%A8%80%207-3%20%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%20(15%20%E5%88%86)/"/>
    <url>/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/PTA%20C%E8%AF%AD%E8%A8%80%207-3%20%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%20(15%20%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p></p><p>给定N个学生的基本信息，包括学号（由5个数字组成的字符串）、姓名（长度小于10的不包含空白字符的非空字符串）和成绩（[0,100]区间内的整数），要求计算他们的平均成绩，并顺序输出平均线以下的学生名单。</p><h3 id="输入格式：">输入格式：</h3><p>输入在一行中给出正整数N（≤10）。随后N行，每行给出一位学生的信息，格式为“学号 姓名 成绩”，中间以空格分隔。</p><h3 id="输出格式：">输出格式：</h3><p>首先在一行中输出平均成绩，保留2位小数。然后按照输入顺序，每行输出一位平均线以下的学生的姓名和学号，间隔一个空格。</p><h3 id="输入样例：">输入样例：</h3><pre><code class="hljs">500001 zhang 7000002 wang 8000003 qian 9010001 li 10021987 chen 60</code></pre><p>结尾无空行</p><h3 id="输出样例：">输出样例：</h3><pre><code class="hljs">80.00zhang 00001chen 21987</code></pre><p>结尾无空行</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br><span class="hljs-type">char</span> num[<span class="hljs-number">6</span>];<br><span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> s;<br>&#125; studentscore;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-type">int</span> n,i;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>studentscore s[<span class="hljs-number">11</span>];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%d&quot;</span>,s[i].num,s[i].name,&amp;s[i].s);<br>&#125;<br><span class="hljs-type">double</span> average,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n; i++) &#123;<br>sum=sum+s[i].s;<br>&#125;<br>average=sum/n;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf\n&quot;</span>,average);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++) &#123;<br><span class="hljs-keyword">if</span>(s[i].s&lt;average) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>,s[i].name,s[i].num);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言课程设计 自行车管理系统</title>
    <link href="/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%20%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%20%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span><br>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>]; <span class="hljs-comment">//用户的姓名</span><br><span class="hljs-type">char</span> tele[<span class="hljs-number">12</span>]; <span class="hljs-comment">//用户的电话</span><br><span class="hljs-type">char</span> sex[<span class="hljs-number">7</span>];   <span class="hljs-comment">//用户的性别</span><br><span class="hljs-type">int</span> biknum;   <span class="hljs-comment">//自行车编号</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *next;<br>&#125; bikeinformation, *Link;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *pHead = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_int</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save1</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">key</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//账号密码管理;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//登录界面;</span><br><span class="hljs-function">Link <span class="hljs-title">cre</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//录入自行车的信息</span><br><span class="hljs-function">Link <span class="hljs-title">mod</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//修改自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//删除自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sea</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//查询自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pri</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//打印自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sor</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//排序自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ins</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//插入自行车的信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//保存信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_str</span><span class="hljs-params">()</span></span>;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> icount = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;title 计科2005 -JYS&quot;</span>);<br><span class="hljs-built_in">menu</span>(); <span class="hljs-comment">//登陆界面</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">key</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//创建密码</span><br><span class="hljs-type">char</span> key[<span class="hljs-number">20</span>], n[<span class="hljs-number">20</span>], key1[<span class="hljs-number">20</span>], kz[<span class="hljs-number">20</span>], kz1[<span class="hljs-number">20</span>];<br>FILE *m;<br>m = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (m == <span class="hljs-literal">NULL</span>)<br>&#123;<br>m = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请创建账号:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, kz[<span class="hljs-number">20</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请您创建管理密码:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, key);<br><span class="hljs-built_in">fprintf</span>(m, <span class="hljs-string">&quot;%s&quot;</span>, key);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请再次确认密码:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, key1);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(key1, key) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;恭喜您创建成功!\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键继续\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">fscanf</span>(m, <span class="hljs-string">&quot;%s&quot;</span>, n);<br><span class="hljs-built_in">fclose</span>(m);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入账号:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, kz1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入管理密码:&quot;</span>);<br><span class="hljs-comment">//scanf(&quot;%s&quot;, key);</span><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>( i&lt;<span class="hljs-number">9</span>&amp;&amp;(key[i]=<span class="hljs-built_in">getch</span>())&amp;&amp;key[i]!=<span class="hljs-string">&#x27;\r&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(key[i]==<span class="hljs-string">&#x27;\b&#x27;</span>)&#123;<span class="hljs-comment">//对密码进行掩饰</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\b \b&quot;</span>);<br>i--;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>i++;&#125;<br>&#125;<br>key[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(n, key) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n密码正确!\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键继续&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;密码错误!\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键继续&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//system(&quot;cls&quot;);</span><br><span class="hljs-built_in">key</span>();<br><span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (s)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t*****欢迎使用自行车管理系统*****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t-----请选择功能列表-----\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t-输入1.[录入自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t*输入2.[修改自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t-输入3.[删除自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t*输入4.[查询自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t-输入5.[打印自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t*输入6.[自行车信息的排序]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t-输入7.[插入自行车的信息]\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t*输入0.[退出界面退出界面]\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s);<br><br><span class="hljs-keyword">switch</span> (s)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">cre</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">mod</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-built_in">del</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-built_in">sea</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-built_in">pri</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-built_in">sor</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-built_in">ins</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function">Link <span class="hljs-title">cre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *pEnd, *pNew;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *p;<br>pHead = pEnd = pNew = (<span class="hljs-keyword">struct</span> bike *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> bike));<br>pNew-&gt;next = <span class="hljs-literal">NULL</span>;<br>pEnd-&gt;next = <span class="hljs-literal">NULL</span>;<br>pHead-&gt;next = <span class="hljs-literal">NULL</span>;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> f0 = <span class="hljs-number">1</span>, f1, f2;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入存放自行车的信息,若退出请按0:\n&quot;</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *pTemp;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入自行车的编号:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;pNew-&gt;biknum);<br>n = pNew-&gt;biknum;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>&#123;<br>f0 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pTemp = pHead;<br>f1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">0</span>)<br>&#123; <span class="hljs-comment">//录入自行车的编号且编号不能重复。</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1请重新输入,自行车编号%d存在,退出请按0.):\n&quot;</span>, pNew-&gt;biknum);<br><span class="hljs-comment">// printf(&quot;1输入自行车的编号&quot;);</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">if</span> (n)<br>pNew-&gt;biknum = n;<br><span class="hljs-comment">// printf(&quot;退出请按0&quot;);</span><br>f0 = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">1</span>)<br>&#123;<br>f0 = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (f0 != <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入姓名:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, pNew-&gt;name);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入性别(man/woman):&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, pNew-&gt;sex);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(pNew-&gt;sex, <span class="hljs-string">&quot;man&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(pNew-&gt;sex, <span class="hljs-string">&quot;woman&quot;</span>) == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;性别输入不规范请重新输入！&quot;</span>);<br>&#125; <span class="hljs-comment">//性别必须输入 man(男)woman(女)；</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入11位数的话号码(+86):&quot;</span>); <span class="hljs-comment">//电话号码必须为11位,中国大陆+86;</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, pNew-&gt;tele);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(pNew-&gt;tele) == <span class="hljs-number">11</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;必须输入11位数的电话号码:&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">save</span>(pNew);<br>icount++;<br><span class="hljs-keyword">return</span> (pNew);<br><span class="hljs-built_in">free</span>(pNew);<br>&#125;<br>&#125;<br><span class="hljs-function">Link <span class="hljs-title">mod</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*=*修改自行车的信息*=*\n&quot;</span>);<br><span class="hljs-type">int</span> n, f0 = <span class="hljs-number">1</span>, f1;<br><span class="hljs-type">int</span> num;<br>Link head = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, t = <span class="hljs-literal">NULL</span>;<br>Link L, q;<br>head = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = head;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:/code.c/data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败，按任意键退出&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br>p = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;tele);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;p-&gt;biknum);<br>t-&gt;next = p;<br>t = p;<br>&#125;<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-comment">//for(p = head-&gt;next; p; p = p-&gt;next) puts(p-&gt;biknum);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要修改的自行车的编号pwq:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br><span class="hljs-keyword">while</span> (f0)<br>&#123;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><br><span class="hljs-keyword">if</span> (p-&gt;biknum == num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将要修改的编号%d具体的信息owo:\n&quot;</span>, num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;poq:姓名:%s  性别:%s  电话:%s 自行车编号:%d \n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>f0 = <span class="hljs-number">0</span>;<br>&#125;<br>t = p;<br>&#125;<br><span class="hljs-keyword">if</span> (!p)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (f0 == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您要修改的编号%d不存在yyy\n&quot;</span>, num);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;确认修改请按6，放弃修改请按1 ...\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">while</span> (n == <span class="hljs-number">6</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择 1.姓名、2.性别、3.电话号码、4.自行车的编码、5.修改全部\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;f1);<br><span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的姓名:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改完成，请按回车键退出。\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的性别:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;sex);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改完成，请按回车键推出。\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的电话:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;tele);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(t-&gt;tele) == <span class="hljs-number">11</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的电话不规范，必须为11位数\n&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改完毕，按回车键退出\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">4</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的编号wqw:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t-&gt;biknum);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改完成，按回车键退出\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f1 == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的姓名:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;name);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的性别:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;sex);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(t-&gt;sex, <span class="hljs-string">&quot;man&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(t-&gt;sex, <span class="hljs-string">&quot;woman&quot;</span>) == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;性别输入不规范请重新输入！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入新的电话:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t-&gt;tele);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(t-&gt;tele) == <span class="hljs-number">11</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的电话不规范，必须为11位数\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入新的编号wqw:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t-&gt;biknum);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改成功，按回车键退出\n&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><span class="hljs-built_in">save2</span>(head);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***删除自行车的信息qwq\n&quot;</span>);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> f0 = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>Link head = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, t = <span class="hljs-literal">NULL</span>;<br>Link L, q;<br>head = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = head;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:/code.c/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败，按任意键退出&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br>p = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;tele);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;p-&gt;biknum);<br>t-&gt;next = p;<br>t = p;<br>&#125;<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (s)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按自行车编号删除请按1\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出请按0\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;做出你的选择:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s);<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入1或者0:\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>&#123;<br><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> i, f0 = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> opt;<br><span class="hljs-type">int</span> dex = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入需要删除的自行车编号：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br><span class="hljs-keyword">for</span> (q = head-&gt;next, L = head; q; q = q-&gt;next, L = L-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (q-&gt;biknum==num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的车子找到了,具体信息如下:\n&quot;</span>, num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, q-&gt;name, q-&gt;sex, q-&gt;tele, q-&gt;biknum);<br>f0 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;确认删除请输1，否则按任意数字键退出\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;opt);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (f0 == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+-+编号%d不存在的-+-\n&quot;</span>, num);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>)<br>&#123;<br>L-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;操作成功按回车键退出poq:&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除失败按任意键退出&quot;</span>);<br>&#125;<br><span class="hljs-built_in">save1</span>(head);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sea</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*-*查询关于自行车的信息*-*\n&quot;</span>);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> f0 = <span class="hljs-number">1</span>;<br>Link head = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, t = <span class="hljs-literal">NULL</span>;<br>Link L, q;<br>head = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = head;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:/code.c/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败，按任意键退出&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br>p = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<span class="hljs-comment">//连续申请内存空间</span><br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;tele);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;p-&gt;biknum);<br>t-&gt;next = p;<br>t = p;<br>&#125;<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (s)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按 姓名 查询 请按1\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按自行车编号查询请按2\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;想退出请按0\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你的选择是:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s);<br><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要查找的用户姓名:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name);<br><br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(p-&gt;name, name) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到了。具体信息如下:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>f0 = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (f0 == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名%s不存在\n&quot;</span>, name);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按回车键返回上一级\n&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你要查找的自行车编号:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br><br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (p-&gt;biknum==num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的车子找到了,具体信息如下:\n&quot;</span>, num);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>f0 = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (f0 == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号%s不存在\n&quot;</span>, num);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按回车键返回上一级\n&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pri</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**打印自行车的信息**\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*本名单中自行车信息,如下:\n&quot;</span>);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>Link head = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, t = <span class="hljs-literal">NULL</span>;<br>Link L, q;<br>head = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = head;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:/code.c/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败，按任意键退出&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br>p = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;tele);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;p-&gt;biknum);<br>t-&gt;next = p;<br>t = p;<br>&#125;<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fclose</span>(fp);<br><br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*按回车键返回上一级pwq*\n&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> s;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\tqwq 给自行车的信息排序 ewe\n&quot;</span>);<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bike</span> *pStra, *pMidd, *pTemp;<br>Link head = <span class="hljs-literal">NULL</span>, p = <span class="hljs-literal">NULL</span>, t = <span class="hljs-literal">NULL</span>;<br>Link L, q;<br>head = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>t = head;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:/code.c/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败，按任意键退出&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>&#123;<br>p = (bikeinformation *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(bikeinformation));<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;name);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;sex);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s &quot;</span>, p-&gt;tele);<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d &quot;</span>, &amp;p-&gt;biknum);<br>t-&gt;next = p;<br>t = p;<br>&#125;<br>t-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t**-** 选择怎样排序 --*--\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t 输入1:按自行车编号升序排序\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t 输入2:按自行车编号降序排序\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t 输入3:按用户姓名升序排序\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t 输入4:按用户姓名降序排序\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t 输入0:退出页面\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t是时候做出你的选择了!\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s);<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p-&gt;next; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">for</span> (t = p-&gt;next; t; t = t-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (p-&gt;biknum&gt;t-&gt;biknum)<br>&#123;<br><span class="hljs-built_in">swap_int</span>(&amp;p-&gt;biknum, &amp;t-&gt;biknum);<br><span class="hljs-built_in">swap_str</span>(p-&gt;name, t-&gt;name);<br><span class="hljs-built_in">swap_str</span>(p-&gt;sex, t-&gt;sex);<br><span class="hljs-built_in">swap_str</span>(p-&gt;tele, t-&gt;tele);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序好了信息如下:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p-&gt;next; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">for</span> (t = p-&gt;next; t; t = t-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (p-&gt;biknum &lt; t-&gt;biknum)<br>&#123;<br><span class="hljs-built_in">swap_int</span>(&amp;p-&gt;biknum, &amp;t-&gt;biknum);<br><span class="hljs-built_in">swap_str</span>(p-&gt;name, t-&gt;name);<br><span class="hljs-built_in">swap_str</span>(p-&gt;sex, t-&gt;sex);<br><span class="hljs-built_in">swap_str</span>(p-&gt;tele, t-&gt;tele);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序好了信息如下:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p-&gt;next; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">for</span> (t = p-&gt;next; t; t = t-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(p-&gt;name, t-&gt;name) &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">swap_str</span>(p-&gt;name, t-&gt;name);<br><span class="hljs-built_in">swap_int</span>(&amp;p-&gt;biknum, &amp;t-&gt;biknum);<br><span class="hljs-built_in">swap_str</span>(p-&gt;name, t-&gt;name);<br><span class="hljs-built_in">swap_str</span>(p-&gt;sex, t-&gt;sex);<br><span class="hljs-built_in">swap_str</span>(p-&gt;tele, t-&gt;tele);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序好了信息如下:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">4</span>)<br>&#123;<br><br><span class="hljs-keyword">for</span> (p = head-&gt;next; p-&gt;next; p = p-&gt;next)<br>&#123;<br><span class="hljs-keyword">for</span> (t = p-&gt;next; t; t = t-&gt;next)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(p-&gt;name, t-&gt;name) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">swap_int</span>(&amp;p-&gt;biknum, &amp;t-&gt;biknum);<br><span class="hljs-built_in">swap_str</span>(p-&gt;name, t-&gt;name);<br><span class="hljs-built_in">swap_str</span>(p-&gt;sex, t-&gt;sex);<br><span class="hljs-built_in">swap_str</span>(p-&gt;tele, t-&gt;tele);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (p = head-&gt;next; p; p = p-&gt;next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;排序好了信息如下:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名%s 性别:%s 电话:%s 编号:%d\n&quot;</span>, p-&gt;name, p-&gt;sex, p-&gt;tele, p-&gt;biknum);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ins</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;owo 插入自行车的信息 yoy\n&quot;</span>);<br><span class="hljs-built_in">cre</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ToT 插入信息成功，按回车键回到上一级哦ioi\n&quot;</span>);<br><span class="hljs-built_in">getch</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_int</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> c;<br>c = *a;<br>*a = *b;<br>*b = c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_str</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">char</span> *str1)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> str2[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">strcpy</span>(str2, str1);<br><span class="hljs-built_in">strcpy</span>(str1, str);<br><span class="hljs-built_in">strcpy</span>(str, str2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save1</span><span class="hljs-params">(Link pHead)</span></span><br><span class="hljs-function"></span>&#123;<br>Link r;<br>FILE *fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;d:\\code.c\\data.txt&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>);<br><span class="hljs-keyword">for</span> (r = pHead-&gt;next; r; r = r-&gt;next)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s %s %s %d\n&quot;</span>, r-&gt;name, r-&gt;sex, r-&gt;tele, r-&gt;biknum);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;保存成功AoA&quot;</span>);<br><span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Link pHead)</span></span><br><span class="hljs-function"></span>&#123;<br>Link r;<br>FILE *fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;d:\\code.c\\data.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//打开文件</span><br><span class="hljs-keyword">for</span> (r = pHead; r; r = r-&gt;next)<span class="hljs-comment">//运用循环保存信息</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s %s %s %d\n&quot;</span>, r-&gt;name, r-&gt;sex, r-&gt;tele, r-&gt;biknum);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;保存成功AoA&quot;</span>);<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<span class="hljs-comment">//关闭文件</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save2</span><span class="hljs-params">(Link pHead)</span></span><br><span class="hljs-function"></span>&#123;<br>Link r;<br>FILE *fp;<br>fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;d:\\code.c\\data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">for</span> (r = pHead-&gt;next; r; r = r-&gt;next)<br>&#123;<br><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s %s %s %d\n&quot;</span>, r-&gt;name, r-&gt;sex, r-&gt;tele, r-&gt;biknum);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;保存成功AoA&quot;</span>);<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br></code></pre></td></tr></table></figure><p></p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PTA 7-4 求奇数和 (15 分)C语言实现</title>
    <link href="/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/PTA%207-4%20%E6%B1%82%E5%A5%87%E6%95%B0%E5%92%8C%20(15%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/09/categories/C%E8%AF%AD%E8%A8%80/PTA%207-4%20%E6%B1%82%E5%A5%87%E6%95%B0%E5%92%8C%20(15%20%E5%88%86)C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    <span class="hljs-type">int</span> n,i=<span class="hljs-number">0</span>,j,s=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>&amp;&amp;n&gt;<span class="hljs-number">0</span>)&#123;<br>    <br>    s=s+n;&#125;<br>    <br><br>&#125;<br>    <br>        <br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> <span style="color:#fe2c24;">运用while 循环 寻找＞0的奇数并且求和</span></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;amp;n);<br><span class="hljs-keyword">if</span>(n&amp;lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>&amp;amp;&amp;amp;n&amp;gt;<span class="hljs-number">0</span>)&#123;<br><br>s=s+n;&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
